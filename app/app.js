if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__11174__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__11174 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11174__delegate.call(this, args);
    };
    G__11174.cljs$lang$maxFixedArity = 0;
    G__11174.cljs$lang$applyTo = function(arglist__11175) {
      var args = cljs.core.seq(arglist__11175);
      return G__11174__delegate(args);
    };
    G__11174.cljs$core$IFn$_invoke$arity$variadic = G__11174__delegate;
    return G__11174;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3636__auto__ = ty;
    if (cljs.core.truth_(and__3636__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3636__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4518__auto___11176 = len;
  var i_11177 = 0;
  while (true) {
    if (i_11177 < n__4518__auto___11176) {
      new_arr[i_11177] = arr[i_11177];
      var G__11178 = i_11177 + 1;
      i_11177 = G__11178;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__11179__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__11179 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11179__delegate.call(this, array, i, idxs);
    };
    G__11179.cljs$lang$maxFixedArity = 2;
    G__11179.cljs$lang$applyTo = function(arglist__11180) {
      var array = cljs.core.first(arglist__11180);
      arglist__11180 = cljs.core.next(arglist__11180);
      var i = cljs.core.first(arglist__11180);
      var idxs = cljs.core.rest(arglist__11180);
      return G__11179__delegate(array, i, idxs);
    };
    G__11179.cljs$core$IFn$_invoke$arity$variadic = G__11179__delegate;
    return G__11179;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11181__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__11181 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11181__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11181.cljs$lang$maxFixedArity = 3;
    G__11181.cljs$lang$applyTo = function(arglist__11182) {
      var array = cljs.core.first(arglist__11182);
      arglist__11182 = cljs.core.next(arglist__11182);
      var idx = cljs.core.first(arglist__11182);
      arglist__11182 = cljs.core.next(arglist__11182);
      var idx2 = cljs.core.first(arglist__11182);
      var idxv = cljs.core.rest(arglist__11182);
      return G__11181__delegate(array, idx, idx2, idxv);
    };
    G__11181.cljs$core$IFn$_invoke$arity$variadic = G__11181__delegate;
    return G__11181;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj11184 = {};
  return obj11184;
}();
cljs.core.IFn = function() {
  var obj11186 = {};
  return obj11186;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj11188 = {};
  return obj11188;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3636__auto__ = value;
    if (and__3636__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4285__auto__ = value == null ? null : value;
    return function() {
      var or__3648__auto__ = cljs.core._clone[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clone["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj11190 = {};
  return obj11190;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._count[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._count["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj11192 = {};
  return obj11192;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._empty[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._empty["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj11194 = {};
  return obj11194;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._conj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj11196 = {};
  return obj11196;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj11198 = {};
  return obj11198;
}();
cljs.core.ISeq = function() {
  var obj11200 = {};
  return obj11200;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj11202 = {};
  return obj11202;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj11204 = {};
  return obj11204;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj11206 = {};
  return obj11206;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj11208 = {};
  return obj11208;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj11210 = {};
  return obj11210;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._val[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._val["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj11212 = {};
  return obj11212;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj11214 = {};
  return obj11214;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._peek[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._peek["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._pop[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj11216 = {};
  return obj11216;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj11218 = {};
  return obj11218;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj11220 = {};
  return obj11220;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj11222 = {};
  return obj11222;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj11224 = {};
  return obj11224;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._with_meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._with_meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj11226 = {};
  return obj11226;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj11228 = {};
  return obj11228;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj11230 = {};
  return obj11230;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._equiv[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._equiv["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj11232 = {};
  return obj11232;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._hash[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._hash["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj11234 = {};
  return obj11234;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj11236 = {};
  return obj11236;
}();
cljs.core.IList = function() {
  var obj11238 = {};
  return obj11238;
}();
cljs.core.IRecord = function() {
  var obj11240 = {};
  return obj11240;
}();
cljs.core.IReversible = function() {
  var obj11242 = {};
  return obj11242;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rseq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rseq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj11244 = {};
  return obj11244;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._entry_key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._entry_key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._comparator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._comparator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj11246 = {};
  return obj11246;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._write[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._write["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._flush[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._flush["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj11248 = {};
  return obj11248;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._pr_writer[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj11250 = {};
  return obj11250;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3636__auto__ = d;
    if (and__3636__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4285__auto__ = d == null ? null : d;
    return function() {
      var or__3648__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj11252 = {};
  return obj11252;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._notify_watches[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._add_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._remove_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj11254 = {};
  return obj11254;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._as_transient[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._as_transient["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj11256 = {};
  return obj11256;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj11258 = {};
  return obj11258;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj11260 = {};
  return obj11260;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj11262 = {};
  return obj11262;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj11264 = {};
  return obj11264;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj11266 = {};
  return obj11266;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._compare[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._compare["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj11268 = {};
  return obj11268;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._drop_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._drop_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj11270 = {};
  return obj11270;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj11272 = {};
  return obj11272;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj11274 = {};
  return obj11274;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._name[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._name["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._namespace[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._namespace["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj11276 = {};
  return obj11276;
}();
cljs.core.IReset = function() {
  var obj11278 = {};
  return obj11278;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj11280 = {};
  return obj11280;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj11282 = {};
  return obj11282;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._iterator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._iterator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__11283 = i + 2;
        var G__11284 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__11283;
        h1 = G__11284;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj11286 = {};
  return obj11286;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__11287 = i + 1;
          var G__11288 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__11287;
          hash = G__11288;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj11292 = {};
      return obj11292;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__11294 = o;
    if (G__11294) {
      var bit__4305__auto__ = G__11294.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4305__auto__ || G__11294.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3636__auto__) {
        return b.ns;
      } else {
        return and__3636__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__11296 = null;
  var G__11296__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__11296__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__11296 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11296__2.call(this, self__, coll);
      case 3:
        return G__11296__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11296.cljs$core$IFn$_invoke$arity$2 = G__11296__2;
  G__11296.cljs$core$IFn$_invoke$arity$3 = G__11296__3;
  return G__11296;
}();
cljs.core.Symbol.prototype.apply = function(self__, args11295) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11295)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__11298 = x;
  if (G__11298) {
    var bit__4312__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = bit__4312__auto__;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return G__11298.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__11298.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11298);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11298);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__11300 = value;
  if (G__11300) {
    var bit__4312__auto__ = G__11300.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4312__auto__ || G__11300.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__11300.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11300);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11300);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11302 = coll;
      if (G__11302) {
        var bit__4305__auto__ = G__11302.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4305__auto__ || G__11302.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11304 = coll;
      if (G__11304) {
        var bit__4305__auto__ = G__11304.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11304.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11306 = coll;
      if (G__11306) {
        var bit__4305__auto__ = G__11306.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11306.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11308 = coll;
      if (G__11308) {
        var bit__4305__auto__ = G__11308.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4305__auto__ || G__11308.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__11309__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11310 = y;
            var G__11311 = cljs.core.first.call(null, more);
            var G__11312 = cljs.core.next.call(null, more);
            x = G__11310;
            y = G__11311;
            more = G__11312;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11309 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11309__delegate.call(this, x, y, more);
    };
    G__11309.cljs$lang$maxFixedArity = 2;
    G__11309.cljs$lang$applyTo = function(arglist__11313) {
      var x = cljs.core.first(arglist__11313);
      arglist__11313 = cljs.core.next(arglist__11313);
      var y = cljs.core.first(arglist__11313);
      var more = cljs.core.rest(arglist__11313);
      return G__11309__delegate(x, y, more);
    };
    G__11309.cljs$core$IFn$_invoke$arity$variadic = G__11309__delegate;
    return G__11309;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11314 = n + 1;
      var G__11315 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11316 = cljs.core.next.call(null, coll__$1);
      n = G__11314;
      hash_code = G__11315;
      coll__$1 = G__11316;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11317 = n + 1;
      var G__11318 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11319 = cljs.core.next.call(null, coll__$1);
      n = G__11317;
      hash_code = G__11318;
      coll__$1 = G__11319;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11320 = nval;
            var G__11321 = n + 1;
            val = G__11320;
            n = G__11321;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11322 = nval;
          var G__11323 = n + 1;
          val__$1 = G__11322;
          n = G__11323;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11324 = nval;
          var G__11325 = n + 1;
          val__$1 = G__11324;
          n = G__11325;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11326 = nval;
            var G__11327 = n + 1;
            val = G__11326;
            n = G__11327;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11328 = nval;
          var G__11329 = n + 1;
          val__$1 = G__11328;
          n = G__11329;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11330 = nval;
          var G__11331 = n + 1;
          val__$1 = G__11330;
          n = G__11331;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__11333 = x;
  if (G__11333) {
    var bit__4312__auto__ = G__11333.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4312__auto__ || G__11333.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__11333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11333);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__11335 = x;
  if (G__11335) {
    var bit__4312__auto__ = G__11335.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4312__auto__ || G__11335.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__11335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11335);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__11336 = sn;
      s = G__11336;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__11337__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__11338 = conj.call(null, coll, x);
          var G__11339 = cljs.core.first.call(null, xs);
          var G__11340 = cljs.core.next.call(null, xs);
          coll = G__11338;
          x = G__11339;
          xs = G__11340;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__11337 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11337__delegate.call(this, coll, x, xs);
    };
    G__11337.cljs$lang$maxFixedArity = 2;
    G__11337.cljs$lang$applyTo = function(arglist__11341) {
      var coll = cljs.core.first(arglist__11341);
      arglist__11341 = cljs.core.next(arglist__11341);
      var x = cljs.core.first(arglist__11341);
      var xs = cljs.core.rest(arglist__11341);
      return G__11337__delegate(coll, x, xs);
    };
    G__11337.cljs$core$IFn$_invoke$arity$variadic = G__11337__delegate;
    return G__11337;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__11342 = cljs.core.next.call(null, s);
      var G__11343 = acc + 1;
      s = G__11342;
      acc = G__11343;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11345 = coll;
      if (G__11345) {
        var bit__4305__auto__ = G__11345.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4305__auto__ || G__11345.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11346 = cljs.core.next.call(null, coll);
              var G__11347 = n - 1;
              coll = G__11346;
              n = G__11347;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11348 = cljs.core.next.call(null, coll);
              var G__11349 = n - 1;
              var G__11350 = not_found;
              coll = G__11348;
              n = G__11349;
              not_found = G__11350;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__11355 = coll;
          if (G__11355) {
            var bit__4305__auto__ = G__11355.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11355.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11356 = coll;
                  if (G__11356) {
                    var bit__4312__auto__ = G__11356.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11356.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11356.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11356);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11356);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__11357 = coll;
          if (G__11357) {
            var bit__4305__auto__ = G__11357.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11357.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11358 = coll;
                  if (G__11358) {
                    var bit__4312__auto__ = G__11358.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11358.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11358.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11358);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11358);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__11361 = o;
        if (G__11361) {
          var bit__4305__auto__ = G__11361.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11361.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__11362 = o;
        if (G__11362) {
          var bit__4305__auto__ = G__11362.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11362.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__11363__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__11364 = ret;
          var G__11365 = cljs.core.first.call(null, kvs);
          var G__11366 = cljs.core.second.call(null, kvs);
          var G__11367 = cljs.core.nnext.call(null, kvs);
          coll = G__11364;
          k = G__11365;
          v = G__11366;
          kvs = G__11367;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__11363 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11363__delegate.call(this, coll, k, v, kvs);
    };
    G__11363.cljs$lang$maxFixedArity = 3;
    G__11363.cljs$lang$applyTo = function(arglist__11368) {
      var coll = cljs.core.first(arglist__11368);
      arglist__11368 = cljs.core.next(arglist__11368);
      var k = cljs.core.first(arglist__11368);
      arglist__11368 = cljs.core.next(arglist__11368);
      var v = cljs.core.first(arglist__11368);
      var kvs = cljs.core.rest(arglist__11368);
      return G__11363__delegate(coll, k, v, kvs);
    };
    G__11363.cljs$core$IFn$_invoke$arity$variadic = G__11363__delegate;
    return G__11363;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__11369__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11370 = ret;
            var G__11371 = cljs.core.first.call(null, ks);
            var G__11372 = cljs.core.next.call(null, ks);
            coll = G__11370;
            k = G__11371;
            ks = G__11372;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11369 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11369__delegate.call(this, coll, k, ks);
    };
    G__11369.cljs$lang$maxFixedArity = 2;
    G__11369.cljs$lang$applyTo = function(arglist__11373) {
      var coll = cljs.core.first(arglist__11373);
      arglist__11373 = cljs.core.next(arglist__11373);
      var k = cljs.core.first(arglist__11373);
      var ks = cljs.core.rest(arglist__11373);
      return G__11369__delegate(coll, k, ks);
    };
    G__11369.cljs$core$IFn$_invoke$arity$variadic = G__11369__delegate;
    return G__11369;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3648__auto__ = goog.isFunction(f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11377 = f;
    if (G__11377) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto____$1 = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto____$1)) {
          return or__3648__auto____$1;
        } else {
          return G__11377.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__11377.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11377);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11377);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__11379 = null;
  var G__11379__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__11379__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__11379__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__11379__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__11379__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__11379__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__11379__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__11379__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__11379__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__11379__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11379__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11379__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11379__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11379__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11379__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11379__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11379__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11379__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11379__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11379__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11379__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11379__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__11379 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11379__1.call(this, self__);
      case 2:
        return G__11379__2.call(this, self__, a);
      case 3:
        return G__11379__3.call(this, self__, a, b);
      case 4:
        return G__11379__4.call(this, self__, a, b, c);
      case 5:
        return G__11379__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11379__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11379__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11379__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11379__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11379__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11379__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11379__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11379__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11379__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11379__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11379__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11379__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11379__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11379__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11379__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11379__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11379__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11379.cljs$core$IFn$_invoke$arity$1 = G__11379__1;
  G__11379.cljs$core$IFn$_invoke$arity$2 = G__11379__2;
  G__11379.cljs$core$IFn$_invoke$arity$3 = G__11379__3;
  G__11379.cljs$core$IFn$_invoke$arity$4 = G__11379__4;
  G__11379.cljs$core$IFn$_invoke$arity$5 = G__11379__5;
  G__11379.cljs$core$IFn$_invoke$arity$6 = G__11379__6;
  G__11379.cljs$core$IFn$_invoke$arity$7 = G__11379__7;
  G__11379.cljs$core$IFn$_invoke$arity$8 = G__11379__8;
  G__11379.cljs$core$IFn$_invoke$arity$9 = G__11379__9;
  G__11379.cljs$core$IFn$_invoke$arity$10 = G__11379__10;
  G__11379.cljs$core$IFn$_invoke$arity$11 = G__11379__11;
  G__11379.cljs$core$IFn$_invoke$arity$12 = G__11379__12;
  G__11379.cljs$core$IFn$_invoke$arity$13 = G__11379__13;
  G__11379.cljs$core$IFn$_invoke$arity$14 = G__11379__14;
  G__11379.cljs$core$IFn$_invoke$arity$15 = G__11379__15;
  G__11379.cljs$core$IFn$_invoke$arity$16 = G__11379__16;
  G__11379.cljs$core$IFn$_invoke$arity$17 = G__11379__17;
  G__11379.cljs$core$IFn$_invoke$arity$18 = G__11379__18;
  G__11379.cljs$core$IFn$_invoke$arity$19 = G__11379__19;
  G__11379.cljs$core$IFn$_invoke$arity$20 = G__11379__20;
  G__11379.cljs$core$IFn$_invoke$arity$21 = G__11379__21;
  G__11379.cljs$core$IFn$_invoke$arity$22 = G__11379__22;
  return G__11379;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args11378) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11378)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__11383 = o;
    if (G__11383) {
      var bit__4312__auto__ = G__11383.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__11383.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11383.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11383);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11383);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3636__auto__ = !(o == null);
    if (and__3636__auto__) {
      var G__11387 = o;
      if (G__11387) {
        var bit__4312__auto__ = G__11387.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4312__auto__ || G__11387.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__11387.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11387);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11387);
      }
    } else {
      return and__3636__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__11388__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11389 = ret;
            var G__11390 = cljs.core.first.call(null, ks);
            var G__11391 = cljs.core.next.call(null, ks);
            coll = G__11389;
            k = G__11390;
            ks = G__11391;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11388 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11388__delegate.call(this, coll, k, ks);
    };
    G__11388.cljs$lang$maxFixedArity = 2;
    G__11388.cljs$lang$applyTo = function(arglist__11392) {
      var coll = cljs.core.first(arglist__11392);
      arglist__11392 = cljs.core.next(arglist__11392);
      var k = cljs.core.first(arglist__11392);
      var ks = cljs.core.rest(arglist__11392);
      return G__11388__delegate(coll, k, ks);
    };
    G__11388.cljs$core$IFn$_invoke$arity$variadic = G__11388__delegate;
    return G__11388;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11394 = x;
    if (G__11394) {
      var bit__4312__auto__ = G__11394.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4312__auto__ || G__11394.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__11394.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11394);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11394);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11396 = x;
    if (G__11396) {
      var bit__4312__auto__ = G__11396.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4312__auto__ || G__11396.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__11396.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11396);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11396);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__11398 = x;
  if (G__11398) {
    var bit__4312__auto__ = G__11398.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4312__auto__ || G__11398.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__11398.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11398);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11398);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__11400 = x;
  if (G__11400) {
    var bit__4312__auto__ = G__11400.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4312__auto__ || G__11400.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__11400.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11400);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11400);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__11402 = x;
  if (G__11402) {
    var bit__4312__auto__ = G__11402.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4312__auto__ || G__11402.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__11402.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11402);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11402);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__11404 = x;
  if (G__11404) {
    var bit__4312__auto__ = G__11404.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4312__auto__ || G__11404.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__11404.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11404);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11404);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11406 = x;
    if (G__11406) {
      var bit__4312__auto__ = G__11406.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4312__auto__ || G__11406.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__11406.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11406);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11406);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__11408 = x;
  if (G__11408) {
    var bit__4312__auto__ = G__11408.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4312__auto__ || G__11408.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__11408.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11408);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11408);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__11410 = x;
  if (G__11410) {
    var bit__4305__auto__ = G__11410.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4305__auto__ || G__11410.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj11414 = {};
    return obj11414;
  };
  var js_obj__1 = function() {
    var G__11415__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__11415 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11415__delegate.call(this, keyvals);
    };
    G__11415.cljs$lang$maxFixedArity = 0;
    G__11415.cljs$lang$applyTo = function(arglist__11416) {
      var keyvals = cljs.core.seq(arglist__11416);
      return G__11415__delegate(keyvals);
    };
    G__11415.cljs$core$IFn$_invoke$arity$variadic = G__11415__delegate;
    return G__11415;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11417 = i__$1 + 1;
      var G__11418 = j__$1 + 1;
      var G__11419 = len__$1 - 1;
      i__$1 = G__11417;
      j__$1 = G__11418;
      len__$1 = G__11419;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11420 = i__$1 - 1;
      var G__11421 = j__$1 - 1;
      var G__11422 = len__$1 - 1;
      i__$1 = G__11420;
      j__$1 = G__11421;
      len__$1 = G__11422;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj11424 = {};
  return obj11424;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__11426 = s;
    if (G__11426) {
      var bit__4312__auto__ = G__11426.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4312__auto__ || G__11426.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__11426.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11426);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11426);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__11428 = s;
  if (G__11428) {
    var bit__4312__auto__ = G__11428.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4312__auto__ || G__11428.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__11428.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11428);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11428);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3648__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11432 = f;
    if (G__11432) {
      var bit__4312__auto__ = G__11432.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4312__auto__ || G__11432.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__11432.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11432);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11432);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__11433__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__11434 = cljs.core.conj.call(null, s, x__$1);
              var G__11435 = etc;
              s = G__11434;
              xs = G__11435;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__11433 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11433__delegate.call(this, x, y, more);
    };
    G__11433.cljs$lang$maxFixedArity = 2;
    G__11433.cljs$lang$applyTo = function(arglist__11436) {
      var x = cljs.core.first(arglist__11436);
      arglist__11436 = cljs.core.next(arglist__11436);
      var y = cljs.core.first(arglist__11436);
      var more = cljs.core.rest(arglist__11436);
      return G__11433__delegate(x, y, more);
    };
    G__11433.cljs$core$IFn$_invoke$arity$variadic = G__11433__delegate;
    return G__11433;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3648__auto__ = cljs.core.seq.call(null, coll);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__11438 = x;
            if (G__11438) {
              var bit__4305__auto__ = G__11438.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4305__auto__ || G__11438.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__11439 = xs;
        var G__11440 = ys;
        var G__11441 = len;
        var G__11442 = n + 1;
        xs = G__11439;
        ys = G__11440;
        len = G__11441;
        n = G__11442;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11443 = nval;
          var G__11444 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__11443;
          coll__$1 = G__11444;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__11447 = coll;
      if (G__11447) {
        var bit__4305__auto__ = G__11447.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11447.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__11448 = coll;
      if (G__11448) {
        var bit__4305__auto__ = G__11448.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11448.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__11449 = null;
      var G__11449__0 = function() {
        return f.call(null);
      };
      var G__11449__1 = function(x) {
        return cf.call(null, x);
      };
      var G__11449__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__11449 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__11449__0.call(this);
          case 1:
            return G__11449__1.call(this, x);
          case 2:
            return G__11449__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11449.cljs$core$IFn$_invoke$arity$0 = G__11449__0;
      G__11449.cljs$core$IFn$_invoke$arity$1 = G__11449__1;
      G__11449.cljs$core$IFn$_invoke$arity$2 = G__11449__2;
      return G__11449;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__11450__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__11450 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11450__delegate.call(this, x, y, more);
    };
    G__11450.cljs$lang$maxFixedArity = 2;
    G__11450.cljs$lang$applyTo = function(arglist__11451) {
      var x = cljs.core.first(arglist__11451);
      arglist__11451 = cljs.core.next(arglist__11451);
      var y = cljs.core.first(arglist__11451);
      var more = cljs.core.rest(arglist__11451);
      return G__11450__delegate(x, y, more);
    };
    G__11450.cljs$core$IFn$_invoke$arity$variadic = G__11450__delegate;
    return G__11450;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__11452__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__11452 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11452__delegate.call(this, x, y, more);
    };
    G__11452.cljs$lang$maxFixedArity = 2;
    G__11452.cljs$lang$applyTo = function(arglist__11453) {
      var x = cljs.core.first(arglist__11453);
      arglist__11453 = cljs.core.next(arglist__11453);
      var y = cljs.core.first(arglist__11453);
      var more = cljs.core.rest(arglist__11453);
      return G__11452__delegate(x, y, more);
    };
    G__11452.cljs$core$IFn$_invoke$arity$variadic = G__11452__delegate;
    return G__11452;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__11454__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__11454 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11454__delegate.call(this, x, y, more);
    };
    G__11454.cljs$lang$maxFixedArity = 2;
    G__11454.cljs$lang$applyTo = function(arglist__11455) {
      var x = cljs.core.first(arglist__11455);
      arglist__11455 = cljs.core.next(arglist__11455);
      var y = cljs.core.first(arglist__11455);
      var more = cljs.core.rest(arglist__11455);
      return G__11454__delegate(x, y, more);
    };
    G__11454.cljs$core$IFn$_invoke$arity$variadic = G__11454__delegate;
    return G__11454;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__11456__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__11456 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11456__delegate.call(this, x, y, more);
    };
    G__11456.cljs$lang$maxFixedArity = 2;
    G__11456.cljs$lang$applyTo = function(arglist__11457) {
      var x = cljs.core.first(arglist__11457);
      arglist__11457 = cljs.core.next(arglist__11457);
      var y = cljs.core.first(arglist__11457);
      var more = cljs.core.rest(arglist__11457);
      return G__11456__delegate(x, y, more);
    };
    G__11456.cljs$core$IFn$_invoke$arity$variadic = G__11456__delegate;
    return G__11456;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__11458__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__11459 = y;
            var G__11460 = cljs.core.first.call(null, more);
            var G__11461 = cljs.core.next.call(null, more);
            x = G__11459;
            y = G__11460;
            more = G__11461;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11458 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11458__delegate.call(this, x, y, more);
    };
    G__11458.cljs$lang$maxFixedArity = 2;
    G__11458.cljs$lang$applyTo = function(arglist__11462) {
      var x = cljs.core.first(arglist__11462);
      arglist__11462 = cljs.core.next(arglist__11462);
      var y = cljs.core.first(arglist__11462);
      var more = cljs.core.rest(arglist__11462);
      return G__11458__delegate(x, y, more);
    };
    G__11458.cljs$core$IFn$_invoke$arity$variadic = G__11458__delegate;
    return G__11458;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__11463__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11464 = y;
            var G__11465 = cljs.core.first.call(null, more);
            var G__11466 = cljs.core.next.call(null, more);
            x = G__11464;
            y = G__11465;
            more = G__11466;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11463 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11463__delegate.call(this, x, y, more);
    };
    G__11463.cljs$lang$maxFixedArity = 2;
    G__11463.cljs$lang$applyTo = function(arglist__11467) {
      var x = cljs.core.first(arglist__11467);
      arglist__11467 = cljs.core.next(arglist__11467);
      var y = cljs.core.first(arglist__11467);
      var more = cljs.core.rest(arglist__11467);
      return G__11463__delegate(x, y, more);
    };
    G__11463.cljs$core$IFn$_invoke$arity$variadic = G__11463__delegate;
    return G__11463;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__11468__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__11469 = y;
            var G__11470 = cljs.core.first.call(null, more);
            var G__11471 = cljs.core.next.call(null, more);
            x = G__11469;
            y = G__11470;
            more = G__11471;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11468 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11468__delegate.call(this, x, y, more);
    };
    G__11468.cljs$lang$maxFixedArity = 2;
    G__11468.cljs$lang$applyTo = function(arglist__11472) {
      var x = cljs.core.first(arglist__11472);
      arglist__11472 = cljs.core.next(arglist__11472);
      var y = cljs.core.first(arglist__11472);
      var more = cljs.core.rest(arglist__11472);
      return G__11468__delegate(x, y, more);
    };
    G__11468.cljs$core$IFn$_invoke$arity$variadic = G__11468__delegate;
    return G__11468;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__11473__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11474 = y;
            var G__11475 = cljs.core.first.call(null, more);
            var G__11476 = cljs.core.next.call(null, more);
            x = G__11474;
            y = G__11475;
            more = G__11476;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11473 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11473__delegate.call(this, x, y, more);
    };
    G__11473.cljs$lang$maxFixedArity = 2;
    G__11473.cljs$lang$applyTo = function(arglist__11477) {
      var x = cljs.core.first(arglist__11477);
      arglist__11477 = cljs.core.next(arglist__11477);
      var y = cljs.core.first(arglist__11477);
      var more = cljs.core.rest(arglist__11477);
      return G__11473__delegate(x, y, more);
    };
    G__11473.cljs$core$IFn$_invoke$arity$variadic = G__11473__delegate;
    return G__11473;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3955__auto__ = x;
    var y__3956__auto__ = y;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  };
  var max__3 = function() {
    var G__11478__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3955__auto__ = x;
        var y__3956__auto__ = y;
        return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
      }(), more);
    };
    var G__11478 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11478__delegate.call(this, x, y, more);
    };
    G__11478.cljs$lang$maxFixedArity = 2;
    G__11478.cljs$lang$applyTo = function(arglist__11479) {
      var x = cljs.core.first(arglist__11479);
      arglist__11479 = cljs.core.next(arglist__11479);
      var y = cljs.core.first(arglist__11479);
      var more = cljs.core.rest(arglist__11479);
      return G__11478__delegate(x, y, more);
    };
    G__11478.cljs$core$IFn$_invoke$arity$variadic = G__11478__delegate;
    return G__11478;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3962__auto__ = x;
    var y__3963__auto__ = y;
    return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
  };
  var min__3 = function() {
    var G__11480__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3962__auto__ = x;
        var y__3963__auto__ = y;
        return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
      }(), more);
    };
    var G__11480 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11480__delegate.call(this, x, y, more);
    };
    G__11480.cljs$lang$maxFixedArity = 2;
    G__11480.cljs$lang$applyTo = function(arglist__11481) {
      var x = cljs.core.first(arglist__11481);
      arglist__11481 = cljs.core.next(arglist__11481);
      var y = cljs.core.first(arglist__11481);
      var more = cljs.core.rest(arglist__11481);
      return G__11480__delegate(x, y, more);
    };
    G__11480.cljs$core$IFn$_invoke$arity$variadic = G__11480__delegate;
    return G__11480;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__11482__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__11482 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11482__delegate.call(this, x, y, more);
    };
    G__11482.cljs$lang$maxFixedArity = 2;
    G__11482.cljs$lang$applyTo = function(arglist__11483) {
      var x = cljs.core.first(arglist__11483);
      arglist__11483 = cljs.core.next(arglist__11483);
      var y = cljs.core.first(arglist__11483);
      var more = cljs.core.rest(arglist__11483);
      return G__11482__delegate(x, y, more);
    };
    G__11482.cljs$core$IFn$_invoke$arity$variadic = G__11482__delegate;
    return G__11482;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__11484__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__11484 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11484__delegate.call(this, x, y, more);
    };
    G__11484.cljs$lang$maxFixedArity = 2;
    G__11484.cljs$lang$applyTo = function(arglist__11485) {
      var x = cljs.core.first(arglist__11485);
      arglist__11485 = cljs.core.next(arglist__11485);
      var y = cljs.core.first(arglist__11485);
      var more = cljs.core.rest(arglist__11485);
      return G__11484__delegate(x, y, more);
    };
    G__11484.cljs$core$IFn$_invoke$arity$variadic = G__11484__delegate;
    return G__11484;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__11486__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__11486 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11486__delegate.call(this, x, y, more);
    };
    G__11486.cljs$lang$maxFixedArity = 2;
    G__11486.cljs$lang$applyTo = function(arglist__11487) {
      var x = cljs.core.first(arglist__11487);
      arglist__11487 = cljs.core.next(arglist__11487);
      var y = cljs.core.first(arglist__11487);
      var more = cljs.core.rest(arglist__11487);
      return G__11486__delegate(x, y, more);
    };
    G__11486.cljs$core$IFn$_invoke$arity$variadic = G__11486__delegate;
    return G__11486;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__11488__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__11488 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11488__delegate.call(this, x, y, more);
    };
    G__11488.cljs$lang$maxFixedArity = 2;
    G__11488.cljs$lang$applyTo = function(arglist__11489) {
      var x = cljs.core.first(arglist__11489);
      arglist__11489 = cljs.core.next(arglist__11489);
      var y = cljs.core.first(arglist__11489);
      var more = cljs.core.rest(arglist__11489);
      return G__11488__delegate(x, y, more);
    };
    G__11488.cljs$core$IFn$_invoke$arity$variadic = G__11488__delegate;
    return G__11488;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__11490__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__11490 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11490__delegate.call(this, x, y, more);
    };
    G__11490.cljs$lang$maxFixedArity = 2;
    G__11490.cljs$lang$applyTo = function(arglist__11491) {
      var x = cljs.core.first(arglist__11491);
      arglist__11491 = cljs.core.next(arglist__11491);
      var y = cljs.core.first(arglist__11491);
      var more = cljs.core.rest(arglist__11491);
      return G__11490__delegate(x, y, more);
    };
    G__11490.cljs$core$IFn$_invoke$arity$variadic = G__11490__delegate;
    return G__11490;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__11492__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__11492 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11492__delegate.call(this, x, y, more);
    };
    G__11492.cljs$lang$maxFixedArity = 2;
    G__11492.cljs$lang$applyTo = function(arglist__11493) {
      var x = cljs.core.first(arglist__11493);
      arglist__11493 = cljs.core.next(arglist__11493);
      var y = cljs.core.first(arglist__11493);
      var more = cljs.core.rest(arglist__11493);
      return G__11492__delegate(x, y, more);
    };
    G__11492.cljs$core$IFn$_invoke$arity$variadic = G__11492__delegate;
    return G__11492;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__11494__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__11494 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11494__delegate.call(this, x, y, more);
    };
    G__11494.cljs$lang$maxFixedArity = 2;
    G__11494.cljs$lang$applyTo = function(arglist__11495) {
      var x = cljs.core.first(arglist__11495);
      arglist__11495 = cljs.core.next(arglist__11495);
      var y = cljs.core.first(arglist__11495);
      var more = cljs.core.rest(arglist__11495);
      return G__11494__delegate(x, y, more);
    };
    G__11494.cljs$core$IFn$_invoke$arity$variadic = G__11494__delegate;
    return G__11494;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__11496__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11497 = y;
            var G__11498 = cljs.core.first.call(null, more);
            var G__11499 = cljs.core.next.call(null, more);
            x = G__11497;
            y = G__11498;
            more = G__11499;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11496 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11496__delegate.call(this, x, y, more);
    };
    G__11496.cljs$lang$maxFixedArity = 2;
    G__11496.cljs$lang$applyTo = function(arglist__11500) {
      var x = cljs.core.first(arglist__11500);
      arglist__11500 = cljs.core.next(arglist__11500);
      var y = cljs.core.first(arglist__11500);
      var more = cljs.core.rest(arglist__11500);
      return G__11496__delegate(x, y, more);
    };
    G__11496.cljs$core$IFn$_invoke$arity$variadic = G__11496__delegate;
    return G__11496;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__11501 = n__$1 - 1;
      var G__11502 = cljs.core.next.call(null, xs);
      n__$1 = G__11501;
      xs = G__11502;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__11503__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__11504 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__11505 = cljs.core.next.call(null, more);
          sb = G__11504;
          more = G__11505;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__11503 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11503__delegate.call(this, x, ys);
    };
    G__11503.cljs$lang$maxFixedArity = 1;
    G__11503.cljs$lang$applyTo = function(arglist__11506) {
      var x = cljs.core.first(arglist__11506);
      var ys = cljs.core.rest(arglist__11506);
      return G__11503__delegate(x, ys);
    };
    G__11503.cljs$core$IFn$_invoke$arity$variadic = G__11503__delegate;
    return G__11503;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__11507 = cljs.core.next.call(null, xs);
            var G__11508 = cljs.core.next.call(null, ys);
            xs = G__11507;
            ys = G__11508;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__11509 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__11510 = cljs.core.next.call(null, s);
        res = G__11509;
        s = G__11510;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__11511 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__11512 = cljs.core.next.call(null, s);
      h = G__11511;
      s = G__11512;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__11513 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__11514 = cljs.core.next.call(null, s__$1);
      h = G__11513;
      s__$1 = G__11514;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__11521_11527 = cljs.core.seq.call(null, fn_map);
  var chunk__11522_11528 = null;
  var count__11523_11529 = 0;
  var i__11524_11530 = 0;
  while (true) {
    if (i__11524_11530 < count__11523_11529) {
      var vec__11525_11531 = cljs.core._nth.call(null, chunk__11522_11528, i__11524_11530);
      var key_name_11532 = cljs.core.nth.call(null, vec__11525_11531, 0, null);
      var f_11533 = cljs.core.nth.call(null, vec__11525_11531, 1, null);
      var str_name_11534 = cljs.core.name.call(null, key_name_11532);
      obj[str_name_11534] = f_11533;
      var G__11535 = seq__11521_11527;
      var G__11536 = chunk__11522_11528;
      var G__11537 = count__11523_11529;
      var G__11538 = i__11524_11530 + 1;
      seq__11521_11527 = G__11535;
      chunk__11522_11528 = G__11536;
      count__11523_11529 = G__11537;
      i__11524_11530 = G__11538;
      continue;
    } else {
      var temp__4126__auto___11539 = cljs.core.seq.call(null, seq__11521_11527);
      if (temp__4126__auto___11539) {
        var seq__11521_11540__$1 = temp__4126__auto___11539;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11521_11540__$1)) {
          var c__4418__auto___11541 = cljs.core.chunk_first.call(null, seq__11521_11540__$1);
          var G__11542 = cljs.core.chunk_rest.call(null, seq__11521_11540__$1);
          var G__11543 = c__4418__auto___11541;
          var G__11544 = cljs.core.count.call(null, c__4418__auto___11541);
          var G__11545 = 0;
          seq__11521_11527 = G__11542;
          chunk__11522_11528 = G__11543;
          count__11523_11529 = G__11544;
          i__11524_11530 = G__11545;
          continue;
        } else {
          var vec__11526_11546 = cljs.core.first.call(null, seq__11521_11540__$1);
          var key_name_11547 = cljs.core.nth.call(null, vec__11526_11546, 0, null);
          var f_11548 = cljs.core.nth.call(null, vec__11526_11546, 1, null);
          var str_name_11549 = cljs.core.name.call(null, key_name_11547);
          obj[str_name_11549] = f_11548;
          var G__11550 = cljs.core.next.call(null, seq__11521_11540__$1);
          var G__11551 = null;
          var G__11552 = 0;
          var G__11553 = 0;
          seq__11521_11527 = G__11550;
          chunk__11522_11528 = G__11551;
          count__11523_11529 = G__11552;
          i__11524_11530 = G__11553;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__11555 = coll;
  if (G__11555) {
    var bit__4312__auto__ = G__11555.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4312__auto__ || G__11555.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__11555.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11555);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11555);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__11556 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__11556;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__11557 = i - 1;
        var G__11558 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__11557;
        r = G__11558;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__11559) {
    var xs = cljs.core.seq(arglist__11559);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3648__auto__ = coll == null;
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var G__11563 = coll;
      if (G__11563) {
        var bit__4305__auto__ = G__11563.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11563.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__11565 = x;
  if (G__11565) {
    var bit__4312__auto__ = G__11565.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4312__auto__ || G__11565.cljs$core$IList$) {
      return true;
    } else {
      if (!G__11565.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11565);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11565);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__11567 = null;
  var G__11567__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__11567__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__11567 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11567__2.call(this, self__, coll);
      case 3:
        return G__11567__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11567.cljs$core$IFn$_invoke$arity$2 = G__11567__2;
  G__11567.cljs$core$IFn$_invoke$arity$3 = G__11567__3;
  return G__11567;
}();
cljs.core.Keyword.prototype.apply = function(self__, args11566) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11566)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__11569 = x;
    if (G__11569) {
      var bit__4305__auto__ = G__11569.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__11569.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__11570 = ls.sval();
        ls = G__11570;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__11572 = s;
    if (G__11572) {
      var bit__4305__auto__ = G__11572.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4305__auto__ || G__11572.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__11573 = cljs.core.next.call(null, s__$1);
      s__$1 = G__11573;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_11574 = 0;
  var xs_11575 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_11575) {
      ret[i_11574] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_11575));
      var G__11576 = i_11574 + 1;
      var G__11577 = cljs.core.next.call(null, xs_11575);
      i_11574 = G__11576;
      xs_11575 = G__11577;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11578 = i + 1;
          var G__11579 = cljs.core.next.call(null, s__$1);
          i = G__11578;
          s__$1 = G__11579;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11580 = size;
      var i_11581 = 0;
      while (true) {
        if (i_11581 < n__4518__auto___11580) {
          a[i_11581] = init_val_or_seq;
          var G__11582 = i_11581 + 1;
          i_11581 = G__11582;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11583 = i + 1;
          var G__11584 = cljs.core.next.call(null, s__$1);
          i = G__11583;
          s__$1 = G__11584;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11585 = size;
      var i_11586 = 0;
      while (true) {
        if (i_11586 < n__4518__auto___11585) {
          a[i_11586] = init_val_or_seq;
          var G__11587 = i_11586 + 1;
          i_11586 = G__11587;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11588 = i + 1;
          var G__11589 = cljs.core.next.call(null, s__$1);
          i = G__11588;
          s__$1 = G__11589;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11590 = size;
      var i_11591 = 0;
      while (true) {
        if (i_11591 < n__4518__auto___11590) {
          a[i_11591] = init_val_or_seq;
          var G__11592 = i_11591 + 1;
          i_11591 = G__11592;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11593 = i + 1;
          var G__11594 = cljs.core.next.call(null, s__$1);
          i = G__11593;
          s__$1 = G__11594;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11595 = size;
      var i_11596 = 0;
      while (true) {
        if (i_11596 < n__4518__auto___11595) {
          a[i_11596] = init_val_or_seq;
          var G__11597 = i_11596 + 1;
          i_11596 = G__11597;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__11598 = cljs.core.next.call(null, s__$1);
        var G__11599 = i - 1;
        var G__11600 = sum + 1;
        s__$1 = G__11598;
        i = G__11599;
        sum = G__11600;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__11601__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__11601 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11601__delegate.call(this, x, y, zs);
    };
    G__11601.cljs$lang$maxFixedArity = 2;
    G__11601.cljs$lang$applyTo = function(arglist__11602) {
      var x = cljs.core.first(arglist__11602);
      arglist__11602 = cljs.core.next(arglist__11602);
      var y = cljs.core.first(arglist__11602);
      var zs = cljs.core.rest(arglist__11602);
      return G__11601__delegate(x, y, zs);
    };
    G__11601.cljs$core$IFn$_invoke$arity$variadic = G__11601__delegate;
    return G__11601;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__11603__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__11603 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11603__delegate.call(this, a, b, c, d, more);
    };
    G__11603.cljs$lang$maxFixedArity = 4;
    G__11603.cljs$lang$applyTo = function(arglist__11604) {
      var a = cljs.core.first(arglist__11604);
      arglist__11604 = cljs.core.next(arglist__11604);
      var b = cljs.core.first(arglist__11604);
      arglist__11604 = cljs.core.next(arglist__11604);
      var c = cljs.core.first(arglist__11604);
      arglist__11604 = cljs.core.next(arglist__11604);
      var d = cljs.core.first(arglist__11604);
      var more = cljs.core.rest(arglist__11604);
      return G__11603__delegate(a, b, c, d, more);
    };
    G__11603.cljs$core$IFn$_invoke$arity$variadic = G__11603__delegate;
    return G__11603;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__11605__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11606 = ntcoll;
          var G__11607 = cljs.core.first.call(null, vals);
          var G__11608 = cljs.core.next.call(null, vals);
          tcoll = G__11606;
          val = G__11607;
          vals = G__11608;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11605 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11605__delegate.call(this, tcoll, val, vals);
    };
    G__11605.cljs$lang$maxFixedArity = 2;
    G__11605.cljs$lang$applyTo = function(arglist__11609) {
      var tcoll = cljs.core.first(arglist__11609);
      arglist__11609 = cljs.core.next(arglist__11609);
      var val = cljs.core.first(arglist__11609);
      var vals = cljs.core.rest(arglist__11609);
      return G__11605__delegate(tcoll, val, vals);
    };
    G__11605.cljs$core$IFn$_invoke$arity$variadic = G__11605__delegate;
    return G__11605;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__11610__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__11611 = ntcoll;
          var G__11612 = cljs.core.first.call(null, kvs);
          var G__11613 = cljs.core.second.call(null, kvs);
          var G__11614 = cljs.core.nnext.call(null, kvs);
          tcoll = G__11611;
          key = G__11612;
          val = G__11613;
          kvs = G__11614;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11610 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11610__delegate.call(this, tcoll, key, val, kvs);
    };
    G__11610.cljs$lang$maxFixedArity = 3;
    G__11610.cljs$lang$applyTo = function(arglist__11615) {
      var tcoll = cljs.core.first(arglist__11615);
      arglist__11615 = cljs.core.next(arglist__11615);
      var key = cljs.core.first(arglist__11615);
      arglist__11615 = cljs.core.next(arglist__11615);
      var val = cljs.core.first(arglist__11615);
      var kvs = cljs.core.rest(arglist__11615);
      return G__11610__delegate(tcoll, key, val, kvs);
    };
    G__11610.cljs$core$IFn$_invoke$arity$variadic = G__11610__delegate;
    return G__11610;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__11616__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__11617 = ntcoll;
          var G__11618 = cljs.core.first.call(null, ks);
          var G__11619 = cljs.core.next.call(null, ks);
          tcoll = G__11617;
          key = G__11618;
          ks = G__11619;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11616 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11616__delegate.call(this, tcoll, key, ks);
    };
    G__11616.cljs$lang$maxFixedArity = 2;
    G__11616.cljs$lang$applyTo = function(arglist__11620) {
      var tcoll = cljs.core.first(arglist__11620);
      arglist__11620 = cljs.core.next(arglist__11620);
      var key = cljs.core.first(arglist__11620);
      var ks = cljs.core.rest(arglist__11620);
      return G__11616__delegate(tcoll, key, ks);
    };
    G__11616.cljs$core$IFn$_invoke$arity$variadic = G__11616__delegate;
    return G__11616;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__11621__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11622 = ntcoll;
          var G__11623 = cljs.core.first.call(null, vals);
          var G__11624 = cljs.core.next.call(null, vals);
          tcoll = G__11622;
          val = G__11623;
          vals = G__11624;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11621 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11621__delegate.call(this, tcoll, val, vals);
    };
    G__11621.cljs$lang$maxFixedArity = 2;
    G__11621.cljs$lang$applyTo = function(arglist__11625) {
      var tcoll = cljs.core.first(arglist__11625);
      arglist__11625 = cljs.core.next(arglist__11625);
      var val = cljs.core.first(arglist__11625);
      var vals = cljs.core.rest(arglist__11625);
      return G__11621__delegate(tcoll, val, vals);
    };
    G__11621.cljs$core$IFn$_invoke$arity$variadic = G__11621__delegate;
    return G__11621;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4562 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4562);
      } else {
        return f.call(null, a4562);
      }
    } else {
      var b4563 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4562, b4563);
        } else {
          return f.call(null, a4562, b4563);
        }
      } else {
        var c4564 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4562, b4563, c4564);
          } else {
            return f.call(null, a4562, b4563, c4564);
          }
        } else {
          var d4565 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4562, b4563, c4564, d4565);
            } else {
              return f.call(null, a4562, b4563, c4564, d4565);
            }
          } else {
            var e4566 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4562, b4563, c4564, d4565, e4566);
              } else {
                return f.call(null, a4562, b4563, c4564, d4565, e4566);
              }
            } else {
              var f4567 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4562, b4563, c4564, d4565, e4566, f4567);
                } else {
                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567);
                }
              } else {
                var g4568 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  } else {
                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  }
                } else {
                  var h4569 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    } else {
                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    }
                  } else {
                    var i4570 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      } else {
                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      }
                    } else {
                      var j4571 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        } else {
                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        }
                      } else {
                        var k4572 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          } else {
                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          }
                        } else {
                          var l4573 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            } else {
                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            }
                          } else {
                            var m4574 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              } else {
                                return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              }
                            } else {
                              var n4575 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                } else {
                                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                }
                              } else {
                                var o4576 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  } else {
                                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  }
                                } else {
                                  var p4577 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    } else {
                                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    }
                                  } else {
                                    var q4578 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      } else {
                                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      }
                                    } else {
                                      var r4579 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        } else {
                                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        }
                                      } else {
                                        var s4580 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          } else {
                                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          }
                                        } else {
                                          var t4581 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            } else {
                                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__11626__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__11626 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__11626__delegate.call(this, f, a, b, c, d, args);
    };
    G__11626.cljs$lang$maxFixedArity = 5;
    G__11626.cljs$lang$applyTo = function(arglist__11627) {
      var f = cljs.core.first(arglist__11627);
      arglist__11627 = cljs.core.next(arglist__11627);
      var a = cljs.core.first(arglist__11627);
      arglist__11627 = cljs.core.next(arglist__11627);
      var b = cljs.core.first(arglist__11627);
      arglist__11627 = cljs.core.next(arglist__11627);
      var c = cljs.core.first(arglist__11627);
      arglist__11627 = cljs.core.next(arglist__11627);
      var d = cljs.core.first(arglist__11627);
      var args = cljs.core.rest(arglist__11627);
      return G__11626__delegate(f, a, b, c, d, args);
    };
    G__11626.cljs$core$IFn$_invoke$arity$variadic = G__11626__delegate;
    return G__11626;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__11628__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__11628 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__11628__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__11628.cljs$lang$maxFixedArity = 6;
    G__11628.cljs$lang$applyTo = function(arglist__11629) {
      var obj = cljs.core.first(arglist__11629);
      arglist__11629 = cljs.core.next(arglist__11629);
      var f = cljs.core.first(arglist__11629);
      arglist__11629 = cljs.core.next(arglist__11629);
      var a = cljs.core.first(arglist__11629);
      arglist__11629 = cljs.core.next(arglist__11629);
      var b = cljs.core.first(arglist__11629);
      arglist__11629 = cljs.core.next(arglist__11629);
      var c = cljs.core.first(arglist__11629);
      arglist__11629 = cljs.core.next(arglist__11629);
      var d = cljs.core.first(arglist__11629);
      var args = cljs.core.rest(arglist__11629);
      return G__11628__delegate(obj, f, a, b, c, d, args);
    };
    G__11628.cljs$core$IFn$_invoke$arity$variadic = G__11628__delegate;
    return G__11628;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__11630__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__11630 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11630__delegate.call(this, x, y, more);
    };
    G__11630.cljs$lang$maxFixedArity = 2;
    G__11630.cljs$lang$applyTo = function(arglist__11631) {
      var x = cljs.core.first(arglist__11631);
      arglist__11631 = cljs.core.next(arglist__11631);
      var y = cljs.core.first(arglist__11631);
      var more = cljs.core.rest(arglist__11631);
      return G__11630__delegate(x, y, more);
    };
    G__11630.cljs$core$IFn$_invoke$arity$variadic = G__11630__delegate;
    return G__11630;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t11635 !== "undefined") {
  } else {
    cljs.core.t11635 = function(nil_iter, meta11636) {
      this.nil_iter = nil_iter;
      this.meta11636 = meta11636;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t11635.cljs$lang$type = true;
    cljs.core.t11635.cljs$lang$ctorStr = "cljs.core/t11635";
    cljs.core.t11635.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/t11635");
    };
    cljs.core.t11635.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t11635.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t11635.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t11635.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11637) {
      var self__ = this;
      var _11637__$1 = this;
      return self__.meta11636;
    };
    cljs.core.t11635.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11637, meta11636__$1) {
      var self__ = this;
      var _11637__$1 = this;
      return new cljs.core.t11635(self__.nil_iter, meta11636__$1);
    };
    cljs.core.__GT_t11635 = function __GT_t11635(nil_iter__$1, meta11636) {
      return new cljs.core.t11635(nil_iter__$1, meta11636);
    };
  }
  return new cljs.core.t11635(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__11638 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__11638;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4518__auto___11639 = self__.iters.length;
  var i_11640 = 0;
  while (true) {
    if (i_11640 < n__4518__auto___11639) {
      self__.nexts[i_11640] = self__.iters[i_11640].next();
      var G__11641 = i_11640 + 1;
      i_11640 = G__11641;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return this$.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__11642_11646 = cljs.core.seq.call(null, colls);
  var chunk__11643_11647 = null;
  var count__11644_11648 = 0;
  var i__11645_11649 = 0;
  while (true) {
    if (i__11645_11649 < count__11644_11648) {
      var coll_11650 = cljs.core._nth.call(null, chunk__11643_11647, i__11645_11649);
      iters.push(cljs.core.iter.call(null, coll_11650));
      var G__11651 = seq__11642_11646;
      var G__11652 = chunk__11643_11647;
      var G__11653 = count__11644_11648;
      var G__11654 = i__11645_11649 + 1;
      seq__11642_11646 = G__11651;
      chunk__11643_11647 = G__11652;
      count__11644_11648 = G__11653;
      i__11645_11649 = G__11654;
      continue;
    } else {
      var temp__4126__auto___11655 = cljs.core.seq.call(null, seq__11642_11646);
      if (temp__4126__auto___11655) {
        var seq__11642_11656__$1 = temp__4126__auto___11655;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11642_11656__$1)) {
          var c__4418__auto___11657 = cljs.core.chunk_first.call(null, seq__11642_11656__$1);
          var G__11658 = cljs.core.chunk_rest.call(null, seq__11642_11656__$1);
          var G__11659 = c__4418__auto___11657;
          var G__11660 = cljs.core.count.call(null, c__4418__auto___11657);
          var G__11661 = 0;
          seq__11642_11646 = G__11658;
          chunk__11643_11647 = G__11659;
          count__11644_11648 = G__11660;
          i__11645_11649 = G__11661;
          continue;
        } else {
          var coll_11662 = cljs.core.first.call(null, seq__11642_11656__$1);
          iters.push(cljs.core.iter.call(null, coll_11662));
          var G__11663 = cljs.core.next.call(null, seq__11642_11656__$1);
          var G__11664 = null;
          var G__11665 = 0;
          var G__11666 = 0;
          seq__11642_11646 = G__11663;
          chunk__11643_11647 = G__11664;
          count__11644_11648 = G__11665;
          i__11645_11649 = G__11666;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3648__auto__ = cljs.core.seq.call(null, coll);
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__11667__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__11667 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11667__delegate.call(this, xform, coll, colls);
    };
    G__11667.cljs$lang$maxFixedArity = 2;
    G__11667.cljs$lang$applyTo = function(arglist__11668) {
      var xform = cljs.core.first(arglist__11668);
      arglist__11668 = cljs.core.next(arglist__11668);
      var coll = cljs.core.first(arglist__11668);
      var colls = cljs.core.rest(arglist__11668);
      return G__11667__delegate(xform, coll, colls);
    };
    G__11667.cljs$core$IFn$_invoke$arity$variadic = G__11667__delegate;
    return G__11667;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__11669 = pred;
        var G__11670 = cljs.core.next.call(null, coll);
        pred = G__11669;
        coll = G__11670;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3648__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        var G__11671 = pred;
        var G__11672 = cljs.core.next.call(null, coll);
        pred = G__11671;
        coll = G__11672;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__11673 = null;
    var G__11673__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__11673__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__11673__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__11673__3 = function() {
      var G__11674__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__11674 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__11674__delegate.call(this, x, y, zs);
      };
      G__11674.cljs$lang$maxFixedArity = 2;
      G__11674.cljs$lang$applyTo = function(arglist__11675) {
        var x = cljs.core.first(arglist__11675);
        arglist__11675 = cljs.core.next(arglist__11675);
        var y = cljs.core.first(arglist__11675);
        var zs = cljs.core.rest(arglist__11675);
        return G__11674__delegate(x, y, zs);
      };
      G__11674.cljs$core$IFn$_invoke$arity$variadic = G__11674__delegate;
      return G__11674;
    }();
    G__11673 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__11673__0.call(this);
        case 1:
          return G__11673__1.call(this, x);
        case 2:
          return G__11673__2.call(this, x, y);
        default:
          return G__11673__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__11673.cljs$lang$maxFixedArity = 2;
    G__11673.cljs$lang$applyTo = G__11673__3.cljs$lang$applyTo;
    G__11673.cljs$core$IFn$_invoke$arity$0 = G__11673__0;
    G__11673.cljs$core$IFn$_invoke$arity$1 = G__11673__1;
    G__11673.cljs$core$IFn$_invoke$arity$2 = G__11673__2;
    G__11673.cljs$core$IFn$_invoke$arity$variadic = G__11673__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__11673;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__11676__delegate = function(args) {
      return x;
    };
    var G__11676 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11676__delegate.call(this, args);
    };
    G__11676.cljs$lang$maxFixedArity = 0;
    G__11676.cljs$lang$applyTo = function(arglist__11677) {
      var args = cljs.core.seq(arglist__11677);
      return G__11676__delegate(args);
    };
    G__11676.cljs$core$IFn$_invoke$arity$variadic = G__11676__delegate;
    return G__11676;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__11678 = null;
      var G__11678__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__11678__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__11678__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__11678__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__11678__4 = function() {
        var G__11679__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__11679 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11679__delegate.call(this, x, y, z, args);
        };
        G__11679.cljs$lang$maxFixedArity = 3;
        G__11679.cljs$lang$applyTo = function(arglist__11680) {
          var x = cljs.core.first(arglist__11680);
          arglist__11680 = cljs.core.next(arglist__11680);
          var y = cljs.core.first(arglist__11680);
          arglist__11680 = cljs.core.next(arglist__11680);
          var z = cljs.core.first(arglist__11680);
          var args = cljs.core.rest(arglist__11680);
          return G__11679__delegate(x, y, z, args);
        };
        G__11679.cljs$core$IFn$_invoke$arity$variadic = G__11679__delegate;
        return G__11679;
      }();
      G__11678 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__11678__0.call(this);
          case 1:
            return G__11678__1.call(this, x);
          case 2:
            return G__11678__2.call(this, x, y);
          case 3:
            return G__11678__3.call(this, x, y, z);
          default:
            return G__11678__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11678.cljs$lang$maxFixedArity = 3;
      G__11678.cljs$lang$applyTo = G__11678__4.cljs$lang$applyTo;
      G__11678.cljs$core$IFn$_invoke$arity$0 = G__11678__0;
      G__11678.cljs$core$IFn$_invoke$arity$1 = G__11678__1;
      G__11678.cljs$core$IFn$_invoke$arity$2 = G__11678__2;
      G__11678.cljs$core$IFn$_invoke$arity$3 = G__11678__3;
      G__11678.cljs$core$IFn$_invoke$arity$variadic = G__11678__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11678;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__11681 = null;
      var G__11681__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__11681__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__11681__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__11681__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__11681__4 = function() {
        var G__11682__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__11682 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11682__delegate.call(this, x, y, z, args);
        };
        G__11682.cljs$lang$maxFixedArity = 3;
        G__11682.cljs$lang$applyTo = function(arglist__11683) {
          var x = cljs.core.first(arglist__11683);
          arglist__11683 = cljs.core.next(arglist__11683);
          var y = cljs.core.first(arglist__11683);
          arglist__11683 = cljs.core.next(arglist__11683);
          var z = cljs.core.first(arglist__11683);
          var args = cljs.core.rest(arglist__11683);
          return G__11682__delegate(x, y, z, args);
        };
        G__11682.cljs$core$IFn$_invoke$arity$variadic = G__11682__delegate;
        return G__11682;
      }();
      G__11681 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__11681__0.call(this);
          case 1:
            return G__11681__1.call(this, x);
          case 2:
            return G__11681__2.call(this, x, y);
          case 3:
            return G__11681__3.call(this, x, y, z);
          default:
            return G__11681__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11681.cljs$lang$maxFixedArity = 3;
      G__11681.cljs$lang$applyTo = G__11681__4.cljs$lang$applyTo;
      G__11681.cljs$core$IFn$_invoke$arity$0 = G__11681__0;
      G__11681.cljs$core$IFn$_invoke$arity$1 = G__11681__1;
      G__11681.cljs$core$IFn$_invoke$arity$2 = G__11681__2;
      G__11681.cljs$core$IFn$_invoke$arity$3 = G__11681__3;
      G__11681.cljs$core$IFn$_invoke$arity$variadic = G__11681__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11681;
    }();
  };
  var comp__4 = function() {
    var G__11684__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__11685__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__11686 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__11687 = cljs.core.next.call(null, fs__$2);
                ret = G__11686;
                fs__$2 = G__11687;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__11685 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__11685__delegate.call(this, args);
          };
          G__11685.cljs$lang$maxFixedArity = 0;
          G__11685.cljs$lang$applyTo = function(arglist__11688) {
            var args = cljs.core.seq(arglist__11688);
            return G__11685__delegate(args);
          };
          G__11685.cljs$core$IFn$_invoke$arity$variadic = G__11685__delegate;
          return G__11685;
        }();
      }(fs__$1);
    };
    var G__11684 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11684__delegate.call(this, f1, f2, f3, fs);
    };
    G__11684.cljs$lang$maxFixedArity = 3;
    G__11684.cljs$lang$applyTo = function(arglist__11689) {
      var f1 = cljs.core.first(arglist__11689);
      arglist__11689 = cljs.core.next(arglist__11689);
      var f2 = cljs.core.first(arglist__11689);
      arglist__11689 = cljs.core.next(arglist__11689);
      var f3 = cljs.core.first(arglist__11689);
      var fs = cljs.core.rest(arglist__11689);
      return G__11684__delegate(f1, f2, f3, fs);
    };
    G__11684.cljs$core$IFn$_invoke$arity$variadic = G__11684__delegate;
    return G__11684;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__11690__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__11690 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11690__delegate.call(this, args);
      };
      G__11690.cljs$lang$maxFixedArity = 0;
      G__11690.cljs$lang$applyTo = function(arglist__11691) {
        var args = cljs.core.seq(arglist__11691);
        return G__11690__delegate(args);
      };
      G__11690.cljs$core$IFn$_invoke$arity$variadic = G__11690__delegate;
      return G__11690;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__11692__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__11692 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11692__delegate.call(this, args);
      };
      G__11692.cljs$lang$maxFixedArity = 0;
      G__11692.cljs$lang$applyTo = function(arglist__11693) {
        var args = cljs.core.seq(arglist__11693);
        return G__11692__delegate(args);
      };
      G__11692.cljs$core$IFn$_invoke$arity$variadic = G__11692__delegate;
      return G__11692;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__11694__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__11694 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11694__delegate.call(this, args);
      };
      G__11694.cljs$lang$maxFixedArity = 0;
      G__11694.cljs$lang$applyTo = function(arglist__11695) {
        var args = cljs.core.seq(arglist__11695);
        return G__11694__delegate(args);
      };
      G__11694.cljs$core$IFn$_invoke$arity$variadic = G__11694__delegate;
      return G__11694;
    }();
  };
  var partial__5 = function() {
    var G__11696__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__11697__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__11697 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__11697__delegate.call(this, args);
        };
        G__11697.cljs$lang$maxFixedArity = 0;
        G__11697.cljs$lang$applyTo = function(arglist__11698) {
          var args = cljs.core.seq(arglist__11698);
          return G__11697__delegate(args);
        };
        G__11697.cljs$core$IFn$_invoke$arity$variadic = G__11697__delegate;
        return G__11697;
      }();
    };
    var G__11696 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11696__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__11696.cljs$lang$maxFixedArity = 4;
    G__11696.cljs$lang$applyTo = function(arglist__11699) {
      var f = cljs.core.first(arglist__11699);
      arglist__11699 = cljs.core.next(arglist__11699);
      var arg1 = cljs.core.first(arglist__11699);
      arglist__11699 = cljs.core.next(arglist__11699);
      var arg2 = cljs.core.first(arglist__11699);
      arglist__11699 = cljs.core.next(arglist__11699);
      var arg3 = cljs.core.first(arglist__11699);
      var more = cljs.core.rest(arglist__11699);
      return G__11696__delegate(f, arg1, arg2, arg3, more);
    };
    G__11696.cljs$core$IFn$_invoke$arity$variadic = G__11696__delegate;
    return G__11696;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__11700 = null;
      var G__11700__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__11700__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__11700__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__11700__4 = function() {
        var G__11701__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__11701 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11701__delegate.call(this, a, b, c, ds);
        };
        G__11701.cljs$lang$maxFixedArity = 3;
        G__11701.cljs$lang$applyTo = function(arglist__11702) {
          var a = cljs.core.first(arglist__11702);
          arglist__11702 = cljs.core.next(arglist__11702);
          var b = cljs.core.first(arglist__11702);
          arglist__11702 = cljs.core.next(arglist__11702);
          var c = cljs.core.first(arglist__11702);
          var ds = cljs.core.rest(arglist__11702);
          return G__11701__delegate(a, b, c, ds);
        };
        G__11701.cljs$core$IFn$_invoke$arity$variadic = G__11701__delegate;
        return G__11701;
      }();
      G__11700 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__11700__1.call(this, a);
          case 2:
            return G__11700__2.call(this, a, b);
          case 3:
            return G__11700__3.call(this, a, b, c);
          default:
            return G__11700__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11700.cljs$lang$maxFixedArity = 3;
      G__11700.cljs$lang$applyTo = G__11700__4.cljs$lang$applyTo;
      G__11700.cljs$core$IFn$_invoke$arity$1 = G__11700__1;
      G__11700.cljs$core$IFn$_invoke$arity$2 = G__11700__2;
      G__11700.cljs$core$IFn$_invoke$arity$3 = G__11700__3;
      G__11700.cljs$core$IFn$_invoke$arity$variadic = G__11700__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11700;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__11703 = null;
      var G__11703__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__11703__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__11703__4 = function() {
        var G__11704__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__11704 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11704__delegate.call(this, a, b, c, ds);
        };
        G__11704.cljs$lang$maxFixedArity = 3;
        G__11704.cljs$lang$applyTo = function(arglist__11705) {
          var a = cljs.core.first(arglist__11705);
          arglist__11705 = cljs.core.next(arglist__11705);
          var b = cljs.core.first(arglist__11705);
          arglist__11705 = cljs.core.next(arglist__11705);
          var c = cljs.core.first(arglist__11705);
          var ds = cljs.core.rest(arglist__11705);
          return G__11704__delegate(a, b, c, ds);
        };
        G__11704.cljs$core$IFn$_invoke$arity$variadic = G__11704__delegate;
        return G__11704;
      }();
      G__11703 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__11703__2.call(this, a, b);
          case 3:
            return G__11703__3.call(this, a, b, c);
          default:
            return G__11703__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11703.cljs$lang$maxFixedArity = 3;
      G__11703.cljs$lang$applyTo = G__11703__4.cljs$lang$applyTo;
      G__11703.cljs$core$IFn$_invoke$arity$2 = G__11703__2;
      G__11703.cljs$core$IFn$_invoke$arity$3 = G__11703__3;
      G__11703.cljs$core$IFn$_invoke$arity$variadic = G__11703__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11703;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__11706 = null;
      var G__11706__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__11706__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__11706__4 = function() {
        var G__11707__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__11707 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11707__delegate.call(this, a, b, c, ds);
        };
        G__11707.cljs$lang$maxFixedArity = 3;
        G__11707.cljs$lang$applyTo = function(arglist__11708) {
          var a = cljs.core.first(arglist__11708);
          arglist__11708 = cljs.core.next(arglist__11708);
          var b = cljs.core.first(arglist__11708);
          arglist__11708 = cljs.core.next(arglist__11708);
          var c = cljs.core.first(arglist__11708);
          var ds = cljs.core.rest(arglist__11708);
          return G__11707__delegate(a, b, c, ds);
        };
        G__11707.cljs$core$IFn$_invoke$arity$variadic = G__11707__delegate;
        return G__11707;
      }();
      G__11706 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__11706__2.call(this, a, b);
          case 3:
            return G__11706__3.call(this, a, b, c);
          default:
            return G__11706__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11706.cljs$lang$maxFixedArity = 3;
      G__11706.cljs$lang$applyTo = G__11706__4.cljs$lang$applyTo;
      G__11706.cljs$core$IFn$_invoke$arity$2 = G__11706__2;
      G__11706.cljs$core$IFn$_invoke$arity$3 = G__11706__3;
      G__11706.cljs$core$IFn$_invoke$arity$variadic = G__11706__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11706;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11709 = size;
          var i_11710 = 0;
          while (true) {
            if (i_11710 < n__4518__auto___11709) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_11710, cljs.core._nth.call(null, c, i_11710)));
              var G__11711 = i_11710 + 1;
              i_11710 = G__11711;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__11712 = null;
        var G__11712__0 = function() {
          return rf.call(null);
        };
        var G__11712__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11712__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__11712 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11712__0.call(this);
            case 1:
              return G__11712__1.call(this, result);
            case 2:
              return G__11712__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11712.cljs$core$IFn$_invoke$arity$0 = G__11712__0;
        G__11712.cljs$core$IFn$_invoke$arity$1 = G__11712__1;
        G__11712.cljs$core$IFn$_invoke$arity$2 = G__11712__2;
        return G__11712;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11713 = size;
          var i_11714 = 0;
          while (true) {
            if (i_11714 < n__4518__auto___11713) {
              var x_11715 = f.call(null, cljs.core._nth.call(null, c, i_11714));
              if (x_11715 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_11715);
              }
              var G__11716 = i_11714 + 1;
              i_11714 = G__11716;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11717 = cljs.core.seq.call(null, self__.watches);
  var chunk__11718 = null;
  var count__11719 = 0;
  var i__11720 = 0;
  while (true) {
    if (i__11720 < count__11719) {
      var vec__11721 = cljs.core._nth.call(null, chunk__11718, i__11720);
      var key = cljs.core.nth.call(null, vec__11721, 0, null);
      var f = cljs.core.nth.call(null, vec__11721, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__11723 = seq__11717;
      var G__11724 = chunk__11718;
      var G__11725 = count__11719;
      var G__11726 = i__11720 + 1;
      seq__11717 = G__11723;
      chunk__11718 = G__11724;
      count__11719 = G__11725;
      i__11720 = G__11726;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11717);
      if (temp__4126__auto__) {
        var seq__11717__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11717__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__11717__$1);
          var G__11727 = cljs.core.chunk_rest.call(null, seq__11717__$1);
          var G__11728 = c__4418__auto__;
          var G__11729 = cljs.core.count.call(null, c__4418__auto__);
          var G__11730 = 0;
          seq__11717 = G__11727;
          chunk__11718 = G__11728;
          count__11719 = G__11729;
          i__11720 = G__11730;
          continue;
        } else {
          var vec__11722 = cljs.core.first.call(null, seq__11717__$1);
          var key = cljs.core.nth.call(null, vec__11722, 0, null);
          var f = cljs.core.nth.call(null, vec__11722, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__11731 = cljs.core.next.call(null, seq__11717__$1);
          var G__11732 = null;
          var G__11733 = 0;
          var G__11734 = 0;
          seq__11717 = G__11731;
          chunk__11718 = G__11732;
          count__11719 = G__11733;
          i__11720 = G__11734;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__11738__delegate = function(x, p__11735) {
      var map__11737 = p__11735;
      var map__11737__$1 = cljs.core.seq_QMARK_.call(null, map__11737) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11737) : map__11737;
      var validator = cljs.core.get.call(null, map__11737__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__11737__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__11738 = function(x, var_args) {
      var p__11735 = null;
      if (arguments.length > 1) {
        p__11735 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11738__delegate.call(this, x, p__11735);
    };
    G__11738.cljs$lang$maxFixedArity = 1;
    G__11738.cljs$lang$applyTo = function(arglist__11739) {
      var x = cljs.core.first(arglist__11739);
      var p__11735 = cljs.core.rest(arglist__11739);
      return G__11738__delegate(x, p__11735);
    };
    G__11738.cljs$core$IFn$_invoke$arity$variadic = G__11738__delegate;
    return G__11738;
  }();
  atom = function(x, var_args) {
    var p__11735 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__11740__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__11740 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11740__delegate.call(this, a, f, x, y, more);
    };
    G__11740.cljs$lang$maxFixedArity = 4;
    G__11740.cljs$lang$applyTo = function(arglist__11741) {
      var a = cljs.core.first(arglist__11741);
      arglist__11741 = cljs.core.next(arglist__11741);
      var f = cljs.core.first(arglist__11741);
      arglist__11741 = cljs.core.next(arglist__11741);
      var x = cljs.core.first(arglist__11741);
      arglist__11741 = cljs.core.next(arglist__11741);
      var y = cljs.core.first(arglist__11741);
      var more = cljs.core.rest(arglist__11741);
      return G__11740__delegate(a, f, x, y, more);
    };
    G__11740.cljs$core$IFn$_invoke$arity$variadic = G__11740__delegate;
    return G__11740;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__11742 = null;
          var G__11742__0 = function() {
            return rf.call(null);
          };
          var G__11742__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11742__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__11742 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11742__0.call(this);
              case 1:
                return G__11742__1.call(this, result);
              case 2:
                return G__11742__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11742.cljs$core$IFn$_invoke$arity$0 = G__11742__0;
          G__11742.cljs$core$IFn$_invoke$arity$1 = G__11742__1;
          G__11742.cljs$core$IFn$_invoke$arity$2 = G__11742__2;
          return G__11742;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4518__auto___11743 = size;
            var i_11744 = 0;
            while (true) {
              if (i_11744 < n__4518__auto___11743) {
                var x_11745 = f.call(null, idx + i_11744, cljs.core._nth.call(null, c, i_11744));
                if (x_11745 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_11745);
                }
                var G__11746 = i_11744 + 1;
                i_11744 = G__11746;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p.call(null, y);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__11753__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__11753 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11753__delegate.call(this, x, y, z, args);
        };
        G__11753.cljs$lang$maxFixedArity = 3;
        G__11753.cljs$lang$applyTo = function(arglist__11754) {
          var x = cljs.core.first(arglist__11754);
          arglist__11754 = cljs.core.next(arglist__11754);
          var y = cljs.core.first(arglist__11754);
          arglist__11754 = cljs.core.next(arglist__11754);
          var z = cljs.core.first(arglist__11754);
          var args = cljs.core.rest(arglist__11754);
          return G__11753__delegate(x, y, z, args);
        };
        G__11753.cljs$core$IFn$_invoke$arity$variadic = G__11753__delegate;
        return G__11753;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__11755__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__11747_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__11747_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              return p2.call(null, p1__11747_SHARP_);
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__11755 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11755__delegate.call(this, x, y, z, args);
        };
        G__11755.cljs$lang$maxFixedArity = 3;
        G__11755.cljs$lang$applyTo = function(arglist__11756) {
          var x = cljs.core.first(arglist__11756);
          arglist__11756 = cljs.core.next(arglist__11756);
          var y = cljs.core.first(arglist__11756);
          arglist__11756 = cljs.core.next(arglist__11756);
          var z = cljs.core.first(arglist__11756);
          var args = cljs.core.rest(arglist__11756);
          return G__11755__delegate(x, y, z, args);
        };
        G__11755.cljs$core$IFn$_invoke$arity$variadic = G__11755__delegate;
        return G__11755;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    var and__3636__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3636__auto____$5)) {
                      var and__3636__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3636__auto____$6)) {
                        var and__3636__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3636__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3636__auto____$7;
                        }
                      } else {
                        return and__3636__auto____$6;
                      }
                    } else {
                      return and__3636__auto____$5;
                    }
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__11757__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__11748_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__11748_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              var and__3636__auto____$1 = p2.call(null, p1__11748_SHARP_);
              if (cljs.core.truth_(and__3636__auto____$1)) {
                return p3.call(null, p1__11748_SHARP_);
              } else {
                return and__3636__auto____$1;
              }
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__11757 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11757__delegate.call(this, x, y, z, args);
        };
        G__11757.cljs$lang$maxFixedArity = 3;
        G__11757.cljs$lang$applyTo = function(arglist__11758) {
          var x = cljs.core.first(arglist__11758);
          arglist__11758 = cljs.core.next(arglist__11758);
          var y = cljs.core.first(arglist__11758);
          arglist__11758 = cljs.core.next(arglist__11758);
          var z = cljs.core.first(arglist__11758);
          var args = cljs.core.rest(arglist__11758);
          return G__11757__delegate(x, y, z, args);
        };
        G__11757.cljs$core$IFn$_invoke$arity$variadic = G__11757__delegate;
        return G__11757;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__11759__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11749_SHARP_) {
                return p1__11749_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11750_SHARP_) {
                var and__3636__auto__ = p1__11750_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  return p1__11750_SHARP_.call(null, y);
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11751_SHARP_) {
                var and__3636__auto__ = p1__11751_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  var and__3636__auto____$1 = p1__11751_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$1)) {
                    return p1__11751_SHARP_.call(null, z);
                  } else {
                    return and__3636__auto____$1;
                  }
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__11760__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__11752_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__11752_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__11760 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__11760__delegate.call(this, x, y, z, args);
            };
            G__11760.cljs$lang$maxFixedArity = 3;
            G__11760.cljs$lang$applyTo = function(arglist__11761) {
              var x = cljs.core.first(arglist__11761);
              arglist__11761 = cljs.core.next(arglist__11761);
              var y = cljs.core.first(arglist__11761);
              arglist__11761 = cljs.core.next(arglist__11761);
              var z = cljs.core.first(arglist__11761);
              var args = cljs.core.rest(arglist__11761);
              return G__11760__delegate(x, y, z, args);
            };
            G__11760.cljs$core$IFn$_invoke$arity$variadic = G__11760__delegate;
            return G__11760;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__11759 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11759__delegate.call(this, p1, p2, p3, ps);
    };
    G__11759.cljs$lang$maxFixedArity = 3;
    G__11759.cljs$lang$applyTo = function(arglist__11762) {
      var p1 = cljs.core.first(arglist__11762);
      arglist__11762 = cljs.core.next(arglist__11762);
      var p2 = cljs.core.first(arglist__11762);
      arglist__11762 = cljs.core.next(arglist__11762);
      var p3 = cljs.core.first(arglist__11762);
      var ps = cljs.core.rest(arglist__11762);
      return G__11759__delegate(p1, p2, p3, ps);
    };
    G__11759.cljs$core$IFn$_invoke$arity$variadic = G__11759__delegate;
    return G__11759;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__11769__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__11769 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11769__delegate.call(this, x, y, z, args);
        };
        G__11769.cljs$lang$maxFixedArity = 3;
        G__11769.cljs$lang$applyTo = function(arglist__11770) {
          var x = cljs.core.first(arglist__11770);
          arglist__11770 = cljs.core.next(arglist__11770);
          var y = cljs.core.first(arglist__11770);
          arglist__11770 = cljs.core.next(arglist__11770);
          var z = cljs.core.first(arglist__11770);
          var args = cljs.core.rest(arglist__11770);
          return G__11769__delegate(x, y, z, args);
        };
        G__11769.cljs$core$IFn$_invoke$arity$variadic = G__11769__delegate;
        return G__11769;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__11771__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__11763_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__11763_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  return p2.call(null, p1__11763_SHARP_);
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__11771 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11771__delegate.call(this, x, y, z, args);
        };
        G__11771.cljs$lang$maxFixedArity = 3;
        G__11771.cljs$lang$applyTo = function(arglist__11772) {
          var x = cljs.core.first(arglist__11772);
          arglist__11772 = cljs.core.next(arglist__11772);
          var y = cljs.core.first(arglist__11772);
          arglist__11772 = cljs.core.next(arglist__11772);
          var z = cljs.core.first(arglist__11772);
          var args = cljs.core.rest(arglist__11772);
          return G__11771__delegate(x, y, z, args);
        };
        G__11771.cljs$core$IFn$_invoke$arity$variadic = G__11771__delegate;
        return G__11771;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  var or__3648__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$5)) {
                    return or__3648__auto____$5;
                  } else {
                    var or__3648__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3648__auto____$6)) {
                      return or__3648__auto____$6;
                    } else {
                      var or__3648__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3648__auto____$7)) {
                        return or__3648__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__11773__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__11764_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__11764_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  var or__3648__auto____$2 = p2.call(null, p1__11764_SHARP_);
                  if (cljs.core.truth_(or__3648__auto____$2)) {
                    return or__3648__auto____$2;
                  } else {
                    return p3.call(null, p1__11764_SHARP_);
                  }
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__11773 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11773__delegate.call(this, x, y, z, args);
        };
        G__11773.cljs$lang$maxFixedArity = 3;
        G__11773.cljs$lang$applyTo = function(arglist__11774) {
          var x = cljs.core.first(arglist__11774);
          arglist__11774 = cljs.core.next(arglist__11774);
          var y = cljs.core.first(arglist__11774);
          arglist__11774 = cljs.core.next(arglist__11774);
          var z = cljs.core.first(arglist__11774);
          var args = cljs.core.rest(arglist__11774);
          return G__11773__delegate(x, y, z, args);
        };
        G__11773.cljs$core$IFn$_invoke$arity$variadic = G__11773__delegate;
        return G__11773;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__11775__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11765_SHARP_) {
                return p1__11765_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11766_SHARP_) {
                var or__3648__auto__ = p1__11766_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  return p1__11766_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11767_SHARP_) {
                var or__3648__auto__ = p1__11767_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  var or__3648__auto____$1 = p1__11767_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$1)) {
                    return or__3648__auto____$1;
                  } else {
                    return p1__11767_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__11776__delegate = function(x, y, z, args) {
              var or__3648__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3648__auto__, ps__$1) {
                  return function(p1__11768_SHARP_) {
                    return cljs.core.some.call(null, p1__11768_SHARP_, args);
                  };
                }(or__3648__auto__, ps__$1), ps__$1);
              }
            };
            var G__11776 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__11776__delegate.call(this, x, y, z, args);
            };
            G__11776.cljs$lang$maxFixedArity = 3;
            G__11776.cljs$lang$applyTo = function(arglist__11777) {
              var x = cljs.core.first(arglist__11777);
              arglist__11777 = cljs.core.next(arglist__11777);
              var y = cljs.core.first(arglist__11777);
              arglist__11777 = cljs.core.next(arglist__11777);
              var z = cljs.core.first(arglist__11777);
              var args = cljs.core.rest(arglist__11777);
              return G__11776__delegate(x, y, z, args);
            };
            G__11776.cljs$core$IFn$_invoke$arity$variadic = G__11776__delegate;
            return G__11776;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__11775 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11775__delegate.call(this, p1, p2, p3, ps);
    };
    G__11775.cljs$lang$maxFixedArity = 3;
    G__11775.cljs$lang$applyTo = function(arglist__11778) {
      var p1 = cljs.core.first(arglist__11778);
      arglist__11778 = cljs.core.next(arglist__11778);
      var p2 = cljs.core.first(arglist__11778);
      arglist__11778 = cljs.core.next(arglist__11778);
      var p3 = cljs.core.first(arglist__11778);
      var ps = cljs.core.rest(arglist__11778);
      return G__11775__delegate(p1, p2, p3, ps);
    };
    G__11775.cljs$core$IFn$_invoke$arity$variadic = G__11775__delegate;
    return G__11775;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__11780 = null;
        var G__11780__0 = function() {
          return rf.call(null);
        };
        var G__11780__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11780__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__11780__3 = function() {
          var G__11781__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__11781 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__11781__delegate.call(this, result, input, inputs);
          };
          G__11781.cljs$lang$maxFixedArity = 2;
          G__11781.cljs$lang$applyTo = function(arglist__11782) {
            var result = cljs.core.first(arglist__11782);
            arglist__11782 = cljs.core.next(arglist__11782);
            var input = cljs.core.first(arglist__11782);
            var inputs = cljs.core.rest(arglist__11782);
            return G__11781__delegate(result, input, inputs);
          };
          G__11781.cljs$core$IFn$_invoke$arity$variadic = G__11781__delegate;
          return G__11781;
        }();
        G__11780 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__11780__0.call(this);
            case 1:
              return G__11780__1.call(this, result);
            case 2:
              return G__11780__2.call(this, result, input);
            default:
              return G__11780__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11780.cljs$lang$maxFixedArity = 2;
        G__11780.cljs$lang$applyTo = G__11780__3.cljs$lang$applyTo;
        G__11780.cljs$core$IFn$_invoke$arity$0 = G__11780__0;
        G__11780.cljs$core$IFn$_invoke$arity$1 = G__11780__1;
        G__11780.cljs$core$IFn$_invoke$arity$2 = G__11780__2;
        G__11780.cljs$core$IFn$_invoke$arity$variadic = G__11780__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__11780;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11783 = size;
          var i_11784 = 0;
          while (true) {
            if (i_11784 < n__4518__auto___11783) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_11784)));
              var G__11785 = i_11784 + 1;
              i_11784 = G__11785;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__11786__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__11779_SHARP_) {
          return cljs.core.apply.call(null, f, p1__11779_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__11786 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11786__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__11786.cljs$lang$maxFixedArity = 4;
    G__11786.cljs$lang$applyTo = function(arglist__11787) {
      var f = cljs.core.first(arglist__11787);
      arglist__11787 = cljs.core.next(arglist__11787);
      var c1 = cljs.core.first(arglist__11787);
      arglist__11787 = cljs.core.next(arglist__11787);
      var c2 = cljs.core.first(arglist__11787);
      arglist__11787 = cljs.core.next(arglist__11787);
      var c3 = cljs.core.first(arglist__11787);
      var colls = cljs.core.rest(arglist__11787);
      return G__11786__delegate(f, c1, c2, c3, colls);
    };
    G__11786.cljs$core$IFn$_invoke$arity$variadic = G__11786__delegate;
    return G__11786;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__11788 = null;
          var G__11788__0 = function() {
            return rf.call(null);
          };
          var G__11788__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11788__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__11788 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11788__0.call(this);
              case 1:
                return G__11788__1.call(this, result);
              case 2:
                return G__11788__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11788.cljs$core$IFn$_invoke$arity$0 = G__11788__0;
          G__11788.cljs$core$IFn$_invoke$arity$1 = G__11788__1;
          G__11788.cljs$core$IFn$_invoke$arity$2 = G__11788__2;
          return G__11788;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__11789 = null;
          var G__11789__0 = function() {
            return rf.call(null);
          };
          var G__11789__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11789__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__11789 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11789__0.call(this);
              case 1:
                return G__11789__1.call(this, result);
              case 2:
                return G__11789__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11789.cljs$core$IFn$_invoke$arity$0 = G__11789__0;
          G__11789.cljs$core$IFn$_invoke$arity$1 = G__11789__1;
          G__11789.cljs$core$IFn$_invoke$arity$2 = G__11789__2;
          return G__11789;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__11790 = n__$1 - 1;
          var G__11791 = cljs.core.rest.call(null, s);
          n__$1 = G__11790;
          coll__$1 = G__11791;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__11792 = cljs.core.next.call(null, s);
      var G__11793 = cljs.core.next.call(null, lead);
      s = G__11792;
      lead = G__11793;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__11794 = null;
          var G__11794__0 = function() {
            return rf.call(null);
          };
          var G__11794__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11794__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3636__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3636__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3636__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__11794 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11794__0.call(this);
              case 1:
                return G__11794__1.call(this, result);
              case 2:
                return G__11794__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11794.cljs$core$IFn$_invoke$arity$0 = G__11794__0;
          G__11794.cljs$core$IFn$_invoke$arity$1 = G__11794__1;
          G__11794.cljs$core$IFn$_invoke$arity$2 = G__11794__2;
          return G__11794;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3636__auto__ = s;
          if (and__3636__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3636__auto__;
          }
        }())) {
          var G__11795 = pred__$1;
          var G__11796 = cljs.core.rest.call(null, s);
          pred__$1 = G__11795;
          coll__$1 = G__11796;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__11797__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__11797 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11797__delegate.call(this, c1, c2, colls);
    };
    G__11797.cljs$lang$maxFixedArity = 2;
    G__11797.cljs$lang$applyTo = function(arglist__11798) {
      var c1 = cljs.core.first(arglist__11798);
      arglist__11798 = cljs.core.next(arglist__11798);
      var c2 = cljs.core.first(arglist__11798);
      var colls = cljs.core.rest(arglist__11798);
      return G__11797__delegate(c1, c2, colls);
    };
    G__11797.cljs$core$IFn$_invoke$arity$variadic = G__11797__delegate;
    return G__11797;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__11799__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__11799 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11799__delegate.call(this, f, colls);
    };
    G__11799.cljs$lang$maxFixedArity = 1;
    G__11799.cljs$lang$applyTo = function(arglist__11800) {
      var f = cljs.core.first(arglist__11800);
      var colls = cljs.core.rest(arglist__11800);
      return G__11799__delegate(f, colls);
    };
    G__11799.cljs$core$IFn$_invoke$arity$variadic = G__11799__delegate;
    return G__11799;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__11801 = null;
        var G__11801__0 = function() {
          return rf.call(null);
        };
        var G__11801__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11801__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__11801 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11801__0.call(this);
            case 1:
              return G__11801__1.call(this, result);
            case 2:
              return G__11801__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11801.cljs$core$IFn$_invoke$arity$0 = G__11801__0;
        G__11801.cljs$core$IFn$_invoke$arity$1 = G__11801__1;
        G__11801.cljs$core$IFn$_invoke$arity$2 = G__11801__2;
        return G__11801;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11802 = size;
          var i_11803 = 0;
          while (true) {
            if (i_11803 < n__4518__auto___11802) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_11803)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_11803));
              } else {
              }
              var G__11804 = i_11803 + 1;
              i_11803 = G__11804;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__11805_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__11805_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__11808 = to;
        if (G__11808) {
          var bit__4305__auto__ = G__11808.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4305__auto__ || G__11808.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__11809 = to;
      if (G__11809) {
        var bit__4305__auto__ = G__11809.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4305__auto__ || G__11809.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__11810__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__11810 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11810__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__11810.cljs$lang$maxFixedArity = 4;
    G__11810.cljs$lang$applyTo = function(arglist__11811) {
      var f = cljs.core.first(arglist__11811);
      arglist__11811 = cljs.core.next(arglist__11811);
      var c1 = cljs.core.first(arglist__11811);
      arglist__11811 = cljs.core.next(arglist__11811);
      var c2 = cljs.core.first(arglist__11811);
      arglist__11811 = cljs.core.next(arglist__11811);
      var c3 = cljs.core.first(arglist__11811);
      var colls = cljs.core.rest(arglist__11811);
      return G__11810__delegate(f, c1, c2, c3, colls);
    };
    G__11810.cljs$core$IFn$_invoke$arity$variadic = G__11810__delegate;
    return G__11810;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__11813 = m__$1;
          if (G__11813) {
            var bit__4312__auto__ = G__11813.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4312__auto__ || G__11813.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__11813.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__11813);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__11813);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__11814 = sentinel;
            var G__11815 = m__$2;
            var G__11816 = cljs.core.next.call(null, ks__$1);
            sentinel = G__11814;
            m__$1 = G__11815;
            ks__$1 = G__11816;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__11817, v) {
  var vec__11819 = p__11817;
  var k = cljs.core.nth.call(null, vec__11819, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__11819, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__11820, f) {
    var vec__11830 = p__11820;
    var k = cljs.core.nth.call(null, vec__11830, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__11830, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__11821, f, a) {
    var vec__11831 = p__11821;
    var k = cljs.core.nth.call(null, vec__11831, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__11831, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__11822, f, a, b) {
    var vec__11832 = p__11822;
    var k = cljs.core.nth.call(null, vec__11832, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__11832, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__11823, f, a, b, c) {
    var vec__11833 = p__11823;
    var k = cljs.core.nth.call(null, vec__11833, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__11833, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__11835__delegate = function(m, p__11824, f, a, b, c, args) {
      var vec__11834 = p__11824;
      var k = cljs.core.nth.call(null, vec__11834, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__11834, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__11835 = function(m, p__11824, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__11835__delegate.call(this, m, p__11824, f, a, b, c, args);
    };
    G__11835.cljs$lang$maxFixedArity = 6;
    G__11835.cljs$lang$applyTo = function(arglist__11836) {
      var m = cljs.core.first(arglist__11836);
      arglist__11836 = cljs.core.next(arglist__11836);
      var p__11824 = cljs.core.first(arglist__11836);
      arglist__11836 = cljs.core.next(arglist__11836);
      var f = cljs.core.first(arglist__11836);
      arglist__11836 = cljs.core.next(arglist__11836);
      var a = cljs.core.first(arglist__11836);
      arglist__11836 = cljs.core.next(arglist__11836);
      var b = cljs.core.first(arglist__11836);
      arglist__11836 = cljs.core.next(arglist__11836);
      var c = cljs.core.first(arglist__11836);
      var args = cljs.core.rest(arglist__11836);
      return G__11835__delegate(m, p__11824, f, a, b, c, args);
    };
    G__11835.cljs$core$IFn$_invoke$arity$variadic = G__11835__delegate;
    return G__11835;
  }();
  update_in = function(m, p__11824, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__11824, f);
      case 4:
        return update_in__4.call(this, m, p__11824, f, a);
      case 5:
        return update_in__5.call(this, m, p__11824, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__11824, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__11824, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__11837 = ll - 5;
      var G__11838 = r;
      ll = G__11837;
      ret = G__11838;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__11839 = cljs.core.pv_aget.call(null, node, 0);
      var G__11840 = level - 5;
      node = G__11839;
      level = G__11840;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__11841 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__11842 = level - 5;
        node = G__11841;
        level = G__11842;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__11844 = j + 1;
              var G__11845 = init__$3;
              j = G__11844;
              init__$2 = G__11845;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__11846 = i + len;
        var G__11847 = init__$2;
        i = G__11846;
        init__$1 = G__11847;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__11848 = j + 1;
              var G__11849 = init__$3;
              j = G__11848;
              init__$2 = G__11849;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__11850 = i + len;
        var G__11851 = init__$2;
        i = G__11850;
        init__$1 = G__11851;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4518__auto___11852 = len;
    var i_11853 = 0;
    while (true) {
      if (i_11853 < n__4518__auto___11852) {
        new_tail[i_11853] = self__.tail[i_11853];
        var G__11854 = i_11853 + 1;
        i_11853 = G__11854;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__11855 = null;
  var G__11855__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11855__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11855 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11855__2.call(this, self__, k);
      case 3:
        return G__11855__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11855.cljs$core$IFn$_invoke$arity$2 = G__11855__2;
  G__11855.cljs$core$IFn$_invoke$arity$3 = G__11855__3;
  return G__11855;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args11843) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11843)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__11856 = i + 1;
        var G__11857 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__11856;
        out = G__11857;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__11858) {
    var args = cljs.core.seq(arglist__11858);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3955__auto__ = self__.end;
    var y__3956__auto__ = v_pos + 1;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__11860 = null;
  var G__11860__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11860__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11860 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11860__2.call(this, self__, k);
      case 3:
        return G__11860__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11860.cljs$core$IFn$_invoke$arity$2 = G__11860__2;
  G__11860.cljs$core$IFn$_invoke$arity$3 = G__11860__3;
  return G__11860;
}();
cljs.core.Subvec.prototype.apply = function(self__, args11859) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11859)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__11861 = meta;
      var G__11862 = v.v;
      var G__11863 = v.start + start;
      var G__11864 = v.start + end;
      var G__11865 = __hash;
      meta = G__11861;
      v = G__11862;
      start = G__11863;
      end = G__11864;
      __hash = G__11865;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj11869 = {};
    return obj11869;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__11870 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__11871 = level - 5;
        node = G__11870;
        level = G__11871;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__11873 = null;
  var G__11873__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11873__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11873 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11873__2.call(this, self__, k);
      case 3:
        return G__11873__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11873.cljs$core$IFn$_invoke$arity$2 = G__11873__2;
  G__11873.cljs$core$IFn$_invoke$arity$3 = G__11873__3;
  return G__11873;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args11872) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11872)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = self__.front;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3648__auto__ = self__.rear;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__11874 = i + incr;
        i = G__11874;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__11875 = i + 1;
      var G__11876 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__11875;
      out = G__11876;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj11880 = {};
    return obj11880;
  }();
  var l = ks.length;
  var i_11881 = 0;
  while (true) {
    if (i_11881 < l) {
      var k_11882 = ks[i_11881];
      new_obj[k_11882] = obj[k_11882];
      var G__11883 = i_11881 + 1;
      i_11881 = G__11883;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__11886 = cljs.core.rest.call(null, keys__$1);
        var G__11887 = init__$2;
        keys__$1 = G__11886;
        init__$1 = G__11887;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__11884_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11884_SHARP_, self__.strobj[p1__11884_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__11888 = null;
  var G__11888__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11888__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11888 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11888__2.call(this, self__, k);
      case 3:
        return G__11888__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11888.cljs$core$IFn$_invoke$arity$2 = G__11888__2;
  G__11888.cljs$core$IFn$_invoke$arity$3 = G__11888__3;
  return G__11888;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args11885) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11885)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj11890 = {};
  return obj11890;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__11891 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__11891, 0, null);
    var v = cljs.core.nth.call(null, vec__11891, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__11892 = i + 2;
        i = G__11892;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__11893 = i + 2;
        i = G__11893;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__11894 = i + 2;
        i = G__11894;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__11895 = i + 2;
        i = G__11895;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__11896 = i + 2;
        i = G__11896;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_11897 = 0;
  while (true) {
    if (i_11897 < l) {
      narr[i_11897] = arr[i_11897];
      var G__11898 = i_11897 + 1;
      i_11897 = G__11898;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11900 = cljs.core.seq.call(null, coll);
  var chunk__11901 = null;
  var count__11902 = 0;
  var i__11903 = 0;
  while (true) {
    if (i__11903 < count__11902) {
      var vec__11904 = cljs.core._nth.call(null, chunk__11901, i__11903);
      var k = cljs.core.nth.call(null, vec__11904, 0, null);
      var v = cljs.core.nth.call(null, vec__11904, 1, null);
      f.call(null, v, k);
      var G__11910 = seq__11900;
      var G__11911 = chunk__11901;
      var G__11912 = count__11902;
      var G__11913 = i__11903 + 1;
      seq__11900 = G__11910;
      chunk__11901 = G__11911;
      count__11902 = G__11912;
      i__11903 = G__11913;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11900);
      if (temp__4126__auto__) {
        var seq__11900__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11900__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__11900__$1);
          var G__11914 = cljs.core.chunk_rest.call(null, seq__11900__$1);
          var G__11915 = c__4418__auto__;
          var G__11916 = cljs.core.count.call(null, c__4418__auto__);
          var G__11917 = 0;
          seq__11900 = G__11914;
          chunk__11901 = G__11915;
          count__11902 = G__11916;
          i__11903 = G__11917;
          continue;
        } else {
          var vec__11905 = cljs.core.first.call(null, seq__11900__$1);
          var k = cljs.core.nth.call(null, vec__11905, 0, null);
          var v = cljs.core.nth.call(null, vec__11905, 1, null);
          f.call(null, v, k);
          var G__11918 = cljs.core.next.call(null, seq__11900__$1);
          var G__11919 = null;
          var G__11920 = 0;
          var G__11921 = 0;
          seq__11900 = G__11918;
          chunk__11901 = G__11919;
          count__11902 = G__11920;
          i__11903 = G__11921;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__11922 = i + 2;
        var G__11923 = init__$2;
        i = G__11922;
        init__$1 = G__11923;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__11906 = other;
    if (G__11906) {
      var bit__4305__auto__ = G__11906.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4305__auto__ || G__11906.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__11924 = i + 2;
              i = G__11924;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj11908 = {};
    return obj11908;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__11925 = s + 2;
            var G__11926 = d;
            s = G__11925;
            d = G__11926;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__11927 = s + 2;
            var G__11928 = d + 2;
            s = G__11927;
            d = G__11928;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__11909 = cljs.core.aclone.call(null, self__.arr);
        G__11909[idx + 1] = v;
        return G__11909;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__11929 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__11930 = cljs.core.next.call(null, es);
          ret = G__11929;
          es = G__11930;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__11931 = null;
  var G__11931__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11931__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11931 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11931__2.call(this, self__, k);
      case 3:
        return G__11931__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11931.cljs$core$IFn$_invoke$arity$2 = G__11931__2;
  G__11931.cljs$core$IFn$_invoke$arity$3 = G__11931__3;
  return G__11931;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args11899) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11899)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__11932 = i + 2;
        var G__11933 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__11932;
        ret = G__11933;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__11934_11936 = self__.arr;
      G__11934_11936.pop();
      G__11934_11936.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__11935 = o;
      if (G__11935) {
        var bit__4312__auto__ = G__11935.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__11935.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__11935.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__11935);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__11935);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__11937 = cljs.core.next.call(null, es);
          var G__11938 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__11937;
          tcoll__$2 = G__11938;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__11939 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__11940 = i + 2;
      out = G__11939;
      i = G__11940;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__11943 = cljs.core.aclone.call(null, arr);
    G__11943[i] = a;
    return G__11943;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__11944 = cljs.core.aclone.call(null, arr);
    G__11944[i] = a;
    G__11944[j] = b;
    return G__11944;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__11945 = i + 2;
        var G__11946 = init__$2;
        i = G__11945;
        init__$1 = G__11946;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_11947 = 0;
        var j_11948 = 0;
        while (true) {
          if (i_11947 < 32) {
            if ((self__.bitmap >>> i_11947 & 1) === 0) {
              var G__11949 = i_11947 + 1;
              var G__11950 = j_11948;
              i_11947 = G__11949;
              j_11948 = G__11950;
              continue;
            } else {
              nodes[i_11947] = !(self__.arr[j_11948] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_11948]), self__.arr[j_11948], self__.arr[j_11948 + 1], added_leaf_QMARK_) : self__.arr[j_11948 + 1];
              var G__11951 = i_11947 + 1;
              var G__11952 = j_11948 + 2;
              i_11947 = G__11951;
              j_11948 = G__11952;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_11953 = 0;
      var j_11954 = 0;
      while (true) {
        if (i_11953 < 32) {
          if ((self__.bitmap >>> i_11953 & 1) === 0) {
            var G__11955 = i_11953 + 1;
            var G__11956 = j_11954;
            i_11953 = G__11955;
            j_11954 = G__11956;
            continue;
          } else {
            nodes[i_11953] = !(self__.arr[j_11954] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_11954]), self__.arr[j_11954], self__.arr[j_11954 + 1], added_leaf_QMARK_) : self__.arr[j_11954 + 1];
            var G__11957 = i_11953 + 1;
            var G__11958 = j_11954 + 2;
            i_11953 = G__11957;
            j_11954 = G__11958;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__11959 = i + 1;
        var G__11960 = j + 2;
        var G__11961 = bitmap | 1 << i;
        i = G__11959;
        j = G__11960;
        bitmap = G__11961;
        continue;
      } else {
        var G__11962 = i + 1;
        var G__11963 = j;
        var G__11964 = bitmap;
        i = G__11962;
        j = G__11963;
        bitmap = G__11964;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__11965 = i + 1;
          var G__11966 = init__$2;
          i = G__11965;
          init__$1 = G__11966;
          continue;
        }
      } else {
        var G__11967 = i + 1;
        var G__11968 = init__$1;
        i = G__11967;
        init__$1 = G__11968;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__11969 = i + 2;
        i = G__11969;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__11970 = j + 2;
                j = G__11970;
                continue;
              }
            } else {
              var G__11971 = j + 2;
              j = G__11971;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__11972 = j + 1;
              j = G__11972;
              continue;
            }
          } else {
            var G__11973 = j + 1;
            j = G__11973;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11975 = cljs.core.seq.call(null, coll);
  var chunk__11976 = null;
  var count__11977 = 0;
  var i__11978 = 0;
  while (true) {
    if (i__11978 < count__11977) {
      var vec__11979 = cljs.core._nth.call(null, chunk__11976, i__11978);
      var k = cljs.core.nth.call(null, vec__11979, 0, null);
      var v = cljs.core.nth.call(null, vec__11979, 1, null);
      f.call(null, v, k);
      var G__11983 = seq__11975;
      var G__11984 = chunk__11976;
      var G__11985 = count__11977;
      var G__11986 = i__11978 + 1;
      seq__11975 = G__11983;
      chunk__11976 = G__11984;
      count__11977 = G__11985;
      i__11978 = G__11986;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11975);
      if (temp__4126__auto__) {
        var seq__11975__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11975__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__11975__$1);
          var G__11987 = cljs.core.chunk_rest.call(null, seq__11975__$1);
          var G__11988 = c__4418__auto__;
          var G__11989 = cljs.core.count.call(null, c__4418__auto__);
          var G__11990 = 0;
          seq__11975 = G__11987;
          chunk__11976 = G__11988;
          count__11977 = G__11989;
          i__11978 = G__11990;
          continue;
        } else {
          var vec__11980 = cljs.core.first.call(null, seq__11975__$1);
          var k = cljs.core.nth.call(null, vec__11980, 0, null);
          var v = cljs.core.nth.call(null, vec__11980, 1, null);
          f.call(null, v, k);
          var G__11991 = cljs.core.next.call(null, seq__11975__$1);
          var G__11992 = null;
          var G__11993 = 0;
          var G__11994 = 0;
          seq__11975 = G__11991;
          chunk__11976 = G__11992;
          count__11977 = G__11993;
          i__11978 = G__11994;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj11982 = {};
    return obj11982;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__11995 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__11996 = cljs.core.next.call(null, es);
          ret = G__11995;
          es = G__11996;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__11997 = null;
  var G__11997__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11997__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11997 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11997__2.call(this, self__, k);
      case 3:
        return G__11997__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11997.cljs$core$IFn$_invoke$arity$2 = G__11997__2;
  G__11997.cljs$core$IFn$_invoke$arity$3 = G__11997__3;
  return G__11997;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args11974) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11974)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__11998 = i + 1;
      var G__11999 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__11998;
      out = G__11999;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__12000 = o;
      if (G__12000) {
        var bit__4312__auto__ = G__12000.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__12000.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12000.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12000);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12000);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__12001 = cljs.core.next.call(null, es);
          var G__12002 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12001;
          tcoll__$1 = G__12002;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__12003 = ascending_QMARK_ ? t.left : t.right;
      var G__12004 = cljs.core.conj.call(null, stack__$1, t);
      t = G__12003;
      stack__$1 = G__12004;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__12006 = null;
  var G__12006__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12006__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12006 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12006__2.call(this, self__, k);
      case 3:
        return G__12006__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12006.cljs$core$IFn$_invoke$arity$2 = G__12006__2;
  G__12006.cljs$core$IFn$_invoke$arity$3 = G__12006__3;
  return G__12006;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args12005) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12005)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__12008 = null;
  var G__12008__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12008__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12008 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12008__2.call(this, self__, k);
      case 3:
        return G__12008__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12008.cljs$core$IFn$_invoke$arity$2 = G__12008__2;
  G__12008.cljs$core$IFn$_invoke$arity$3 = G__12008__3;
  return G__12008;
}();
cljs.core.RedNode.prototype.apply = function(self__, args12007) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12007)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12010 = cljs.core.seq.call(null, coll);
  var chunk__12011 = null;
  var count__12012 = 0;
  var i__12013 = 0;
  while (true) {
    if (i__12013 < count__12012) {
      var vec__12014 = cljs.core._nth.call(null, chunk__12011, i__12013);
      var k = cljs.core.nth.call(null, vec__12014, 0, null);
      var v = cljs.core.nth.call(null, vec__12014, 1, null);
      f.call(null, v, k);
      var G__12016 = seq__12010;
      var G__12017 = chunk__12011;
      var G__12018 = count__12012;
      var G__12019 = i__12013 + 1;
      seq__12010 = G__12016;
      chunk__12011 = G__12017;
      count__12012 = G__12018;
      i__12013 = G__12019;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12010);
      if (temp__4126__auto__) {
        var seq__12010__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12010__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12010__$1);
          var G__12020 = cljs.core.chunk_rest.call(null, seq__12010__$1);
          var G__12021 = c__4418__auto__;
          var G__12022 = cljs.core.count.call(null, c__4418__auto__);
          var G__12023 = 0;
          seq__12010 = G__12020;
          chunk__12011 = G__12021;
          count__12012 = G__12022;
          i__12013 = G__12023;
          continue;
        } else {
          var vec__12015 = cljs.core.first.call(null, seq__12010__$1);
          var k = cljs.core.nth.call(null, vec__12015, 0, null);
          var v = cljs.core.nth.call(null, vec__12015, 1, null);
          f.call(null, v, k);
          var G__12024 = cljs.core.next.call(null, seq__12010__$1);
          var G__12025 = null;
          var G__12026 = 0;
          var G__12027 = 0;
          seq__12010 = G__12024;
          chunk__12011 = G__12025;
          count__12012 = G__12026;
          i__12013 = G__12027;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__12028 = t.left;
          t = G__12028;
          continue;
        } else {
          var G__12029 = t.right;
          t = G__12029;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12030 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12031 = cljs.core.next.call(null, es);
          ret = G__12030;
          es = G__12031;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__12032 = null;
  var G__12032__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12032__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12032 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12032__2.call(this, self__, k);
      case 3:
        return G__12032__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12032.cljs$core$IFn$_invoke$arity$2 = G__12032__2;
  G__12032.cljs$core$IFn$_invoke$arity$3 = G__12032__3;
  return G__12032;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args12009) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12009)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__12033 = cljs.core.conj.call(null, stack, t);
              var G__12034 = t.left;
              stack = G__12033;
              t = G__12034;
              continue;
            } else {
              var G__12035 = stack;
              var G__12036 = t.right;
              stack = G__12035;
              t = G__12036;
              continue;
            }
          } else {
            if (c > 0) {
              var G__12037 = cljs.core.conj.call(null, stack, t);
              var G__12038 = t.right;
              stack = G__12037;
              t = G__12038;
              continue;
            } else {
              var G__12039 = stack;
              var G__12040 = t.left;
              stack = G__12039;
              t = G__12040;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__12041 = cljs.core.nnext.call(null, in$);
        var G__12042 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12041;
        out = G__12042;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__12043) {
    var keyvals = cljs.core.seq(arglist__12043);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__12044) {
    var keyvals = cljs.core.seq(arglist__12044);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj12048 = {};
      return obj12048;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__12049 = cljs.core.nnext.call(null, kvs);
        kvs = G__12049;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__12050) {
    var keyvals = cljs.core.seq(arglist__12050);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__12051 = cljs.core.nnext.call(null, in$);
        var G__12052 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12051;
        out = G__12052;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__12053) {
    var keyvals = cljs.core.seq(arglist__12053);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__12054 = cljs.core.nnext.call(null, in$);
        var G__12055 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12054;
        out = G__12055;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__12056) {
    var comparator = cljs.core.first(arglist__12056);
    var keyvals = cljs.core.rest(arglist__12056);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12057 = self__.mseq;
    if (G__12057) {
      var bit__4312__auto__ = G__12057.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12057.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12057.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12057);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12057);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12058 = self__.mseq;
    if (G__12058) {
      var bit__4312__auto__ = G__12058.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12058.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12058.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12058);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12058);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12059 = self__.mseq;
    if (G__12059) {
      var bit__4312__auto__ = G__12059.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12059.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12059.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12059);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12059);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12060 = self__.mseq;
    if (G__12060) {
      var bit__4312__auto__ = G__12060.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12060.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12060.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12060);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12060);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__12061_SHARP_, p2__12062_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3648__auto__ = p1__12061_SHARP_;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__12062_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__12063) {
    var maps = cljs.core.seq(arglist__12063);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3648__auto__ = m1;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__12064) {
    var f = cljs.core.first(arglist__12064);
    var maps = cljs.core.rest(arglist__12064);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__12065 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__12066 = cljs.core.next.call(null, keys);
      ret = G__12065;
      keys = G__12066;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12069 = cljs.core.seq.call(null, coll);
  var chunk__12070 = null;
  var count__12071 = 0;
  var i__12072 = 0;
  while (true) {
    if (i__12072 < count__12071) {
      var vec__12073 = cljs.core._nth.call(null, chunk__12070, i__12072);
      var k = cljs.core.nth.call(null, vec__12073, 0, null);
      var v = cljs.core.nth.call(null, vec__12073, 1, null);
      f.call(null, v, k);
      var G__12075 = seq__12069;
      var G__12076 = chunk__12070;
      var G__12077 = count__12071;
      var G__12078 = i__12072 + 1;
      seq__12069 = G__12075;
      chunk__12070 = G__12076;
      count__12071 = G__12077;
      i__12072 = G__12078;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12069);
      if (temp__4126__auto__) {
        var seq__12069__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12069__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12069__$1);
          var G__12079 = cljs.core.chunk_rest.call(null, seq__12069__$1);
          var G__12080 = c__4418__auto__;
          var G__12081 = cljs.core.count.call(null, c__4418__auto__);
          var G__12082 = 0;
          seq__12069 = G__12079;
          chunk__12070 = G__12080;
          count__12071 = G__12081;
          i__12072 = G__12082;
          continue;
        } else {
          var vec__12074 = cljs.core.first.call(null, seq__12069__$1);
          var k = cljs.core.nth.call(null, vec__12074, 0, null);
          var v = cljs.core.nth.call(null, vec__12074, 1, null);
          f.call(null, v, k);
          var G__12083 = cljs.core.next.call(null, seq__12069__$1);
          var G__12084 = null;
          var G__12085 = 0;
          var G__12086 = 0;
          seq__12069 = G__12083;
          chunk__12070 = G__12084;
          count__12071 = G__12085;
          i__12072 = G__12086;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12067_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12067_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__12087 = null;
  var G__12087__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12087__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12087 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12087__2.call(this, self__, k);
      case 3:
        return G__12087__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12087.cljs$core$IFn$_invoke$arity$2 = G__12087__2;
  G__12087.cljs$core$IFn$_invoke$arity$3 = G__12087__3;
  return G__12087;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args12068) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12068)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12088 = i + 1;
        var G__12089 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__12088;
        out = G__12089;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__12090 = i + 1;
        var G__12091 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__12090;
        out = G__12091;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__12093 = null;
  var G__12093__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__12093__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__12093 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12093__2.call(this, self__, k);
      case 3:
        return G__12093__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12093.cljs$core$IFn$_invoke$arity$2 = G__12093__2;
  G__12093.cljs$core$IFn$_invoke$arity$3 = G__12093__3;
  return G__12093;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args12092) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12092)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12096 = cljs.core.seq.call(null, coll);
  var chunk__12097 = null;
  var count__12098 = 0;
  var i__12099 = 0;
  while (true) {
    if (i__12099 < count__12098) {
      var vec__12100 = cljs.core._nth.call(null, chunk__12097, i__12099);
      var k = cljs.core.nth.call(null, vec__12100, 0, null);
      var v = cljs.core.nth.call(null, vec__12100, 1, null);
      f.call(null, v, k);
      var G__12102 = seq__12096;
      var G__12103 = chunk__12097;
      var G__12104 = count__12098;
      var G__12105 = i__12099 + 1;
      seq__12096 = G__12102;
      chunk__12097 = G__12103;
      count__12098 = G__12104;
      i__12099 = G__12105;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12096);
      if (temp__4126__auto__) {
        var seq__12096__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12096__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12096__$1);
          var G__12106 = cljs.core.chunk_rest.call(null, seq__12096__$1);
          var G__12107 = c__4418__auto__;
          var G__12108 = cljs.core.count.call(null, c__4418__auto__);
          var G__12109 = 0;
          seq__12096 = G__12106;
          chunk__12097 = G__12107;
          count__12098 = G__12108;
          i__12099 = G__12109;
          continue;
        } else {
          var vec__12101 = cljs.core.first.call(null, seq__12096__$1);
          var k = cljs.core.nth.call(null, vec__12101, 0, null);
          var v = cljs.core.nth.call(null, vec__12101, 1, null);
          f.call(null, v, k);
          var G__12110 = cljs.core.next.call(null, seq__12096__$1);
          var G__12111 = null;
          var G__12112 = 0;
          var G__12113 = 0;
          seq__12096 = G__12110;
          chunk__12097 = G__12111;
          count__12098 = G__12112;
          i__12099 = G__12113;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12094_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12094_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__12114 = null;
  var G__12114__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12114__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12114 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12114__2.call(this, self__, k);
      case 3:
        return G__12114__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12114.cljs$core$IFn$_invoke$arity$2 = G__12114__2;
  G__12114.cljs$core$IFn$_invoke$arity$3 = G__12114__3;
  return G__12114;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args12095) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12095)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4512__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4512__auto__.length) {
        var G__12115 = i + 1;
        var G__12116 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__12115;
        res = G__12116;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__12117 = cljs.core._next.call(null, in$__$1);
          var G__12118 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__12117;
          out = G__12118;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__12119__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__12119 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12119__delegate.call(this, keys);
    };
    G__12119.cljs$lang$maxFixedArity = 0;
    G__12119.cljs$lang$applyTo = function(arglist__12120) {
      var keys = cljs.core.seq(arglist__12120);
      return G__12119__delegate(keys);
    };
    G__12119.cljs$core$IFn$_invoke$arity$variadic = G__12119__delegate;
    return G__12119;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__12121) {
    var keys = cljs.core.seq(arglist__12121);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__12122) {
    var comparator = cljs.core.first(arglist__12122);
    var keys = cljs.core.rest(arglist__12122);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__12123_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12123_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__12123_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__12124_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12124_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__12124_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12131, seen__$1) {
        while (true) {
          var vec__12132 = p__12131;
          var f = cljs.core.nth.call(null, vec__12132, 0, null);
          var xs__$1 = vec__12132;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__12133 = cljs.core.rest.call(null, s);
              var G__12134 = seen__$1;
              p__12131 = G__12133;
              seen__$1 = G__12134;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__12135 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__12136 = cljs.core.next.call(null, s__$1);
      ret = G__12135;
      s__$1 = G__12136;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__12138 = x;
    if (G__12138) {
      var bit__4305__auto__ = G__12138.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__12138.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__12139 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__12140 = cljs.core.next.call(null, ks);
      var G__12141 = cljs.core.next.call(null, vs);
      map = G__12139;
      ks = G__12140;
      vs = G__12141;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__12144__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12142_SHARP_, p2__12143_SHARP_) {
        return max_key.call(null, k, p1__12142_SHARP_, p2__12143_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__12144 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12144__delegate.call(this, k, x, y, more);
    };
    G__12144.cljs$lang$maxFixedArity = 3;
    G__12144.cljs$lang$applyTo = function(arglist__12145) {
      var k = cljs.core.first(arglist__12145);
      arglist__12145 = cljs.core.next(arglist__12145);
      var x = cljs.core.first(arglist__12145);
      arglist__12145 = cljs.core.next(arglist__12145);
      var y = cljs.core.first(arglist__12145);
      var more = cljs.core.rest(arglist__12145);
      return G__12144__delegate(k, x, y, more);
    };
    G__12144.cljs$core$IFn$_invoke$arity$variadic = G__12144__delegate;
    return G__12144;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__12148__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12146_SHARP_, p2__12147_SHARP_) {
        return min_key.call(null, k, p1__12146_SHARP_, p2__12147_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__12148 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12148__delegate.call(this, k, x, y, more);
    };
    G__12148.cljs$lang$maxFixedArity = 3;
    G__12148.cljs$lang$applyTo = function(arglist__12149) {
      var k = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var x = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var y = cljs.core.first(arglist__12149);
      var more = cljs.core.rest(arglist__12149);
      return G__12148__delegate(k, x, y, more);
    };
    G__12148.cljs$core$IFn$_invoke$arity$variadic = G__12148__delegate;
    return G__12148;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__12150 = null;
          var G__12150__0 = function() {
            return rf.call(null);
          };
          var G__12150__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12150__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__12150 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12150__0.call(this);
              case 1:
                return G__12150__1.call(this, result);
              case 2:
                return G__12150__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12150.cljs$core$IFn$_invoke$arity$0 = G__12150__0;
          G__12150.cljs$core$IFn$_invoke$arity$1 = G__12150__1;
          G__12150.cljs$core$IFn$_invoke$arity$2 = G__12150__2;
          return G__12150;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__12151 = null;
        var G__12151__0 = function() {
          return rf.call(null);
        };
        var G__12151__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12151__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__12151 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12151__0.call(this);
            case 1:
              return G__12151__1.call(this, result);
            case 2:
              return G__12151__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12151.cljs$core$IFn$_invoke$arity$0 = G__12151__0;
        G__12151.cljs$core$IFn$_invoke$arity$1 = G__12151__1;
        G__12151.cljs$core$IFn$_invoke$arity$2 = G__12151__2;
        return G__12151;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12154 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12154, 0, null);
        var s = vec__12154;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12155 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12155, 0, null);
      var s = vec__12155;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12158 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12158, 0, null);
        var s = vec__12158;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12159 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12159, 0, null);
      var s = vec__12159;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__12160 = i + self__.step;
        var G__12161 = ret__$1;
        i = G__12160;
        ret = G__12161;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__12162 = null;
          var G__12162__0 = function() {
            return rf.call(null);
          };
          var G__12162__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12162__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__12162 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12162__0.call(this);
              case 1:
                return G__12162__1.call(this, result);
              case 2:
                return G__12162__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12162.cljs$core$IFn$_invoke$arity$0 = G__12162__0;
          G__12162.cljs$core$IFn$_invoke$arity$1 = G__12162__1;
          G__12162.cljs$core$IFn$_invoke$arity$2 = G__12162__2;
          return G__12162;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__12164 = null;
          var G__12164__0 = function() {
            return rf.call(null);
          };
          var G__12164__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12164__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__12164 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12164__0.call(this);
              case 1:
                return G__12164__1.call(this, result);
              case 2:
                return G__12164__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12164.cljs$core$IFn$_invoke$arity$0 = G__12164__0;
          G__12164.cljs$core$IFn$_invoke$arity$1 = G__12164__1;
          G__12164.cljs$core$IFn$_invoke$arity$2 = G__12164__2;
          return G__12164;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__12163_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__12163_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__12175 = null;
      var G__12175__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__12175__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__12175__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__12175__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__12175__4 = function() {
        var G__12176__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__12176 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12176__delegate.call(this, x, y, z, args);
        };
        G__12176.cljs$lang$maxFixedArity = 3;
        G__12176.cljs$lang$applyTo = function(arglist__12177) {
          var x = cljs.core.first(arglist__12177);
          arglist__12177 = cljs.core.next(arglist__12177);
          var y = cljs.core.first(arglist__12177);
          arglist__12177 = cljs.core.next(arglist__12177);
          var z = cljs.core.first(arglist__12177);
          var args = cljs.core.rest(arglist__12177);
          return G__12176__delegate(x, y, z, args);
        };
        G__12176.cljs$core$IFn$_invoke$arity$variadic = G__12176__delegate;
        return G__12176;
      }();
      G__12175 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12175__0.call(this);
          case 1:
            return G__12175__1.call(this, x);
          case 2:
            return G__12175__2.call(this, x, y);
          case 3:
            return G__12175__3.call(this, x, y, z);
          default:
            return G__12175__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12175.cljs$lang$maxFixedArity = 3;
      G__12175.cljs$lang$applyTo = G__12175__4.cljs$lang$applyTo;
      G__12175.cljs$core$IFn$_invoke$arity$0 = G__12175__0;
      G__12175.cljs$core$IFn$_invoke$arity$1 = G__12175__1;
      G__12175.cljs$core$IFn$_invoke$arity$2 = G__12175__2;
      G__12175.cljs$core$IFn$_invoke$arity$3 = G__12175__3;
      G__12175.cljs$core$IFn$_invoke$arity$variadic = G__12175__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12175;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__12178 = null;
      var G__12178__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__12178__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__12178__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__12178__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__12178__4 = function() {
        var G__12179__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__12179 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12179__delegate.call(this, x, y, z, args);
        };
        G__12179.cljs$lang$maxFixedArity = 3;
        G__12179.cljs$lang$applyTo = function(arglist__12180) {
          var x = cljs.core.first(arglist__12180);
          arglist__12180 = cljs.core.next(arglist__12180);
          var y = cljs.core.first(arglist__12180);
          arglist__12180 = cljs.core.next(arglist__12180);
          var z = cljs.core.first(arglist__12180);
          var args = cljs.core.rest(arglist__12180);
          return G__12179__delegate(x, y, z, args);
        };
        G__12179.cljs$core$IFn$_invoke$arity$variadic = G__12179__delegate;
        return G__12179;
      }();
      G__12178 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12178__0.call(this);
          case 1:
            return G__12178__1.call(this, x);
          case 2:
            return G__12178__2.call(this, x, y);
          case 3:
            return G__12178__3.call(this, x, y, z);
          default:
            return G__12178__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12178.cljs$lang$maxFixedArity = 3;
      G__12178.cljs$lang$applyTo = G__12178__4.cljs$lang$applyTo;
      G__12178.cljs$core$IFn$_invoke$arity$0 = G__12178__0;
      G__12178.cljs$core$IFn$_invoke$arity$1 = G__12178__1;
      G__12178.cljs$core$IFn$_invoke$arity$2 = G__12178__2;
      G__12178.cljs$core$IFn$_invoke$arity$3 = G__12178__3;
      G__12178.cljs$core$IFn$_invoke$arity$variadic = G__12178__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12178;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__12181 = null;
      var G__12181__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__12181__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__12181__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__12181__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__12181__4 = function() {
        var G__12182__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__12182 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12182__delegate.call(this, x, y, z, args);
        };
        G__12182.cljs$lang$maxFixedArity = 3;
        G__12182.cljs$lang$applyTo = function(arglist__12183) {
          var x = cljs.core.first(arglist__12183);
          arglist__12183 = cljs.core.next(arglist__12183);
          var y = cljs.core.first(arglist__12183);
          arglist__12183 = cljs.core.next(arglist__12183);
          var z = cljs.core.first(arglist__12183);
          var args = cljs.core.rest(arglist__12183);
          return G__12182__delegate(x, y, z, args);
        };
        G__12182.cljs$core$IFn$_invoke$arity$variadic = G__12182__delegate;
        return G__12182;
      }();
      G__12181 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12181__0.call(this);
          case 1:
            return G__12181__1.call(this, x);
          case 2:
            return G__12181__2.call(this, x, y);
          case 3:
            return G__12181__3.call(this, x, y, z);
          default:
            return G__12181__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12181.cljs$lang$maxFixedArity = 3;
      G__12181.cljs$lang$applyTo = G__12181__4.cljs$lang$applyTo;
      G__12181.cljs$core$IFn$_invoke$arity$0 = G__12181__0;
      G__12181.cljs$core$IFn$_invoke$arity$1 = G__12181__1;
      G__12181.cljs$core$IFn$_invoke$arity$2 = G__12181__2;
      G__12181.cljs$core$IFn$_invoke$arity$3 = G__12181__3;
      G__12181.cljs$core$IFn$_invoke$arity$variadic = G__12181__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12181;
    }();
  };
  var juxt__4 = function() {
    var G__12184__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__12185 = null;
          var G__12185__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12165_SHARP_, p2__12166_SHARP_) {
                return cljs.core.conj.call(null, p1__12165_SHARP_, p2__12166_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12185__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12167_SHARP_, p2__12168_SHARP_) {
                return cljs.core.conj.call(null, p1__12167_SHARP_, p2__12168_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12185__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12169_SHARP_, p2__12170_SHARP_) {
                return cljs.core.conj.call(null, p1__12169_SHARP_, p2__12170_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12185__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12171_SHARP_, p2__12172_SHARP_) {
                return cljs.core.conj.call(null, p1__12171_SHARP_, p2__12172_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12185__4 = function() {
            var G__12186__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__12173_SHARP_, p2__12174_SHARP_) {
                  return cljs.core.conj.call(null, p1__12173_SHARP_, cljs.core.apply.call(null, p2__12174_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__12186 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__12186__delegate.call(this, x, y, z, args);
            };
            G__12186.cljs$lang$maxFixedArity = 3;
            G__12186.cljs$lang$applyTo = function(arglist__12187) {
              var x = cljs.core.first(arglist__12187);
              arglist__12187 = cljs.core.next(arglist__12187);
              var y = cljs.core.first(arglist__12187);
              arglist__12187 = cljs.core.next(arglist__12187);
              var z = cljs.core.first(arglist__12187);
              var args = cljs.core.rest(arglist__12187);
              return G__12186__delegate(x, y, z, args);
            };
            G__12186.cljs$core$IFn$_invoke$arity$variadic = G__12186__delegate;
            return G__12186;
          }();
          G__12185 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__12185__0.call(this);
              case 1:
                return G__12185__1.call(this, x);
              case 2:
                return G__12185__2.call(this, x, y);
              case 3:
                return G__12185__3.call(this, x, y, z);
              default:
                return G__12185__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12185.cljs$lang$maxFixedArity = 3;
          G__12185.cljs$lang$applyTo = G__12185__4.cljs$lang$applyTo;
          G__12185.cljs$core$IFn$_invoke$arity$0 = G__12185__0;
          G__12185.cljs$core$IFn$_invoke$arity$1 = G__12185__1;
          G__12185.cljs$core$IFn$_invoke$arity$2 = G__12185__2;
          G__12185.cljs$core$IFn$_invoke$arity$3 = G__12185__3;
          G__12185.cljs$core$IFn$_invoke$arity$variadic = G__12185__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__12185;
        }();
      }(fs__$1);
    };
    var G__12184 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12184__delegate.call(this, f, g, h, fs);
    };
    G__12184.cljs$lang$maxFixedArity = 3;
    G__12184.cljs$lang$applyTo = function(arglist__12188) {
      var f = cljs.core.first(arglist__12188);
      arglist__12188 = cljs.core.next(arglist__12188);
      var g = cljs.core.first(arglist__12188);
      arglist__12188 = cljs.core.next(arglist__12188);
      var h = cljs.core.first(arglist__12188);
      var fs = cljs.core.rest(arglist__12188);
      return G__12184__delegate(f, g, h, fs);
    };
    G__12184.cljs$core$IFn$_invoke$arity$variadic = G__12184__delegate;
    return G__12184;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__12189 = cljs.core.next.call(null, coll);
        coll = G__12189;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__12190 = n - 1;
        var G__12191 = cljs.core.next.call(null, coll);
        n = G__12190;
        coll = G__12191;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__12193 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__12193, 0, null);
    var flags = cljs.core.nth.call(null, vec__12193, 1, null);
    var pattern = cljs.core.nth.call(null, vec__12193, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12195 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_12196__$1 = cljs.core.next.call(null, coll);
      var n_12197 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_12196__$1 && (n_12197 == null || !(n_12197 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_12196__$1), writer, opts);
          var G__12198 = cljs.core.next.call(null, coll_12196__$1);
          var G__12199 = n_12197 - 1;
          coll_12196__$1 = G__12198;
          n_12197 = G__12199;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_12196__$1) && n_12197 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12195;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__12204 = cljs.core.seq.call(null, ss);
    var chunk__12205 = null;
    var count__12206 = 0;
    var i__12207 = 0;
    while (true) {
      if (i__12207 < count__12206) {
        var s = cljs.core._nth.call(null, chunk__12205, i__12207);
        cljs.core._write.call(null, writer, s);
        var G__12208 = seq__12204;
        var G__12209 = chunk__12205;
        var G__12210 = count__12206;
        var G__12211 = i__12207 + 1;
        seq__12204 = G__12208;
        chunk__12205 = G__12209;
        count__12206 = G__12210;
        i__12207 = G__12211;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__12204);
        if (temp__4126__auto__) {
          var seq__12204__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12204__$1)) {
            var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12204__$1);
            var G__12212 = cljs.core.chunk_rest.call(null, seq__12204__$1);
            var G__12213 = c__4418__auto__;
            var G__12214 = cljs.core.count.call(null, c__4418__auto__);
            var G__12215 = 0;
            seq__12204 = G__12212;
            chunk__12205 = G__12213;
            count__12206 = G__12214;
            i__12207 = G__12215;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__12204__$1);
            cljs.core._write.call(null, writer, s);
            var G__12216 = cljs.core.next.call(null, seq__12204__$1);
            var G__12217 = null;
            var G__12218 = 0;
            var G__12219 = 0;
            seq__12204 = G__12216;
            chunk__12205 = G__12217;
            count__12206 = G__12218;
            i__12207 = G__12219;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__12220) {
    var writer = cljs.core.first(arglist__12220);
    var ss = cljs.core.rest(arglist__12220);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12222 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12222;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3636__auto__)) {
          var and__3636__auto____$1 = function() {
            var G__12228 = obj;
            if (G__12228) {
              var bit__4312__auto__ = G__12228.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4312__auto__ || G__12228.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__12228.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12228);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12228);
            }
          }();
          if (and__3636__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__12229 = obj;
            if (G__12229) {
              var bit__4305__auto__ = G__12229.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4305__auto__ || G__12229.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__12231 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__12231;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__12230 = obj;
                            if (G__12230) {
                              var bit__4312__auto__ = G__12230.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4312__auto__ || G__12230.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__12230.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12230);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12230);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__12236 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__12237 = null;
  var count__12238 = 0;
  var i__12239 = 0;
  while (true) {
    if (i__12239 < count__12238) {
      var obj = cljs.core._nth.call(null, chunk__12237, i__12239);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__12240 = seq__12236;
      var G__12241 = chunk__12237;
      var G__12242 = count__12238;
      var G__12243 = i__12239 + 1;
      seq__12236 = G__12240;
      chunk__12237 = G__12241;
      count__12238 = G__12242;
      i__12239 = G__12243;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12236);
      if (temp__4126__auto__) {
        var seq__12236__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12236__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12236__$1);
          var G__12244 = cljs.core.chunk_rest.call(null, seq__12236__$1);
          var G__12245 = c__4418__auto__;
          var G__12246 = cljs.core.count.call(null, c__4418__auto__);
          var G__12247 = 0;
          seq__12236 = G__12244;
          chunk__12237 = G__12245;
          count__12238 = G__12246;
          i__12239 = G__12247;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__12236__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__12248 = cljs.core.next.call(null, seq__12236__$1);
          var G__12249 = null;
          var G__12250 = 0;
          var G__12251 = 0;
          seq__12236 = G__12248;
          chunk__12237 = G__12249;
          count__12238 = G__12250;
          i__12239 = G__12251;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__12252) {
    var objs = cljs.core.seq(arglist__12252);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__12253) {
    var objs = cljs.core.seq(arglist__12253);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__12254) {
    var objs = cljs.core.seq(arglist__12254);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__12255) {
    var objs = cljs.core.seq(arglist__12255);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__12256) {
    var objs = cljs.core.seq(arglist__12256);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__12257) {
    var objs = cljs.core.seq(arglist__12257);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__12258) {
    var objs = cljs.core.seq(arglist__12258);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__12259) {
    var objs = cljs.core.seq(arglist__12259);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__12260) {
    var iref = cljs.core.first(arglist__12260);
    arglist__12260 = cljs.core.next(arglist__12260);
    var f = cljs.core.first(arglist__12260);
    var args = cljs.core.rest(arglist__12260);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__12261_SHARP_, p2__12262_SHARP_) {
    var ret = rf.call(null, p1__12261_SHARP_, p2__12262_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__12263 = null;
      var G__12263__0 = function() {
        return rf.call(null);
      };
      var G__12263__1 = function(result) {
        return rf.call(null, result);
      };
      var G__12263__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__12263 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12263__0.call(this);
          case 1:
            return G__12263__1.call(this, result);
          case 2:
            return G__12263__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12263.cljs$core$IFn$_invoke$arity$0 = G__12263__0;
      G__12263.cljs$core$IFn$_invoke$arity$1 = G__12263__1;
      G__12263.cljs$core$IFn$_invoke$arity$2 = G__12263__2;
      return G__12263;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__12264 = null;
          var G__12264__0 = function() {
            return rf.call(null);
          };
          var G__12264__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12264__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__12264 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12264__0.call(this);
              case 1:
                return G__12264__1.call(this, result);
              case 2:
                return G__12264__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12264.cljs$core$IFn$_invoke$arity$0 = G__12264__0;
          G__12264.cljs$core$IFn$_invoke$arity$1 = G__12264__1;
          G__12264.cljs$core$IFn$_invoke$arity$2 = G__12264__2;
          return G__12264;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__12266_SHARP_, p2__12265_SHARP_) {
    return proc.call(null, p2__12265_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj12268 = {};
  return obj12268;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__12270 = k;
    if (G__12270) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return G__12270.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__12270.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12270);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12270);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__12284 = x;
      if (G__12284) {
        var bit__4312__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3648__auto__ = bit__4312__auto__;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return G__12284.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__12284.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12284);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12284);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj12286 = {};
              return obj12286;
            }();
            var seq__12287_12297 = cljs.core.seq.call(null, x);
            var chunk__12288_12298 = null;
            var count__12289_12299 = 0;
            var i__12290_12300 = 0;
            while (true) {
              if (i__12290_12300 < count__12289_12299) {
                var vec__12291_12301 = cljs.core._nth.call(null, chunk__12288_12298, i__12290_12300);
                var k_12302 = cljs.core.nth.call(null, vec__12291_12301, 0, null);
                var v_12303 = cljs.core.nth.call(null, vec__12291_12301, 1, null);
                m[cljs.core.key__GT_js.call(null, k_12302)] = clj__GT_js.call(null, v_12303);
                var G__12304 = seq__12287_12297;
                var G__12305 = chunk__12288_12298;
                var G__12306 = count__12289_12299;
                var G__12307 = i__12290_12300 + 1;
                seq__12287_12297 = G__12304;
                chunk__12288_12298 = G__12305;
                count__12289_12299 = G__12306;
                i__12290_12300 = G__12307;
                continue;
              } else {
                var temp__4126__auto___12308 = cljs.core.seq.call(null, seq__12287_12297);
                if (temp__4126__auto___12308) {
                  var seq__12287_12309__$1 = temp__4126__auto___12308;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__12287_12309__$1)) {
                    var c__4418__auto___12310 = cljs.core.chunk_first.call(null, seq__12287_12309__$1);
                    var G__12311 = cljs.core.chunk_rest.call(null, seq__12287_12309__$1);
                    var G__12312 = c__4418__auto___12310;
                    var G__12313 = cljs.core.count.call(null, c__4418__auto___12310);
                    var G__12314 = 0;
                    seq__12287_12297 = G__12311;
                    chunk__12288_12298 = G__12312;
                    count__12289_12299 = G__12313;
                    i__12290_12300 = G__12314;
                    continue;
                  } else {
                    var vec__12292_12315 = cljs.core.first.call(null, seq__12287_12309__$1);
                    var k_12316 = cljs.core.nth.call(null, vec__12292_12315, 0, null);
                    var v_12317 = cljs.core.nth.call(null, vec__12292_12315, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_12316)] = clj__GT_js.call(null, v_12317);
                    var G__12318 = cljs.core.next.call(null, seq__12287_12309__$1);
                    var G__12319 = null;
                    var G__12320 = 0;
                    var G__12321 = 0;
                    seq__12287_12297 = G__12318;
                    chunk__12288_12298 = G__12319;
                    count__12289_12299 = G__12320;
                    i__12290_12300 = G__12321;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__12293_12322 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__12294_12323 = null;
              var count__12295_12324 = 0;
              var i__12296_12325 = 0;
              while (true) {
                if (i__12296_12325 < count__12295_12324) {
                  var x_12326__$1 = cljs.core._nth.call(null, chunk__12294_12323, i__12296_12325);
                  arr.push(x_12326__$1);
                  var G__12327 = seq__12293_12322;
                  var G__12328 = chunk__12294_12323;
                  var G__12329 = count__12295_12324;
                  var G__12330 = i__12296_12325 + 1;
                  seq__12293_12322 = G__12327;
                  chunk__12294_12323 = G__12328;
                  count__12295_12324 = G__12329;
                  i__12296_12325 = G__12330;
                  continue;
                } else {
                  var temp__4126__auto___12331 = cljs.core.seq.call(null, seq__12293_12322);
                  if (temp__4126__auto___12331) {
                    var seq__12293_12332__$1 = temp__4126__auto___12331;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__12293_12332__$1)) {
                      var c__4418__auto___12333 = cljs.core.chunk_first.call(null, seq__12293_12332__$1);
                      var G__12334 = cljs.core.chunk_rest.call(null, seq__12293_12332__$1);
                      var G__12335 = c__4418__auto___12333;
                      var G__12336 = cljs.core.count.call(null, c__4418__auto___12333);
                      var G__12337 = 0;
                      seq__12293_12322 = G__12334;
                      chunk__12294_12323 = G__12335;
                      count__12295_12324 = G__12336;
                      i__12296_12325 = G__12337;
                      continue;
                    } else {
                      var x_12338__$1 = cljs.core.first.call(null, seq__12293_12332__$1);
                      arr.push(x_12338__$1);
                      var G__12339 = cljs.core.next.call(null, seq__12293_12332__$1);
                      var G__12340 = null;
                      var G__12341 = 0;
                      var G__12342 = 0;
                      seq__12293_12322 = G__12339;
                      chunk__12294_12323 = G__12340;
                      count__12295_12324 = G__12341;
                      i__12296_12325 = G__12342;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj12344 = {};
  return obj12344;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__12365__delegate = function(x, opts) {
      if (function() {
        var G__12355 = x;
        if (G__12355) {
          var bit__4312__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3648__auto__ = bit__4312__auto__;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return G__12355.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__12355.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12355);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12355);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__12356 = opts;
          var map__12356__$1 = cljs.core.seq_QMARK_.call(null, map__12356) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12356) : map__12356;
          var keywordize_keys = cljs.core.get.call(null, map__12356__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__12356, map__12356__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4387__auto__ = function(map__12356, map__12356__$1, keywordize_keys, keyfn) {
                          return function iter__12361(s__12362) {
                            return new cljs.core.LazySeq(null, function(map__12356, map__12356__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__12362__$1 = s__12362;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__12362__$1);
                                  if (temp__4126__auto__) {
                                    var s__12362__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__12362__$2)) {
                                      var c__4385__auto__ = cljs.core.chunk_first.call(null, s__12362__$2);
                                      var size__4386__auto__ = cljs.core.count.call(null, c__4385__auto__);
                                      var b__12364 = cljs.core.chunk_buffer.call(null, size__4386__auto__);
                                      if (function() {
                                        var i__12363 = 0;
                                        while (true) {
                                          if (i__12363 < size__4386__auto__) {
                                            var k = cljs.core._nth.call(null, c__4385__auto__, i__12363);
                                            cljs.core.chunk_append.call(null, b__12364, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__12366 = i__12363 + 1;
                                            i__12363 = G__12366;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12364), iter__12361.call(null, cljs.core.chunk_rest.call(null, s__12362__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12364), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__12362__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__12361.call(null, cljs.core.rest.call(null, s__12362__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__12356, map__12356__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__12356, map__12356__$1, keywordize_keys, keyfn);
                        return iter__4387__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__12356, map__12356__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__12365 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12365__delegate.call(this, x, opts);
    };
    G__12365.cljs$lang$maxFixedArity = 1;
    G__12365.cljs$lang$applyTo = function(arglist__12367) {
      var x = cljs.core.first(arglist__12367);
      var opts = cljs.core.rest(arglist__12367);
      return G__12365__delegate(x, opts);
    };
    G__12365.cljs$core$IFn$_invoke$arity$variadic = G__12365__delegate;
    return G__12365;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__12368__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__12368 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12368__delegate.call(this, args);
      };
      G__12368.cljs$lang$maxFixedArity = 0;
      G__12368.cljs$lang$applyTo = function(arglist__12369) {
        var args = cljs.core.seq(arglist__12369);
        return G__12368__delegate(args);
      };
      G__12368.cljs$core$IFn$_invoke$arity$variadic = G__12368__delegate;
      return G__12368;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__12370 = ret;
        f = G__12370;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__12371__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__12371 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12371__delegate.call(this, f, args);
    };
    G__12371.cljs$lang$maxFixedArity = 1;
    G__12371.cljs$lang$applyTo = function(arglist__12372) {
      var f = cljs.core.first(arglist__12372);
      var args = cljs.core.rest(arglist__12372);
      return G__12371__delegate(f, args);
    };
    G__12371.cljs$core$IFn$_invoke$arity$variadic = G__12371__delegate;
    return G__12371;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__12373) {
    var f = cljs.core.first(arglist__12373);
    var args = cljs.core.rest(arglist__12373);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3648__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var or__3648__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3648__auto____$1) {
        return or__3648__auto____$1;
      } else {
        var and__3636__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3636__auto__) {
          var and__3636__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3636__auto____$1) {
            var and__3636__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3636__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__12374 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__12375 = i + 1;
                  ret = G__12374;
                  i = G__12375;
                  continue;
                }
                break;
              }
            } else {
              return and__3636__auto____$2;
            }
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3648__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__12376_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__12376_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__12376_SHARP_), cljs.core.second.call(null, p1__12376_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__12377_SHARP_, p2__12378_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__12377_SHARP_, p2__12378_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = xprefs;
    if (cljs.core.truth_(and__3636__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3636__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var or__3648__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__12379 = cljs.core.rest.call(null, ps);
          ps = G__12379;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3648__auto____$1)) {
      return or__3648__auto____$1;
    } else {
      var or__3648__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__12380 = cljs.core.rest.call(null, ps);
            ps = G__12380;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3648__auto____$2)) {
        return or__3648__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3648__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__12383) {
    var vec__12384 = p__12383;
    var k = cljs.core.nth.call(null, vec__12384, 0, null);
    var _ = cljs.core.nth.call(null, vec__12384, 1, null);
    var e = vec__12384;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3648__auto__ = be == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj12386 = {};
  return obj12386;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._reset[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._add_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._remove_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefer_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._get_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._get_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._methods[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._methods["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefers[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefers["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12388 = null;
  var G__12388__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__12388__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__12388__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__12388__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__12388__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__12388__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__12388__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__12388__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__12388__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12388__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12388__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12388__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12388__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12388__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12388__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12388__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12388__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12388__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12388__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12388__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12388__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__12388 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__12388__2.call(this, self__, a);
      case 3:
        return G__12388__3.call(this, self__, a, b);
      case 4:
        return G__12388__4.call(this, self__, a, b, c);
      case 5:
        return G__12388__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12388__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12388__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12388__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12388__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12388__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12388__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12388__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12388__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12388__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12388__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12388__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12388__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12388__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12388__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12388__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12388__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12388__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12388.cljs$core$IFn$_invoke$arity$2 = G__12388__2;
  G__12388.cljs$core$IFn$_invoke$arity$3 = G__12388__3;
  G__12388.cljs$core$IFn$_invoke$arity$4 = G__12388__4;
  G__12388.cljs$core$IFn$_invoke$arity$5 = G__12388__5;
  G__12388.cljs$core$IFn$_invoke$arity$6 = G__12388__6;
  G__12388.cljs$core$IFn$_invoke$arity$7 = G__12388__7;
  G__12388.cljs$core$IFn$_invoke$arity$8 = G__12388__8;
  G__12388.cljs$core$IFn$_invoke$arity$9 = G__12388__9;
  G__12388.cljs$core$IFn$_invoke$arity$10 = G__12388__10;
  G__12388.cljs$core$IFn$_invoke$arity$11 = G__12388__11;
  G__12388.cljs$core$IFn$_invoke$arity$12 = G__12388__12;
  G__12388.cljs$core$IFn$_invoke$arity$13 = G__12388__13;
  G__12388.cljs$core$IFn$_invoke$arity$14 = G__12388__14;
  G__12388.cljs$core$IFn$_invoke$arity$15 = G__12388__15;
  G__12388.cljs$core$IFn$_invoke$arity$16 = G__12388__16;
  G__12388.cljs$core$IFn$_invoke$arity$17 = G__12388__17;
  G__12388.cljs$core$IFn$_invoke$arity$18 = G__12388__18;
  G__12388.cljs$core$IFn$_invoke$arity$19 = G__12388__19;
  G__12388.cljs$core$IFn$_invoke$arity$20 = G__12388__20;
  G__12388.cljs$core$IFn$_invoke$arity$21 = G__12388__21;
  G__12388.cljs$core$IFn$_invoke$arity$22 = G__12388__22;
  return G__12388;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args12387) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12387)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj14360 = {};
  return obj14360;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj14362 = {};
  return obj14362;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj14364 = {};
  return obj14364;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3636__auto__ = chan;
    if (and__3636__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4285__auto__ = chan == null ? null : chan;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj14366 = {};
  return obj14366;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj14368 = {};
  return obj14368;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__14369 = cnt + 1;
      cnt = G__14369;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4518__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4518__auto__) {
      var v_14370 = this$.pop();
      if (keep_QMARK_.call(null, v_14370)) {
        this$.unshift(v_14370);
      } else {
      }
      var G__14371 = x + 1;
      x = G__14371;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_14372 = 0;
  while (true) {
    var m_14373 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_14373 == null) {
    } else {
      m_14373.call(null);
      if (count_14372 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__14374 = count_14372 + 1;
        count_14372 = G__14374;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3636__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3636__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t14378 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t14378 = function(val, box, meta14379) {
      this.val = val;
      this.box = box;
      this.meta14379 = meta14379;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t14378.cljs$lang$type = true;
    cljs.core.async.impl.channels.t14378.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t14378";
    cljs.core.async.impl.channels.t14378.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/t14378");
    };
    cljs.core.async.impl.channels.t14378.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t14378.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14380) {
      var self__ = this;
      var _14380__$1 = this;
      return self__.meta14379;
    };
    cljs.core.async.impl.channels.t14378.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14380, meta14379__$1) {
      var self__ = this;
      var _14380__$1 = this;
      return new cljs.core.async.impl.channels.t14378(self__.val, self__.box, meta14379__$1);
    };
    cljs.core.async.impl.channels.__GT_t14378 = function __GT_t14378(val__$1, box__$1, meta14379) {
      return new cljs.core.async.impl.channels.t14378(val__$1, box__$1, meta14379);
    };
  }
  return new cljs.core.async.impl.channels.t14378(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_14381 = self__.takes.pop();
      if (taker_14381 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_14381)) {
          var take_cb_14382 = cljs.core.async.impl.protocols.commit.call(null, taker_14381);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_14382, taker_14381, this$__$1) {
            return function() {
              return take_cb_14382.call(null, null);
            };
          }(take_cb_14382, taker_14381, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t14329 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t14329 = function(f, fn_handler, meta14330) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta14330 = meta14330;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t14329.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t14329.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t14329";
    cljs.core.async.impl.ioc_helpers.t14329.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.ioc-helpers/t14329");
    };
    cljs.core.async.impl.ioc_helpers.t14329.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t14329.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t14329.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t14329.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14331) {
      var self__ = this;
      var _14331__$1 = this;
      return self__.meta14330;
    };
    cljs.core.async.impl.ioc_helpers.t14329.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14331, meta14330__$1) {
      var self__ = this;
      var _14331__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t14329(self__.f, self__.fn_handler, meta14330__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t14329 = function __GT_t14329(f__$1, fn_handler__$1, meta14330) {
      return new cljs.core.async.impl.ioc_helpers.t14329(f__$1, fn_handler__$1, meta14330);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t14329(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e14333) {
    if (e14333 instanceof Object) {
      var ex = e14333;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e14333;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_14336_14338 = state;
    statearr_14336_14338[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_14336_14338[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14337_14339 = state;
    statearr_14337_14339[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14337_14339[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_14342_14344 = state;
    statearr_14342_14344[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_14342_14344[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14343_14345 = state;
    statearr_14343_14345[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14343_14345[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__14346) {
    var map__14351 = p__14346;
    var map__14351__$1 = cljs.core.seq_QMARK_.call(null, map__14351) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14351) : map__14351;
    var opts = map__14351__$1;
    var statearr_14352_14355 = state;
    statearr_14352_14355[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__14351, map__14351__$1, opts) {
      return function(val) {
        var statearr_14353_14356 = state;
        statearr_14353_14356[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__14351, map__14351__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_14354_14357 = state;
      statearr_14354_14357[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__14346 = null;
    if (arguments.length > 3) {
      p__14346 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__14346);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__14358) {
    var state = cljs.core.first(arglist__14358);
    arglist__14358 = cljs.core.next(arglist__14358);
    var cont_block = cljs.core.first(arglist__14358);
    arglist__14358 = cljs.core.next(arglist__14358);
    var ports = cljs.core.first(arglist__14358);
    var p__14346 = cljs.core.rest(arglist__14358);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__14346);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__14302 = level + 1;
        level = G__14302;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_14303 = 0;
    while (true) {
      if (i_14303 < arr.length) {
        arr[i_14303] = null;
        var G__14304 = i_14303 + 1;
        i_14303 = G__14304;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__14305 = x_SINGLEQUOTE_;
                x__$1 = G__14305;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__14306 = x__$1;
        var G__14307 = k;
        var G__14308 = level - 1;
        var G__14309 = update;
        x = G__14306;
        k = G__14307;
        level = G__14308;
        update = G__14309;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_14310 = self__.level + 1;
      while (true) {
        if (i_14310 <= new_level + 1) {
          update[i_14310] = self__.header;
          var G__14311 = i_14310 + 1;
          i_14310 = G__14311;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_14312 = 0;
    while (true) {
      if (i_14312 <= self__.level) {
        var links_14313 = update[i_14312].forward;
        if (links_14313[i_14312] === x__$1) {
          links_14313[i_14312] = x__$1.forward[i_14312];
          var G__14314 = i_14312 + 1;
          i_14312 = G__14314;
          continue;
        } else {
          var G__14315 = i_14312 + 1;
          i_14312 = G__14315;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__14316 = x_SINGLEQUOTE_;
              x__$1 = G__14316;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__14317 = nx;
        var G__14318 = level__$1 - 1;
        x = G__14317;
        level__$1 = G__14318;
        continue;
      } else {
        var G__14319 = x;
        var G__14320 = level__$1 - 1;
        x = G__14319;
        level__$1 = G__14320;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__14321 = x_SINGLEQUOTE_;
              x__$1 = G__14321;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__14322 = nx;
        var G__14323 = level__$1 - 1;
        x = G__14322;
        level__$1 = G__14323;
        continue;
      } else {
        var G__14324 = x;
        var G__14325 = level__$1 - 1;
        x = G__14324;
        level__$1 = G__14325;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = me;
    if (cljs.core.truth_(and__3636__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3636__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3648__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3648__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t12392 !== "undefined") {
  } else {
    cljs.core.async.t12392 = function(f, fn_handler, meta12393) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12393 = meta12393;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12392.cljs$lang$type = true;
    cljs.core.async.t12392.cljs$lang$ctorStr = "cljs.core.async/t12392";
    cljs.core.async.t12392.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12392");
    };
    cljs.core.async.t12392.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12392.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12392.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12392.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12394) {
      var self__ = this;
      var _12394__$1 = this;
      return self__.meta12393;
    };
    cljs.core.async.t12392.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12394, meta12393__$1) {
      var self__ = this;
      var _12394__$1 = this;
      return new cljs.core.async.t12392(self__.f, self__.fn_handler, meta12393__$1);
    };
    cljs.core.async.__GT_t12392 = function __GT_t12392(f__$1, fn_handler__$1, meta12393) {
      return new cljs.core.async.t12392(f__$1, fn_handler__$1, meta12393);
    };
  }
  return new cljs.core.async.t12392(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_12395 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_12395);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_12395, ret) {
          return function() {
            return fn1.call(null, val_12395);
          };
        }(val_12395, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = ret;
      if (cljs.core.truth_(and__3636__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4518__auto___12396 = n;
  var x_12397 = 0;
  while (true) {
    if (x_12397 < n__4518__auto___12396) {
      a[x_12397] = 0;
      var G__12398 = x_12397 + 1;
      x_12397 = G__12398;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12399 = i + 1;
      i = G__12399;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12403 !== "undefined") {
  } else {
    cljs.core.async.t12403 = function(flag, alt_flag, meta12404) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta12404 = meta12404;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12403.cljs$lang$type = true;
    cljs.core.async.t12403.cljs$lang$ctorStr = "cljs.core.async/t12403";
    cljs.core.async.t12403.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
        return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12403");
      };
    }(flag);
    cljs.core.async.t12403.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12403.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12403.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12403.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12405) {
        var self__ = this;
        var _12405__$1 = this;
        return self__.meta12404;
      };
    }(flag);
    cljs.core.async.t12403.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12405, meta12404__$1) {
        var self__ = this;
        var _12405__$1 = this;
        return new cljs.core.async.t12403(self__.flag, self__.alt_flag, meta12404__$1);
      };
    }(flag);
    cljs.core.async.__GT_t12403 = function(flag) {
      return function __GT_t12403(flag__$1, alt_flag__$1, meta12404) {
        return new cljs.core.async.t12403(flag__$1, alt_flag__$1, meta12404);
      };
    }(flag);
  }
  return new cljs.core.async.t12403(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12409 !== "undefined") {
  } else {
    cljs.core.async.t12409 = function(cb, flag, alt_handler, meta12410) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta12410 = meta12410;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12409.cljs$lang$type = true;
    cljs.core.async.t12409.cljs$lang$ctorStr = "cljs.core.async/t12409";
    cljs.core.async.t12409.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12409");
    };
    cljs.core.async.t12409.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12409.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12409.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12409.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12411) {
      var self__ = this;
      var _12411__$1 = this;
      return self__.meta12410;
    };
    cljs.core.async.t12409.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12411, meta12410__$1) {
      var self__ = this;
      var _12411__$1 = this;
      return new cljs.core.async.t12409(self__.cb, self__.flag, self__.alt_handler, meta12410__$1);
    };
    cljs.core.async.__GT_t12409 = function __GT_t12409(cb__$1, flag__$1, alt_handler__$1, meta12410) {
      return new cljs.core.async.t12409(cb__$1, flag__$1, alt_handler__$1, meta12410);
    };
  }
  return new cljs.core.async.t12409(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12412_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12412_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3648__auto__ = wport;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12413 = i + 1;
          i = G__12413;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3648__auto__ = ret;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3636__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3636__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__12414) {
    var map__12416 = p__12414;
    var map__12416__$1 = cljs.core.seq_QMARK_.call(null, map__12416) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12416) : map__12416;
    var opts = map__12416__$1;
    throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__12414 = null;
    if (arguments.length > 1) {
      p__12414 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__12414);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__12417) {
    var ports = cljs.core.first(arglist__12417);
    var p__12414 = cljs.core.rest(arglist__12417);
    return alts_BANG___delegate(ports, p__12414);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t12425 !== "undefined") {
  } else {
    cljs.core.async.t12425 = function(ch, f, map_LT_, meta12426) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta12426 = meta12426;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12425.cljs$lang$type = true;
    cljs.core.async.t12425.cljs$lang$ctorStr = "cljs.core.async/t12425";
    cljs.core.async.t12425.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12425");
    };
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12428 !== "undefined") {
        } else {
          cljs.core.async.t12428 = function(fn1, _, meta12426, ch, f, map_LT_, meta12429) {
            this.fn1 = fn1;
            this._ = _;
            this.meta12426 = meta12426;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta12429 = meta12429;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t12428.cljs$lang$type = true;
          cljs.core.async.t12428.cljs$lang$ctorStr = "cljs.core.async/t12428";
          cljs.core.async.t12428.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
              return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12428");
            };
          }(___$1);
          cljs.core.async.t12428.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12428.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12428.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12428.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__12418_SHARP_) {
                  return f1.call(null, p1__12418_SHARP_ == null ? null : self__.f.call(null, p1__12418_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t12428.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12430) {
              var self__ = this;
              var _12430__$1 = this;
              return self__.meta12429;
            };
          }(___$1);
          cljs.core.async.t12428.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12430, meta12429__$1) {
              var self__ = this;
              var _12430__$1 = this;
              return new cljs.core.async.t12428(self__.fn1, self__._, self__.meta12426, self__.ch, self__.f, self__.map_LT_, meta12429__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t12428 = function(___$1) {
            return function __GT_t12428(fn1__$1, ___$2, meta12426__$1, ch__$2, f__$2, map_LT___$2, meta12429) {
              return new cljs.core.async.t12428(fn1__$1, ___$2, meta12426__$1, ch__$2, f__$2, map_LT___$2, meta12429);
            };
          }(___$1);
        }
        return new cljs.core.async.t12428(fn1, ___$1, self__.meta12426, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = ret;
        if (cljs.core.truth_(and__3636__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3636__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12425.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12425.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12427) {
      var self__ = this;
      var _12427__$1 = this;
      return self__.meta12426;
    };
    cljs.core.async.t12425.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12427, meta12426__$1) {
      var self__ = this;
      var _12427__$1 = this;
      return new cljs.core.async.t12425(self__.ch, self__.f, self__.map_LT_, meta12426__$1);
    };
    cljs.core.async.__GT_t12425 = function __GT_t12425(ch__$1, f__$1, map_LT___$1, meta12426) {
      return new cljs.core.async.t12425(ch__$1, f__$1, map_LT___$1, meta12426);
    };
  }
  return new cljs.core.async.t12425(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t12434 !== "undefined") {
  } else {
    cljs.core.async.t12434 = function(ch, f, map_GT_, meta12435) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta12435 = meta12435;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12434.cljs$lang$type = true;
    cljs.core.async.t12434.cljs$lang$ctorStr = "cljs.core.async/t12434";
    cljs.core.async.t12434.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12434");
    };
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12434.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12434.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12436) {
      var self__ = this;
      var _12436__$1 = this;
      return self__.meta12435;
    };
    cljs.core.async.t12434.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12436, meta12435__$1) {
      var self__ = this;
      var _12436__$1 = this;
      return new cljs.core.async.t12434(self__.ch, self__.f, self__.map_GT_, meta12435__$1);
    };
    cljs.core.async.__GT_t12434 = function __GT_t12434(ch__$1, f__$1, map_GT___$1, meta12435) {
      return new cljs.core.async.t12434(ch__$1, f__$1, map_GT___$1, meta12435);
    };
  }
  return new cljs.core.async.t12434(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12440 !== "undefined") {
  } else {
    cljs.core.async.t12440 = function(ch, p, filter_GT_, meta12441) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta12441 = meta12441;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12440.cljs$lang$type = true;
    cljs.core.async.t12440.cljs$lang$ctorStr = "cljs.core.async/t12440";
    cljs.core.async.t12440.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12440");
    };
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12440.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12440.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12442) {
      var self__ = this;
      var _12442__$1 = this;
      return self__.meta12441;
    };
    cljs.core.async.t12440.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12442, meta12441__$1) {
      var self__ = this;
      var _12442__$1 = this;
      return new cljs.core.async.t12440(self__.ch, self__.p, self__.filter_GT_, meta12441__$1);
    };
    cljs.core.async.__GT_t12440 = function __GT_t12440(ch__$1, p__$1, filter_GT___$1, meta12441) {
      return new cljs.core.async.t12440(ch__$1, p__$1, filter_GT___$1, meta12441);
    };
  }
  return new cljs.core.async.t12440(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5710__auto___12517 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___12517, out) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___12517, out) {
            return function(state_12500) {
              var state_val_12501 = state_12500[1];
              if (state_val_12501 === 7) {
                var inst_12496 = state_12500[2];
                var state_12500__$1 = state_12500;
                var statearr_12502_12518 = state_12500__$1;
                statearr_12502_12518[2] = inst_12496;
                statearr_12502_12518[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12501 === 1) {
                  var state_12500__$1 = state_12500;
                  var statearr_12503_12519 = state_12500__$1;
                  statearr_12503_12519[2] = null;
                  statearr_12503_12519[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12501 === 4) {
                    var inst_12482 = state_12500[5];
                    var inst_12482__$1 = state_12500[2];
                    var inst_12483 = inst_12482__$1 == null;
                    var state_12500__$1 = function() {
                      var statearr_12504 = state_12500;
                      statearr_12504[5] = inst_12482__$1;
                      return statearr_12504;
                    }();
                    if (cljs.core.truth_(inst_12483)) {
                      var statearr_12505_12520 = state_12500__$1;
                      statearr_12505_12520[1] = 5;
                    } else {
                      var statearr_12506_12521 = state_12500__$1;
                      statearr_12506_12521[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12501 === 6) {
                      var inst_12482 = state_12500[5];
                      var inst_12487 = p.call(null, inst_12482);
                      var state_12500__$1 = state_12500;
                      if (cljs.core.truth_(inst_12487)) {
                        var statearr_12507_12522 = state_12500__$1;
                        statearr_12507_12522[1] = 8;
                      } else {
                        var statearr_12508_12523 = state_12500__$1;
                        statearr_12508_12523[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12501 === 3) {
                        var inst_12498 = state_12500[2];
                        var state_12500__$1 = state_12500;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12500__$1, inst_12498);
                      } else {
                        if (state_val_12501 === 2) {
                          var state_12500__$1 = state_12500;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12500__$1, 4, ch);
                        } else {
                          if (state_val_12501 === 11) {
                            var inst_12490 = state_12500[2];
                            var state_12500__$1 = state_12500;
                            var statearr_12509_12524 = state_12500__$1;
                            statearr_12509_12524[2] = inst_12490;
                            statearr_12509_12524[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12501 === 9) {
                              var state_12500__$1 = state_12500;
                              var statearr_12510_12525 = state_12500__$1;
                              statearr_12510_12525[2] = null;
                              statearr_12510_12525[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12501 === 5) {
                                var inst_12485 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12500__$1 = state_12500;
                                var statearr_12511_12526 = state_12500__$1;
                                statearr_12511_12526[2] = inst_12485;
                                statearr_12511_12526[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12501 === 10) {
                                  var inst_12493 = state_12500[2];
                                  var state_12500__$1 = function() {
                                    var statearr_12512 = state_12500;
                                    statearr_12512[6] = inst_12493;
                                    return statearr_12512;
                                  }();
                                  var statearr_12513_12527 = state_12500__$1;
                                  statearr_12513_12527[2] = null;
                                  statearr_12513_12527[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12501 === 8) {
                                    var inst_12482 = state_12500[5];
                                    var state_12500__$1 = state_12500;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12500__$1, 11, out, inst_12482);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___12517, out);
          return function(switch__5697__auto__, c__5710__auto___12517, out) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_12515 = [null, null, null, null, null, null, null];
                statearr_12515[0] = state_machine__5698__auto__;
                statearr_12515[1] = 1;
                return statearr_12515;
              };
              var state_machine__5698__auto____1 = function(state_12500) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_12500);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_12500) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_12500);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___12517, out);
        }();
        var state__5712__auto__ = function() {
          var statearr_12516 = f__5711__auto__.call(null);
          statearr_12516[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___12517;
          return statearr_12516;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___12517, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_12675) {
            var state_val_12676 = state_12675[1];
            if (state_val_12676 === 7) {
              var inst_12671 = state_12675[2];
              var state_12675__$1 = state_12675;
              var statearr_12677_12710 = state_12675__$1;
              statearr_12677_12710[2] = inst_12671;
              statearr_12677_12710[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12676 === 20) {
                var inst_12646 = state_12675[5];
                var inst_12657 = state_12675[2];
                var inst_12658 = cljs.core.next.call(null, inst_12646);
                var inst_12632 = inst_12658;
                var inst_12633 = null;
                var inst_12634 = 0;
                var inst_12635 = 0;
                var state_12675__$1 = function() {
                  var statearr_12678 = state_12675;
                  statearr_12678[6] = inst_12657;
                  statearr_12678[7] = inst_12633;
                  statearr_12678[8] = inst_12635;
                  statearr_12678[9] = inst_12634;
                  statearr_12678[10] = inst_12632;
                  return statearr_12678;
                }();
                var statearr_12679_12711 = state_12675__$1;
                statearr_12679_12711[2] = null;
                statearr_12679_12711[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12676 === 1) {
                  var state_12675__$1 = state_12675;
                  var statearr_12680_12712 = state_12675__$1;
                  statearr_12680_12712[2] = null;
                  statearr_12680_12712[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12676 === 4) {
                    var inst_12621 = state_12675[11];
                    var inst_12621__$1 = state_12675[2];
                    var inst_12622 = inst_12621__$1 == null;
                    var state_12675__$1 = function() {
                      var statearr_12684 = state_12675;
                      statearr_12684[11] = inst_12621__$1;
                      return statearr_12684;
                    }();
                    if (cljs.core.truth_(inst_12622)) {
                      var statearr_12685_12713 = state_12675__$1;
                      statearr_12685_12713[1] = 5;
                    } else {
                      var statearr_12686_12714 = state_12675__$1;
                      statearr_12686_12714[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12676 === 15) {
                      var state_12675__$1 = state_12675;
                      var statearr_12687_12715 = state_12675__$1;
                      statearr_12687_12715[2] = null;
                      statearr_12687_12715[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12676 === 13) {
                        var inst_12633 = state_12675[7];
                        var inst_12635 = state_12675[8];
                        var inst_12634 = state_12675[9];
                        var inst_12632 = state_12675[10];
                        var inst_12642 = state_12675[2];
                        var inst_12643 = inst_12635 + 1;
                        var tmp12681 = inst_12633;
                        var tmp12682 = inst_12634;
                        var tmp12683 = inst_12632;
                        var inst_12632__$1 = tmp12683;
                        var inst_12633__$1 = tmp12681;
                        var inst_12634__$1 = tmp12682;
                        var inst_12635__$1 = inst_12643;
                        var state_12675__$1 = function() {
                          var statearr_12688 = state_12675;
                          statearr_12688[12] = inst_12642;
                          statearr_12688[7] = inst_12633__$1;
                          statearr_12688[8] = inst_12635__$1;
                          statearr_12688[9] = inst_12634__$1;
                          statearr_12688[10] = inst_12632__$1;
                          return statearr_12688;
                        }();
                        var statearr_12689_12716 = state_12675__$1;
                        statearr_12689_12716[2] = null;
                        statearr_12689_12716[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12676 === 6) {
                          var inst_12621 = state_12675[11];
                          var inst_12626 = f.call(null, inst_12621);
                          var inst_12631 = cljs.core.seq.call(null, inst_12626);
                          var inst_12632 = inst_12631;
                          var inst_12633 = null;
                          var inst_12634 = 0;
                          var inst_12635 = 0;
                          var state_12675__$1 = function() {
                            var statearr_12690 = state_12675;
                            statearr_12690[7] = inst_12633;
                            statearr_12690[8] = inst_12635;
                            statearr_12690[9] = inst_12634;
                            statearr_12690[10] = inst_12632;
                            return statearr_12690;
                          }();
                          var statearr_12691_12717 = state_12675__$1;
                          statearr_12691_12717[2] = null;
                          statearr_12691_12717[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12676 === 17) {
                            var inst_12646 = state_12675[5];
                            var inst_12650 = cljs.core.chunk_first.call(null, inst_12646);
                            var inst_12651 = cljs.core.chunk_rest.call(null, inst_12646);
                            var inst_12652 = cljs.core.count.call(null, inst_12650);
                            var inst_12632 = inst_12651;
                            var inst_12633 = inst_12650;
                            var inst_12634 = inst_12652;
                            var inst_12635 = 0;
                            var state_12675__$1 = function() {
                              var statearr_12692 = state_12675;
                              statearr_12692[7] = inst_12633;
                              statearr_12692[8] = inst_12635;
                              statearr_12692[9] = inst_12634;
                              statearr_12692[10] = inst_12632;
                              return statearr_12692;
                            }();
                            var statearr_12693_12718 = state_12675__$1;
                            statearr_12693_12718[2] = null;
                            statearr_12693_12718[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12676 === 3) {
                              var inst_12673 = state_12675[2];
                              var state_12675__$1 = state_12675;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12675__$1, inst_12673);
                            } else {
                              if (state_val_12676 === 12) {
                                var inst_12666 = state_12675[2];
                                var state_12675__$1 = state_12675;
                                var statearr_12694_12719 = state_12675__$1;
                                statearr_12694_12719[2] = inst_12666;
                                statearr_12694_12719[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12676 === 2) {
                                  var state_12675__$1 = state_12675;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12675__$1, 4, in$);
                                } else {
                                  if (state_val_12676 === 19) {
                                    var inst_12661 = state_12675[2];
                                    var state_12675__$1 = state_12675;
                                    var statearr_12695_12720 = state_12675__$1;
                                    statearr_12695_12720[2] = inst_12661;
                                    statearr_12695_12720[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12676 === 11) {
                                      var inst_12646 = state_12675[5];
                                      var inst_12632 = state_12675[10];
                                      var inst_12646__$1 = cljs.core.seq.call(null, inst_12632);
                                      var state_12675__$1 = function() {
                                        var statearr_12696 = state_12675;
                                        statearr_12696[5] = inst_12646__$1;
                                        return statearr_12696;
                                      }();
                                      if (inst_12646__$1) {
                                        var statearr_12697_12721 = state_12675__$1;
                                        statearr_12697_12721[1] = 14;
                                      } else {
                                        var statearr_12698_12722 = state_12675__$1;
                                        statearr_12698_12722[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12676 === 9) {
                                        var inst_12668 = state_12675[2];
                                        var state_12675__$1 = function() {
                                          var statearr_12699 = state_12675;
                                          statearr_12699[13] = inst_12668;
                                          return statearr_12699;
                                        }();
                                        var statearr_12700_12723 = state_12675__$1;
                                        statearr_12700_12723[2] = null;
                                        statearr_12700_12723[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12676 === 5) {
                                          var inst_12624 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_12675__$1 = state_12675;
                                          var statearr_12701_12724 = state_12675__$1;
                                          statearr_12701_12724[2] = inst_12624;
                                          statearr_12701_12724[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12676 === 14) {
                                            var inst_12646 = state_12675[5];
                                            var inst_12648 = cljs.core.chunked_seq_QMARK_.call(null, inst_12646);
                                            var state_12675__$1 = state_12675;
                                            if (inst_12648) {
                                              var statearr_12702_12725 = state_12675__$1;
                                              statearr_12702_12725[1] = 17;
                                            } else {
                                              var statearr_12703_12726 = state_12675__$1;
                                              statearr_12703_12726[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12676 === 16) {
                                              var inst_12664 = state_12675[2];
                                              var state_12675__$1 = state_12675;
                                              var statearr_12704_12727 = state_12675__$1;
                                              statearr_12704_12727[2] = inst_12664;
                                              statearr_12704_12727[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12676 === 10) {
                                                var inst_12633 = state_12675[7];
                                                var inst_12635 = state_12675[8];
                                                var inst_12640 = cljs.core._nth.call(null, inst_12633, inst_12635);
                                                var state_12675__$1 = state_12675;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12675__$1, 13, out, inst_12640);
                                              } else {
                                                if (state_val_12676 === 18) {
                                                  var inst_12646 = state_12675[5];
                                                  var inst_12655 = cljs.core.first.call(null, inst_12646);
                                                  var state_12675__$1 = state_12675;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12675__$1, 20, out, inst_12655);
                                                } else {
                                                  if (state_val_12676 === 8) {
                                                    var inst_12635 = state_12675[8];
                                                    var inst_12634 = state_12675[9];
                                                    var inst_12637 = inst_12635 < inst_12634;
                                                    var inst_12638 = inst_12637;
                                                    var state_12675__$1 = state_12675;
                                                    if (cljs.core.truth_(inst_12638)) {
                                                      var statearr_12705_12728 = state_12675__$1;
                                                      statearr_12705_12728[1] = 10;
                                                    } else {
                                                      var statearr_12706_12729 = state_12675__$1;
                                                      statearr_12706_12729[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_12708 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12708[0] = state_machine__5698__auto__;
              statearr_12708[1] = 1;
              return statearr_12708;
            };
            var state_machine__5698__auto____1 = function(state_12675) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_12675);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_12675) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_12675);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_12709 = f__5711__auto__.call(null);
        statearr_12709[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_12709;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5710__auto___12802 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___12802) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___12802) {
            return function(state_12785) {
              var state_val_12786 = state_12785[1];
              if (state_val_12786 === 7) {
                var inst_12781 = state_12785[2];
                var state_12785__$1 = state_12785;
                var statearr_12787_12803 = state_12785__$1;
                statearr_12787_12803[2] = inst_12781;
                statearr_12787_12803[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12786 === 1) {
                  var state_12785__$1 = state_12785;
                  var statearr_12788_12804 = state_12785__$1;
                  statearr_12788_12804[2] = null;
                  statearr_12788_12804[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12786 === 4) {
                    var inst_12768 = state_12785[5];
                    var inst_12768__$1 = state_12785[2];
                    var inst_12769 = inst_12768__$1 == null;
                    var state_12785__$1 = function() {
                      var statearr_12789 = state_12785;
                      statearr_12789[5] = inst_12768__$1;
                      return statearr_12789;
                    }();
                    if (cljs.core.truth_(inst_12769)) {
                      var statearr_12790_12805 = state_12785__$1;
                      statearr_12790_12805[1] = 5;
                    } else {
                      var statearr_12791_12806 = state_12785__$1;
                      statearr_12791_12806[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12786 === 6) {
                      var inst_12768 = state_12785[5];
                      var state_12785__$1 = state_12785;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12785__$1, 11, to, inst_12768);
                    } else {
                      if (state_val_12786 === 3) {
                        var inst_12783 = state_12785[2];
                        var state_12785__$1 = state_12785;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12785__$1, inst_12783);
                      } else {
                        if (state_val_12786 === 2) {
                          var state_12785__$1 = state_12785;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12785__$1, 4, from);
                        } else {
                          if (state_val_12786 === 11) {
                            var inst_12778 = state_12785[2];
                            var state_12785__$1 = function() {
                              var statearr_12792 = state_12785;
                              statearr_12792[6] = inst_12778;
                              return statearr_12792;
                            }();
                            var statearr_12793_12807 = state_12785__$1;
                            statearr_12793_12807[2] = null;
                            statearr_12793_12807[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12786 === 9) {
                              var state_12785__$1 = state_12785;
                              var statearr_12794_12808 = state_12785__$1;
                              statearr_12794_12808[2] = null;
                              statearr_12794_12808[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12786 === 5) {
                                var state_12785__$1 = state_12785;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_12795_12809 = state_12785__$1;
                                  statearr_12795_12809[1] = 8;
                                } else {
                                  var statearr_12796_12810 = state_12785__$1;
                                  statearr_12796_12810[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12786 === 10) {
                                  var inst_12775 = state_12785[2];
                                  var state_12785__$1 = state_12785;
                                  var statearr_12797_12811 = state_12785__$1;
                                  statearr_12797_12811[2] = inst_12775;
                                  statearr_12797_12811[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12786 === 8) {
                                    var inst_12772 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_12785__$1 = state_12785;
                                    var statearr_12798_12812 = state_12785__$1;
                                    statearr_12798_12812[2] = inst_12772;
                                    statearr_12798_12812[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___12802);
          return function(switch__5697__auto__, c__5710__auto___12802) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_12800 = [null, null, null, null, null, null, null];
                statearr_12800[0] = state_machine__5698__auto__;
                statearr_12800[1] = 1;
                return statearr_12800;
              };
              var state_machine__5698__auto____1 = function(state_12785) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_12785);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_12785) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_12785);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___12802);
        }();
        var state__5712__auto__ = function() {
          var statearr_12801 = f__5711__auto__.call(null);
          statearr_12801[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___12802;
          return statearr_12801;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___12802));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5710__auto___12891 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___12891, tc, fc) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___12891, tc, fc) {
            return function(state_12873) {
              var state_val_12874 = state_12873[1];
              if (state_val_12874 === 7) {
                var inst_12869 = state_12873[2];
                var state_12873__$1 = state_12873;
                var statearr_12875_12892 = state_12873__$1;
                statearr_12875_12892[2] = inst_12869;
                statearr_12875_12892[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12874 === 1) {
                  var state_12873__$1 = state_12873;
                  var statearr_12876_12893 = state_12873__$1;
                  statearr_12876_12893[2] = null;
                  statearr_12876_12893[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12874 === 4) {
                    var inst_12854 = state_12873[5];
                    var inst_12854__$1 = state_12873[2];
                    var inst_12855 = inst_12854__$1 == null;
                    var state_12873__$1 = function() {
                      var statearr_12877 = state_12873;
                      statearr_12877[5] = inst_12854__$1;
                      return statearr_12877;
                    }();
                    if (cljs.core.truth_(inst_12855)) {
                      var statearr_12878_12894 = state_12873__$1;
                      statearr_12878_12894[1] = 5;
                    } else {
                      var statearr_12879_12895 = state_12873__$1;
                      statearr_12879_12895[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12874 === 6) {
                      var inst_12854 = state_12873[5];
                      var inst_12860 = p.call(null, inst_12854);
                      var state_12873__$1 = state_12873;
                      if (cljs.core.truth_(inst_12860)) {
                        var statearr_12880_12896 = state_12873__$1;
                        statearr_12880_12896[1] = 9;
                      } else {
                        var statearr_12881_12897 = state_12873__$1;
                        statearr_12881_12897[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12874 === 3) {
                        var inst_12871 = state_12873[2];
                        var state_12873__$1 = state_12873;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12873__$1, inst_12871);
                      } else {
                        if (state_val_12874 === 2) {
                          var state_12873__$1 = state_12873;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12873__$1, 4, ch);
                        } else {
                          if (state_val_12874 === 11) {
                            var inst_12854 = state_12873[5];
                            var inst_12864 = state_12873[2];
                            var state_12873__$1 = state_12873;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12873__$1, 8, inst_12864, inst_12854);
                          } else {
                            if (state_val_12874 === 9) {
                              var state_12873__$1 = state_12873;
                              var statearr_12882_12898 = state_12873__$1;
                              statearr_12882_12898[2] = tc;
                              statearr_12882_12898[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12874 === 5) {
                                var inst_12857 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_12858 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_12873__$1 = function() {
                                  var statearr_12883 = state_12873;
                                  statearr_12883[6] = inst_12857;
                                  return statearr_12883;
                                }();
                                var statearr_12884_12899 = state_12873__$1;
                                statearr_12884_12899[2] = inst_12858;
                                statearr_12884_12899[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12874 === 10) {
                                  var state_12873__$1 = state_12873;
                                  var statearr_12885_12900 = state_12873__$1;
                                  statearr_12885_12900[2] = fc;
                                  statearr_12885_12900[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12874 === 8) {
                                    var inst_12866 = state_12873[2];
                                    var state_12873__$1 = function() {
                                      var statearr_12886 = state_12873;
                                      statearr_12886[7] = inst_12866;
                                      return statearr_12886;
                                    }();
                                    var statearr_12887_12901 = state_12873__$1;
                                    statearr_12887_12901[2] = null;
                                    statearr_12887_12901[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___12891, tc, fc);
          return function(switch__5697__auto__, c__5710__auto___12891, tc, fc) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_12889 = [null, null, null, null, null, null, null, null];
                statearr_12889[0] = state_machine__5698__auto__;
                statearr_12889[1] = 1;
                return statearr_12889;
              };
              var state_machine__5698__auto____1 = function(state_12873) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_12873);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_12873) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_12873);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___12891, tc, fc);
        }();
        var state__5712__auto__ = function() {
          var statearr_12890 = f__5711__auto__.call(null);
          statearr_12890[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___12891;
          return statearr_12890;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___12891, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_12944) {
            var state_val_12945 = state_12944[1];
            if (state_val_12945 === 7) {
              var inst_12940 = state_12944[2];
              var state_12944__$1 = state_12944;
              var statearr_12946_12958 = state_12944__$1;
              statearr_12946_12958[2] = inst_12940;
              statearr_12946_12958[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12945 === 6) {
                var inst_12933 = state_12944[5];
                var inst_12930 = state_12944[6];
                var inst_12937 = f.call(null, inst_12930, inst_12933);
                var inst_12930__$1 = inst_12937;
                var state_12944__$1 = function() {
                  var statearr_12947 = state_12944;
                  statearr_12947[6] = inst_12930__$1;
                  return statearr_12947;
                }();
                var statearr_12948_12959 = state_12944__$1;
                statearr_12948_12959[2] = null;
                statearr_12948_12959[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12945 === 5) {
                  var inst_12930 = state_12944[6];
                  var state_12944__$1 = state_12944;
                  var statearr_12949_12960 = state_12944__$1;
                  statearr_12949_12960[2] = inst_12930;
                  statearr_12949_12960[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12945 === 4) {
                    var inst_12933 = state_12944[5];
                    var inst_12933__$1 = state_12944[2];
                    var inst_12934 = inst_12933__$1 == null;
                    var state_12944__$1 = function() {
                      var statearr_12950 = state_12944;
                      statearr_12950[5] = inst_12933__$1;
                      return statearr_12950;
                    }();
                    if (cljs.core.truth_(inst_12934)) {
                      var statearr_12951_12961 = state_12944__$1;
                      statearr_12951_12961[1] = 5;
                    } else {
                      var statearr_12952_12962 = state_12944__$1;
                      statearr_12952_12962[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12945 === 3) {
                      var inst_12942 = state_12944[2];
                      var state_12944__$1 = state_12944;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12944__$1, inst_12942);
                    } else {
                      if (state_val_12945 === 2) {
                        var state_12944__$1 = state_12944;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12944__$1, 4, ch);
                      } else {
                        if (state_val_12945 === 1) {
                          var inst_12930 = init;
                          var state_12944__$1 = function() {
                            var statearr_12953 = state_12944;
                            statearr_12953[6] = inst_12930;
                            return statearr_12953;
                          }();
                          var statearr_12954_12963 = state_12944__$1;
                          statearr_12954_12963[2] = null;
                          statearr_12954_12963[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_12956 = [null, null, null, null, null, null, null];
              statearr_12956[0] = state_machine__5698__auto__;
              statearr_12956[1] = 1;
              return statearr_12956;
            };
            var state_machine__5698__auto____1 = function(state_12944) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_12944);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_12944) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_12944);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_12957 = f__5711__auto__.call(null);
        statearr_12957[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_12957;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto__) {
            return function(state_13021) {
              var state_val_13022 = state_13021[1];
              if (state_val_13022 === 7) {
                var inst_13002 = state_13021[5];
                var inst_13007 = state_13021[2];
                var inst_13008 = cljs.core.next.call(null, inst_13002);
                var inst_13002__$1 = inst_13008;
                var state_13021__$1 = function() {
                  var statearr_13023 = state_13021;
                  statearr_13023[6] = inst_13007;
                  statearr_13023[5] = inst_13002__$1;
                  return statearr_13023;
                }();
                var statearr_13024_13038 = state_13021__$1;
                statearr_13024_13038[2] = null;
                statearr_13024_13038[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13022 === 1) {
                  var inst_13001 = cljs.core.seq.call(null, coll);
                  var inst_13002 = inst_13001;
                  var state_13021__$1 = function() {
                    var statearr_13025 = state_13021;
                    statearr_13025[5] = inst_13002;
                    return statearr_13025;
                  }();
                  var statearr_13026_13039 = state_13021__$1;
                  statearr_13026_13039[2] = null;
                  statearr_13026_13039[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13022 === 4) {
                    var inst_13002 = state_13021[5];
                    var inst_13005 = cljs.core.first.call(null, inst_13002);
                    var state_13021__$1 = state_13021;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13021__$1, 7, ch, inst_13005);
                  } else {
                    if (state_val_13022 === 6) {
                      var inst_13017 = state_13021[2];
                      var state_13021__$1 = state_13021;
                      var statearr_13027_13040 = state_13021__$1;
                      statearr_13027_13040[2] = inst_13017;
                      statearr_13027_13040[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13022 === 3) {
                        var inst_13019 = state_13021[2];
                        var state_13021__$1 = state_13021;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13021__$1, inst_13019);
                      } else {
                        if (state_val_13022 === 2) {
                          var inst_13002 = state_13021[5];
                          var state_13021__$1 = state_13021;
                          if (cljs.core.truth_(inst_13002)) {
                            var statearr_13028_13041 = state_13021__$1;
                            statearr_13028_13041[1] = 4;
                          } else {
                            var statearr_13029_13042 = state_13021__$1;
                            statearr_13029_13042[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13022 === 9) {
                            var state_13021__$1 = state_13021;
                            var statearr_13030_13043 = state_13021__$1;
                            statearr_13030_13043[2] = null;
                            statearr_13030_13043[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13022 === 5) {
                              var state_13021__$1 = state_13021;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_13031_13044 = state_13021__$1;
                                statearr_13031_13044[1] = 8;
                              } else {
                                var statearr_13032_13045 = state_13021__$1;
                                statearr_13032_13045[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13022 === 10) {
                                var inst_13015 = state_13021[2];
                                var state_13021__$1 = state_13021;
                                var statearr_13033_13046 = state_13021__$1;
                                statearr_13033_13046[2] = inst_13015;
                                statearr_13033_13046[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13022 === 8) {
                                  var inst_13012 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_13021__$1 = state_13021;
                                  var statearr_13034_13047 = state_13021__$1;
                                  statearr_13034_13047[2] = inst_13012;
                                  statearr_13034_13047[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto__);
          return function(switch__5697__auto__, c__5710__auto__) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_13036 = [null, null, null, null, null, null, null];
                statearr_13036[0] = state_machine__5698__auto__;
                statearr_13036[1] = 1;
                return statearr_13036;
              };
              var state_machine__5698__auto____1 = function(state_13021) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_13021);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_13021) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_13021);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto__);
        }();
        var state__5712__auto__ = function() {
          var statearr_13037 = f__5711__auto__.call(null);
          statearr_13037[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
          return statearr_13037;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto__));
    return c__5710__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13049 = {};
  return obj13049;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3636__auto__ = _;
    if (and__3636__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4285__auto__ = _ == null ? null : _;
    return function() {
      var or__3648__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13051 = {};
  return obj13051;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13264 !== "undefined") {
    } else {
      cljs.core.async.t13264 = function(cs, ch, mult, meta13265) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta13265 = meta13265;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13264.cljs$lang$type = true;
      cljs.core.async.t13264.cljs$lang$ctorStr = "cljs.core.async/t13264";
      cljs.core.async.t13264.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13264");
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13264.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13264.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13266) {
          var self__ = this;
          var _13266__$1 = this;
          return self__.meta13265;
        };
      }(cs);
      cljs.core.async.t13264.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13266, meta13265__$1) {
          var self__ = this;
          var _13266__$1 = this;
          return new cljs.core.async.t13264(self__.cs, self__.ch, self__.mult, meta13265__$1);
        };
      }(cs);
      cljs.core.async.__GT_t13264 = function(cs) {
        return function __GT_t13264(cs__$1, ch__$1, mult__$1, meta13265) {
          return new cljs.core.async.t13264(cs__$1, ch__$1, mult__$1, meta13265);
        };
      }(cs);
    }
    return new cljs.core.async.t13264(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5710__auto___13476 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___13476, cs, m, dchan, dctr, done) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___13476, cs, m, dchan, dctr, done) {
          return function(state_13394) {
            var state_val_13395 = state_13394[1];
            if (state_val_13395 === 7) {
              var inst_13390 = state_13394[2];
              var state_13394__$1 = state_13394;
              var statearr_13396_13477 = state_13394__$1;
              statearr_13396_13477[2] = inst_13390;
              statearr_13396_13477[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13395 === 20) {
                var inst_13298 = state_13394[5];
                var inst_13308 = cljs.core.first.call(null, inst_13298);
                var inst_13309 = cljs.core.nth.call(null, inst_13308, 0, null);
                var inst_13310 = cljs.core.nth.call(null, inst_13308, 1, null);
                var state_13394__$1 = function() {
                  var statearr_13397 = state_13394;
                  statearr_13397[6] = inst_13309;
                  return statearr_13397;
                }();
                if (cljs.core.truth_(inst_13310)) {
                  var statearr_13398_13478 = state_13394__$1;
                  statearr_13398_13478[1] = 22;
                } else {
                  var statearr_13399_13479 = state_13394__$1;
                  statearr_13399_13479[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13395 === 27) {
                  var inst_13340 = state_13394[7];
                  var inst_13338 = state_13394[8];
                  var inst_13345 = cljs.core._nth.call(null, inst_13338, inst_13340);
                  var state_13394__$1 = function() {
                    var statearr_13400 = state_13394;
                    statearr_13400[9] = inst_13345;
                    return statearr_13400;
                  }();
                  var statearr_13401_13480 = state_13394__$1;
                  statearr_13401_13480[2] = null;
                  statearr_13401_13480[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13395 === 1) {
                    var state_13394__$1 = state_13394;
                    var statearr_13402_13481 = state_13394__$1;
                    statearr_13402_13481[2] = null;
                    statearr_13402_13481[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13395 === 24) {
                      var inst_13298 = state_13394[5];
                      var inst_13315 = state_13394[2];
                      var inst_13316 = cljs.core.next.call(null, inst_13298);
                      var inst_13278 = inst_13316;
                      var inst_13279 = null;
                      var inst_13280 = 0;
                      var inst_13281 = 0;
                      var state_13394__$1 = function() {
                        var statearr_13403 = state_13394;
                        statearr_13403[10] = inst_13315;
                        statearr_13403[11] = inst_13281;
                        statearr_13403[12] = inst_13279;
                        statearr_13403[13] = inst_13278;
                        statearr_13403[14] = inst_13280;
                        return statearr_13403;
                      }();
                      var statearr_13404_13482 = state_13394__$1;
                      statearr_13404_13482[2] = null;
                      statearr_13404_13482[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13395 === 39) {
                        var inst_13357 = state_13394[15];
                        var inst_13374 = state_13394[2];
                        var inst_13375 = cljs.core.next.call(null, inst_13357);
                        var inst_13337 = inst_13375;
                        var inst_13338 = null;
                        var inst_13339 = 0;
                        var inst_13340 = 0;
                        var state_13394__$1 = function() {
                          var statearr_13408 = state_13394;
                          statearr_13408[7] = inst_13340;
                          statearr_13408[16] = inst_13337;
                          statearr_13408[8] = inst_13338;
                          statearr_13408[17] = inst_13374;
                          statearr_13408[18] = inst_13339;
                          return statearr_13408;
                        }();
                        var statearr_13409_13483 = state_13394__$1;
                        statearr_13409_13483[2] = null;
                        statearr_13409_13483[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13395 === 4) {
                          var inst_13269 = state_13394[19];
                          var inst_13269__$1 = state_13394[2];
                          var inst_13270 = inst_13269__$1 == null;
                          var state_13394__$1 = function() {
                            var statearr_13410 = state_13394;
                            statearr_13410[19] = inst_13269__$1;
                            return statearr_13410;
                          }();
                          if (cljs.core.truth_(inst_13270)) {
                            var statearr_13411_13484 = state_13394__$1;
                            statearr_13411_13484[1] = 5;
                          } else {
                            var statearr_13412_13485 = state_13394__$1;
                            statearr_13412_13485[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13395 === 15) {
                            var inst_13281 = state_13394[11];
                            var inst_13279 = state_13394[12];
                            var inst_13278 = state_13394[13];
                            var inst_13280 = state_13394[14];
                            var inst_13294 = state_13394[2];
                            var inst_13295 = inst_13281 + 1;
                            var tmp13405 = inst_13279;
                            var tmp13406 = inst_13278;
                            var tmp13407 = inst_13280;
                            var inst_13278__$1 = tmp13406;
                            var inst_13279__$1 = tmp13405;
                            var inst_13280__$1 = tmp13407;
                            var inst_13281__$1 = inst_13295;
                            var state_13394__$1 = function() {
                              var statearr_13413 = state_13394;
                              statearr_13413[11] = inst_13281__$1;
                              statearr_13413[12] = inst_13279__$1;
                              statearr_13413[13] = inst_13278__$1;
                              statearr_13413[14] = inst_13280__$1;
                              statearr_13413[20] = inst_13294;
                              return statearr_13413;
                            }();
                            var statearr_13414_13486 = state_13394__$1;
                            statearr_13414_13486[2] = null;
                            statearr_13414_13486[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13395 === 21) {
                              var inst_13319 = state_13394[2];
                              var state_13394__$1 = state_13394;
                              var statearr_13415_13487 = state_13394__$1;
                              statearr_13415_13487[2] = inst_13319;
                              statearr_13415_13487[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13395 === 31) {
                                var inst_13345 = state_13394[9];
                                var inst_13346 = state_13394[2];
                                var inst_13347 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_13348 = cljs.core.async.untap_STAR_.call(null, m, inst_13345);
                                var state_13394__$1 = function() {
                                  var statearr_13416 = state_13394;
                                  statearr_13416[21] = inst_13346;
                                  statearr_13416[22] = inst_13347;
                                  return statearr_13416;
                                }();
                                var statearr_13417_13488 = state_13394__$1;
                                statearr_13417_13488[2] = inst_13348;
                                statearr_13417_13488[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13395 === 32) {
                                  try {
                                    var inst_13345 = state_13394[9];
                                    var inst_13269 = state_13394[19];
                                    var inst_13351 = cljs.core.async.put_BANG_.call(null, inst_13345, inst_13269, done);
                                    var state_13394__$1 = state_13394;
                                    var statearr_13420_13489 = state_13394__$1;
                                    statearr_13420_13489[2] = inst_13351;
                                    statearr_13420_13489[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e13418) {
                                    if (e13418 instanceof Object) {
                                      var ex__5691__auto__ = e13418;
                                      var statearr_13419_13490 = state_13394;
                                      statearr_13419_13490[1] = 31;
                                      statearr_13419_13490[2] = ex__5691__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e13418;
                                    }
                                  }
                                } else {
                                  if (state_val_13395 === 40) {
                                    var inst_13366 = state_13394[23];
                                    var inst_13367 = state_13394[2];
                                    var inst_13368 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_13369 = cljs.core.async.untap_STAR_.call(null, m, inst_13366);
                                    var state_13394__$1 = function() {
                                      var statearr_13421 = state_13394;
                                      statearr_13421[24] = inst_13367;
                                      statearr_13421[25] = inst_13368;
                                      return statearr_13421;
                                    }();
                                    var statearr_13422_13491 = state_13394__$1;
                                    statearr_13422_13491[2] = inst_13369;
                                    statearr_13422_13491[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13395 === 33) {
                                      var inst_13357 = state_13394[15];
                                      var inst_13359 = cljs.core.chunked_seq_QMARK_.call(null, inst_13357);
                                      var state_13394__$1 = state_13394;
                                      if (inst_13359) {
                                        var statearr_13423_13492 = state_13394__$1;
                                        statearr_13423_13492[1] = 36;
                                      } else {
                                        var statearr_13424_13493 = state_13394__$1;
                                        statearr_13424_13493[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13395 === 13) {
                                        var inst_13288 = state_13394[26];
                                        var inst_13291 = cljs.core.async.close_BANG_.call(null, inst_13288);
                                        var state_13394__$1 = state_13394;
                                        var statearr_13425_13494 = state_13394__$1;
                                        statearr_13425_13494[2] = inst_13291;
                                        statearr_13425_13494[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13395 === 22) {
                                          var inst_13309 = state_13394[6];
                                          var inst_13312 = cljs.core.async.close_BANG_.call(null, inst_13309);
                                          var state_13394__$1 = state_13394;
                                          var statearr_13426_13495 = state_13394__$1;
                                          statearr_13426_13495[2] = inst_13312;
                                          statearr_13426_13495[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13395 === 36) {
                                            var inst_13357 = state_13394[15];
                                            var inst_13361 = cljs.core.chunk_first.call(null, inst_13357);
                                            var inst_13362 = cljs.core.chunk_rest.call(null, inst_13357);
                                            var inst_13363 = cljs.core.count.call(null, inst_13361);
                                            var inst_13337 = inst_13362;
                                            var inst_13338 = inst_13361;
                                            var inst_13339 = inst_13363;
                                            var inst_13340 = 0;
                                            var state_13394__$1 = function() {
                                              var statearr_13427 = state_13394;
                                              statearr_13427[7] = inst_13340;
                                              statearr_13427[16] = inst_13337;
                                              statearr_13427[8] = inst_13338;
                                              statearr_13427[18] = inst_13339;
                                              return statearr_13427;
                                            }();
                                            var statearr_13428_13496 = state_13394__$1;
                                            statearr_13428_13496[2] = null;
                                            statearr_13428_13496[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13395 === 41) {
                                              try {
                                                var inst_13366 = state_13394[23];
                                                var inst_13269 = state_13394[19];
                                                var inst_13372 = cljs.core.async.put_BANG_.call(null, inst_13366, inst_13269, done);
                                                var state_13394__$1 = state_13394;
                                                var statearr_13431_13497 = state_13394__$1;
                                                statearr_13431_13497[2] = inst_13372;
                                                statearr_13431_13497[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e13429) {
                                                if (e13429 instanceof Object) {
                                                  var ex__5691__auto__ = e13429;
                                                  var statearr_13430_13498 = state_13394;
                                                  statearr_13430_13498[1] = 40;
                                                  statearr_13430_13498[2] = ex__5691__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e13429;
                                                }
                                              }
                                            } else {
                                              if (state_val_13395 === 29) {
                                                var inst_13383 = state_13394[2];
                                                var state_13394__$1 = state_13394;
                                                var statearr_13432_13499 = state_13394__$1;
                                                statearr_13432_13499[2] = inst_13383;
                                                statearr_13432_13499[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13395 === 6) {
                                                  var inst_13328 = cljs.core.deref.call(null, cs);
                                                  var inst_13329 = cljs.core.keys.call(null, inst_13328);
                                                  var inst_13330 = cljs.core.count.call(null, inst_13329);
                                                  var inst_13331 = cljs.core.reset_BANG_.call(null, dctr, inst_13330);
                                                  var inst_13336 = cljs.core.seq.call(null, inst_13329);
                                                  var inst_13337 = inst_13336;
                                                  var inst_13338 = null;
                                                  var inst_13339 = 0;
                                                  var inst_13340 = 0;
                                                  var state_13394__$1 = function() {
                                                    var statearr_13433 = state_13394;
                                                    statearr_13433[7] = inst_13340;
                                                    statearr_13433[16] = inst_13337;
                                                    statearr_13433[8] = inst_13338;
                                                    statearr_13433[27] = inst_13331;
                                                    statearr_13433[18] = inst_13339;
                                                    return statearr_13433;
                                                  }();
                                                  var statearr_13434_13500 = state_13394__$1;
                                                  statearr_13434_13500[2] = null;
                                                  statearr_13434_13500[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13395 === 28) {
                                                    var inst_13337 = state_13394[16];
                                                    var inst_13357 = state_13394[15];
                                                    var inst_13357__$1 = cljs.core.seq.call(null, inst_13337);
                                                    var state_13394__$1 = function() {
                                                      var statearr_13435 = state_13394;
                                                      statearr_13435[15] = inst_13357__$1;
                                                      return statearr_13435;
                                                    }();
                                                    if (inst_13357__$1) {
                                                      var statearr_13436_13501 = state_13394__$1;
                                                      statearr_13436_13501[1] = 33;
                                                    } else {
                                                      var statearr_13437_13502 = state_13394__$1;
                                                      statearr_13437_13502[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13395 === 25) {
                                                      var inst_13340 = state_13394[7];
                                                      var inst_13339 = state_13394[18];
                                                      var inst_13342 = inst_13340 < inst_13339;
                                                      var inst_13343 = inst_13342;
                                                      var state_13394__$1 = state_13394;
                                                      if (cljs.core.truth_(inst_13343)) {
                                                        var statearr_13438_13503 = state_13394__$1;
                                                        statearr_13438_13503[1] = 27;
                                                      } else {
                                                        var statearr_13439_13504 = state_13394__$1;
                                                        statearr_13439_13504[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13395 === 34) {
                                                        var state_13394__$1 = state_13394;
                                                        var statearr_13440_13505 = state_13394__$1;
                                                        statearr_13440_13505[2] = null;
                                                        statearr_13440_13505[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13395 === 17) {
                                                          var state_13394__$1 = state_13394;
                                                          var statearr_13441_13506 = state_13394__$1;
                                                          statearr_13441_13506[2] = null;
                                                          statearr_13441_13506[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13395 === 3) {
                                                            var inst_13392 = state_13394[2];
                                                            var state_13394__$1 = state_13394;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13394__$1, inst_13392);
                                                          } else {
                                                            if (state_val_13395 === 12) {
                                                              var inst_13324 = state_13394[2];
                                                              var state_13394__$1 = state_13394;
                                                              var statearr_13442_13507 = state_13394__$1;
                                                              statearr_13442_13507[2] = inst_13324;
                                                              statearr_13442_13507[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13395 === 2) {
                                                                var state_13394__$1 = state_13394;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13394__$1, 4, ch);
                                                              } else {
                                                                if (state_val_13395 === 23) {
                                                                  var state_13394__$1 = state_13394;
                                                                  var statearr_13443_13508 = state_13394__$1;
                                                                  statearr_13443_13508[2] = null;
                                                                  statearr_13443_13508[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13395 === 35) {
                                                                    var inst_13381 = state_13394[2];
                                                                    var state_13394__$1 = state_13394;
                                                                    var statearr_13444_13509 = state_13394__$1;
                                                                    statearr_13444_13509[2] = inst_13381;
                                                                    statearr_13444_13509[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_13395 === 19) {
                                                                      var inst_13298 = state_13394[5];
                                                                      var inst_13302 = cljs.core.chunk_first.call(null, inst_13298);
                                                                      var inst_13303 = cljs.core.chunk_rest.call(null, inst_13298);
                                                                      var inst_13304 = cljs.core.count.call(null, inst_13302);
                                                                      var inst_13278 = inst_13303;
                                                                      var inst_13279 = inst_13302;
                                                                      var inst_13280 = inst_13304;
                                                                      var inst_13281 = 0;
                                                                      var state_13394__$1 = function() {
                                                                        var statearr_13445 = state_13394;
                                                                        statearr_13445[11] = inst_13281;
                                                                        statearr_13445[12] = inst_13279;
                                                                        statearr_13445[13] = inst_13278;
                                                                        statearr_13445[14] = inst_13280;
                                                                        return statearr_13445;
                                                                      }();
                                                                      var statearr_13446_13510 = state_13394__$1;
                                                                      statearr_13446_13510[2] = null;
                                                                      statearr_13446_13510[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13395 === 11) {
                                                                        var inst_13278 = state_13394[13];
                                                                        var inst_13298 = state_13394[5];
                                                                        var inst_13298__$1 = cljs.core.seq.call(null, inst_13278);
                                                                        var state_13394__$1 = function() {
                                                                          var statearr_13447 = state_13394;
                                                                          statearr_13447[5] = inst_13298__$1;
                                                                          return statearr_13447;
                                                                        }();
                                                                        if (inst_13298__$1) {
                                                                          var statearr_13448_13511 = state_13394__$1;
                                                                          statearr_13448_13511[1] = 16;
                                                                        } else {
                                                                          var statearr_13449_13512 = state_13394__$1;
                                                                          statearr_13449_13512[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13395 === 9) {
                                                                          var inst_13326 = state_13394[2];
                                                                          var state_13394__$1 = state_13394;
                                                                          var statearr_13450_13513 = state_13394__$1;
                                                                          statearr_13450_13513[2] = inst_13326;
                                                                          statearr_13450_13513[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13395 === 5) {
                                                                            var inst_13276 = cljs.core.deref.call(null, cs);
                                                                            var inst_13277 = cljs.core.seq.call(null, inst_13276);
                                                                            var inst_13278 = inst_13277;
                                                                            var inst_13279 = null;
                                                                            var inst_13280 = 0;
                                                                            var inst_13281 = 0;
                                                                            var state_13394__$1 = function() {
                                                                              var statearr_13451 = state_13394;
                                                                              statearr_13451[11] = inst_13281;
                                                                              statearr_13451[12] = inst_13279;
                                                                              statearr_13451[13] = inst_13278;
                                                                              statearr_13451[14] = inst_13280;
                                                                              return statearr_13451;
                                                                            }();
                                                                            var statearr_13452_13514 = state_13394__$1;
                                                                            statearr_13452_13514[2] = null;
                                                                            statearr_13452_13514[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13395 === 14) {
                                                                              var state_13394__$1 = state_13394;
                                                                              var statearr_13453_13515 = state_13394__$1;
                                                                              statearr_13453_13515[2] = null;
                                                                              statearr_13453_13515[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13395 === 26) {
                                                                                var inst_13385 = state_13394[2];
                                                                                var state_13394__$1 = function() {
                                                                                  var statearr_13454 = state_13394;
                                                                                  statearr_13454[28] = inst_13385;
                                                                                  return statearr_13454;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13394__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_13395 === 16) {
                                                                                  var inst_13298 = state_13394[5];
                                                                                  var inst_13300 = cljs.core.chunked_seq_QMARK_.call(null, inst_13298);
                                                                                  var state_13394__$1 = state_13394;
                                                                                  if (inst_13300) {
                                                                                    var statearr_13458_13516 = state_13394__$1;
                                                                                    statearr_13458_13516[1] = 19;
                                                                                  } else {
                                                                                    var statearr_13459_13517 = state_13394__$1;
                                                                                    statearr_13459_13517[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13395 === 38) {
                                                                                    var inst_13378 = state_13394[2];
                                                                                    var state_13394__$1 = state_13394;
                                                                                    var statearr_13460_13518 = state_13394__$1;
                                                                                    statearr_13460_13518[2] = inst_13378;
                                                                                    statearr_13460_13518[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13395 === 30) {
                                                                                      var inst_13340 = state_13394[7];
                                                                                      var inst_13337 = state_13394[16];
                                                                                      var inst_13338 = state_13394[8];
                                                                                      var inst_13339 = state_13394[18];
                                                                                      var inst_13353 = state_13394[2];
                                                                                      var inst_13354 = inst_13340 + 1;
                                                                                      var tmp13455 = inst_13337;
                                                                                      var tmp13456 = inst_13338;
                                                                                      var tmp13457 = inst_13339;
                                                                                      var inst_13337__$1 = tmp13455;
                                                                                      var inst_13338__$1 = tmp13456;
                                                                                      var inst_13339__$1 = tmp13457;
                                                                                      var inst_13340__$1 = inst_13354;
                                                                                      var state_13394__$1 = function() {
                                                                                        var statearr_13461 = state_13394;
                                                                                        statearr_13461[7] = inst_13340__$1;
                                                                                        statearr_13461[16] = inst_13337__$1;
                                                                                        statearr_13461[8] = inst_13338__$1;
                                                                                        statearr_13461[29] = inst_13353;
                                                                                        statearr_13461[18] = inst_13339__$1;
                                                                                        return statearr_13461;
                                                                                      }();
                                                                                      var statearr_13462_13519 = state_13394__$1;
                                                                                      statearr_13462_13519[2] = null;
                                                                                      statearr_13462_13519[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13395 === 10) {
                                                                                        var inst_13281 = state_13394[11];
                                                                                        var inst_13279 = state_13394[12];
                                                                                        var inst_13287 = cljs.core._nth.call(null, inst_13279, inst_13281);
                                                                                        var inst_13288 = cljs.core.nth.call(null, inst_13287, 0, null);
                                                                                        var inst_13289 = cljs.core.nth.call(null, inst_13287, 1, null);
                                                                                        var state_13394__$1 = function() {
                                                                                          var statearr_13463 = state_13394;
                                                                                          statearr_13463[26] = inst_13288;
                                                                                          return statearr_13463;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_13289)) {
                                                                                          var statearr_13464_13520 = state_13394__$1;
                                                                                          statearr_13464_13520[1] = 13;
                                                                                        } else {
                                                                                          var statearr_13465_13521 = state_13394__$1;
                                                                                          statearr_13465_13521[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13395 === 18) {
                                                                                          var inst_13322 = state_13394[2];
                                                                                          var state_13394__$1 = state_13394;
                                                                                          var statearr_13466_13522 = state_13394__$1;
                                                                                          statearr_13466_13522[2] = inst_13322;
                                                                                          statearr_13466_13522[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13395 === 42) {
                                                                                            var inst_13387 = state_13394[2];
                                                                                            var state_13394__$1 = function() {
                                                                                              var statearr_13467 = state_13394;
                                                                                              statearr_13467[30] = inst_13387;
                                                                                              return statearr_13467;
                                                                                            }();
                                                                                            var statearr_13468_13523 = state_13394__$1;
                                                                                            statearr_13468_13523[2] = null;
                                                                                            statearr_13468_13523[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13395 === 37) {
                                                                                              var inst_13357 = state_13394[15];
                                                                                              var inst_13366 = cljs.core.first.call(null, inst_13357);
                                                                                              var state_13394__$1 = function() {
                                                                                                var statearr_13469 = state_13394;
                                                                                                statearr_13469[23] = inst_13366;
                                                                                                return statearr_13469;
                                                                                              }();
                                                                                              var statearr_13470_13524 = state_13394__$1;
                                                                                              statearr_13470_13524[2] = null;
                                                                                              statearr_13470_13524[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13395 === 8) {
                                                                                                var inst_13281 = state_13394[11];
                                                                                                var inst_13280 = state_13394[14];
                                                                                                var inst_13283 = inst_13281 < inst_13280;
                                                                                                var inst_13284 = inst_13283;
                                                                                                var state_13394__$1 = state_13394;
                                                                                                if (cljs.core.truth_(inst_13284)) {
                                                                                                  var statearr_13471_13525 = state_13394__$1;
                                                                                                  statearr_13471_13525[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_13472_13526 = state_13394__$1;
                                                                                                  statearr_13472_13526[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___13476, cs, m, dchan, dctr, done);
        return function(switch__5697__auto__, c__5710__auto___13476, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_13474 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13474[0] = state_machine__5698__auto__;
              statearr_13474[1] = 1;
              return statearr_13474;
            };
            var state_machine__5698__auto____1 = function(state_13394) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_13394);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_13394) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_13394);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___13476, cs, m, dchan, dctr, done);
      }();
      var state__5712__auto__ = function() {
        var statearr_13475 = f__5711__auto__.call(null);
        statearr_13475[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___13476;
        return statearr_13475;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___13476, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj13528 = {};
  return obj13528;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t13634 !== "undefined") {
    } else {
      cljs.core.async.t13634 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta13635) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta13635 = meta13635;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13634.cljs$lang$type = true;
      cljs.core.async.t13634.cljs$lang$ctorStr = "cljs.core.async/t13634";
      cljs.core.async.t13634.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13634");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13634.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13636) {
          var self__ = this;
          var _13636__$1 = this;
          return self__.meta13635;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13634.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13636, meta13635__$1) {
          var self__ = this;
          var _13636__$1 = this;
          return new cljs.core.async.t13634(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta13635__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t13634 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t13634(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13635) {
          return new cljs.core.async.t13634(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13635);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t13634(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__5710__auto___13739 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_13701) {
            var state_val_13702 = state_13701[1];
            if (state_val_13702 === 7) {
              var inst_13650 = state_13701[5];
              var inst_13655 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13650);
              var state_13701__$1 = state_13701;
              var statearr_13703_13740 = state_13701__$1;
              statearr_13703_13740[2] = inst_13655;
              statearr_13703_13740[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13702 === 20) {
                var inst_13665 = state_13701[6];
                var state_13701__$1 = state_13701;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13701__$1, 23, out, inst_13665);
              } else {
                if (state_val_13702 === 1) {
                  var inst_13640 = state_13701[7];
                  var inst_13640__$1 = calc_state.call(null);
                  var inst_13641 = cljs.core.seq_QMARK_.call(null, inst_13640__$1);
                  var state_13701__$1 = function() {
                    var statearr_13704 = state_13701;
                    statearr_13704[7] = inst_13640__$1;
                    return statearr_13704;
                  }();
                  if (inst_13641) {
                    var statearr_13705_13741 = state_13701__$1;
                    statearr_13705_13741[1] = 2;
                  } else {
                    var statearr_13706_13742 = state_13701__$1;
                    statearr_13706_13742[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13702 === 4) {
                    var inst_13640 = state_13701[7];
                    var inst_13646 = state_13701[2];
                    var inst_13647 = cljs.core.get.call(null, inst_13646, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_13648 = cljs.core.get.call(null, inst_13646, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_13649 = cljs.core.get.call(null, inst_13646, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_13650 = inst_13640;
                    var state_13701__$1 = function() {
                      var statearr_13707 = state_13701;
                      statearr_13707[8] = inst_13647;
                      statearr_13707[9] = inst_13648;
                      statearr_13707[10] = inst_13649;
                      statearr_13707[5] = inst_13650;
                      return statearr_13707;
                    }();
                    var statearr_13708_13743 = state_13701__$1;
                    statearr_13708_13743[2] = null;
                    statearr_13708_13743[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13702 === 15) {
                      var state_13701__$1 = state_13701;
                      var statearr_13709_13744 = state_13701__$1;
                      statearr_13709_13744[2] = null;
                      statearr_13709_13744[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13702 === 21) {
                        var state_13701__$1 = state_13701;
                        var statearr_13710_13745 = state_13701__$1;
                        statearr_13710_13745[2] = null;
                        statearr_13710_13745[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13702 === 13) {
                          var inst_13697 = state_13701[2];
                          var state_13701__$1 = state_13701;
                          var statearr_13711_13746 = state_13701__$1;
                          statearr_13711_13746[2] = inst_13697;
                          statearr_13711_13746[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13702 === 22) {
                            var inst_13658 = state_13701[11];
                            var inst_13694 = state_13701[2];
                            var inst_13650 = inst_13658;
                            var state_13701__$1 = function() {
                              var statearr_13712 = state_13701;
                              statearr_13712[12] = inst_13694;
                              statearr_13712[5] = inst_13650;
                              return statearr_13712;
                            }();
                            var statearr_13713_13747 = state_13701__$1;
                            statearr_13713_13747[2] = null;
                            statearr_13713_13747[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13702 === 6) {
                              var inst_13699 = state_13701[2];
                              var state_13701__$1 = state_13701;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13701__$1, inst_13699);
                            } else {
                              if (state_val_13702 === 17) {
                                var inst_13680 = state_13701[13];
                                var state_13701__$1 = state_13701;
                                var statearr_13714_13748 = state_13701__$1;
                                statearr_13714_13748[2] = inst_13680;
                                statearr_13714_13748[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13702 === 3) {
                                  var inst_13640 = state_13701[7];
                                  var state_13701__$1 = state_13701;
                                  var statearr_13715_13749 = state_13701__$1;
                                  statearr_13715_13749[2] = inst_13640;
                                  statearr_13715_13749[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13702 === 12) {
                                    var inst_13666 = state_13701[14];
                                    var inst_13661 = state_13701[15];
                                    var inst_13680 = state_13701[13];
                                    var inst_13680__$1 = inst_13661.call(null, inst_13666);
                                    var state_13701__$1 = function() {
                                      var statearr_13716 = state_13701;
                                      statearr_13716[13] = inst_13680__$1;
                                      return statearr_13716;
                                    }();
                                    if (cljs.core.truth_(inst_13680__$1)) {
                                      var statearr_13717_13750 = state_13701__$1;
                                      statearr_13717_13750[1] = 17;
                                    } else {
                                      var statearr_13718_13751 = state_13701__$1;
                                      statearr_13718_13751[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13702 === 2) {
                                      var inst_13640 = state_13701[7];
                                      var inst_13643 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13640);
                                      var state_13701__$1 = state_13701;
                                      var statearr_13719_13752 = state_13701__$1;
                                      statearr_13719_13752[2] = inst_13643;
                                      statearr_13719_13752[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13702 === 23) {
                                        var inst_13691 = state_13701[2];
                                        var state_13701__$1 = state_13701;
                                        var statearr_13720_13753 = state_13701__$1;
                                        statearr_13720_13753[2] = inst_13691;
                                        statearr_13720_13753[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13702 === 19) {
                                          var inst_13688 = state_13701[2];
                                          var state_13701__$1 = state_13701;
                                          if (cljs.core.truth_(inst_13688)) {
                                            var statearr_13721_13754 = state_13701__$1;
                                            statearr_13721_13754[1] = 20;
                                          } else {
                                            var statearr_13722_13755 = state_13701__$1;
                                            statearr_13722_13755[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13702 === 11) {
                                            var inst_13665 = state_13701[6];
                                            var inst_13671 = inst_13665 == null;
                                            var state_13701__$1 = state_13701;
                                            if (cljs.core.truth_(inst_13671)) {
                                              var statearr_13723_13756 = state_13701__$1;
                                              statearr_13723_13756[1] = 14;
                                            } else {
                                              var statearr_13724_13757 = state_13701__$1;
                                              statearr_13724_13757[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13702 === 9) {
                                              var inst_13658 = state_13701[11];
                                              var inst_13658__$1 = state_13701[2];
                                              var inst_13659 = cljs.core.get.call(null, inst_13658__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_13660 = cljs.core.get.call(null, inst_13658__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_13661 = cljs.core.get.call(null, inst_13658__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_13701__$1 = function() {
                                                var statearr_13725 = state_13701;
                                                statearr_13725[11] = inst_13658__$1;
                                                statearr_13725[16] = inst_13660;
                                                statearr_13725[15] = inst_13661;
                                                return statearr_13725;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_13701__$1, 10, inst_13659);
                                            } else {
                                              if (state_val_13702 === 5) {
                                                var inst_13650 = state_13701[5];
                                                var inst_13653 = cljs.core.seq_QMARK_.call(null, inst_13650);
                                                var state_13701__$1 = state_13701;
                                                if (inst_13653) {
                                                  var statearr_13726_13758 = state_13701__$1;
                                                  statearr_13726_13758[1] = 7;
                                                } else {
                                                  var statearr_13727_13759 = state_13701__$1;
                                                  statearr_13727_13759[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13702 === 14) {
                                                  var inst_13666 = state_13701[14];
                                                  var inst_13673 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_13666);
                                                  var state_13701__$1 = state_13701;
                                                  var statearr_13728_13760 = state_13701__$1;
                                                  statearr_13728_13760[2] = inst_13673;
                                                  statearr_13728_13760[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13702 === 16) {
                                                    var inst_13676 = state_13701[2];
                                                    var inst_13677 = calc_state.call(null);
                                                    var inst_13650 = inst_13677;
                                                    var state_13701__$1 = function() {
                                                      var statearr_13729 = state_13701;
                                                      statearr_13729[17] = inst_13676;
                                                      statearr_13729[5] = inst_13650;
                                                      return statearr_13729;
                                                    }();
                                                    var statearr_13730_13761 = state_13701__$1;
                                                    statearr_13730_13761[2] = null;
                                                    statearr_13730_13761[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13702 === 10) {
                                                      var inst_13665 = state_13701[6];
                                                      var inst_13666 = state_13701[14];
                                                      var inst_13664 = state_13701[2];
                                                      var inst_13665__$1 = cljs.core.nth.call(null, inst_13664, 0, null);
                                                      var inst_13666__$1 = cljs.core.nth.call(null, inst_13664, 1, null);
                                                      var inst_13667 = inst_13665__$1 == null;
                                                      var inst_13668 = cljs.core._EQ_.call(null, inst_13666__$1, change);
                                                      var inst_13669 = inst_13667 || inst_13668;
                                                      var state_13701__$1 = function() {
                                                        var statearr_13731 = state_13701;
                                                        statearr_13731[6] = inst_13665__$1;
                                                        statearr_13731[14] = inst_13666__$1;
                                                        return statearr_13731;
                                                      }();
                                                      if (cljs.core.truth_(inst_13669)) {
                                                        var statearr_13732_13762 = state_13701__$1;
                                                        statearr_13732_13762[1] = 11;
                                                      } else {
                                                        var statearr_13733_13763 = state_13701__$1;
                                                        statearr_13733_13763[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13702 === 18) {
                                                        var inst_13660 = state_13701[16];
                                                        var inst_13666 = state_13701[14];
                                                        var inst_13661 = state_13701[15];
                                                        var inst_13683 = cljs.core.empty_QMARK_.call(null, inst_13661);
                                                        var inst_13684 = inst_13660.call(null, inst_13666);
                                                        var inst_13685 = cljs.core.not.call(null, inst_13684);
                                                        var inst_13686 = inst_13683 && inst_13685;
                                                        var state_13701__$1 = state_13701;
                                                        var statearr_13734_13764 = state_13701__$1;
                                                        statearr_13734_13764[2] = inst_13686;
                                                        statearr_13734_13764[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13702 === 8) {
                                                          var inst_13650 = state_13701[5];
                                                          var state_13701__$1 = state_13701;
                                                          var statearr_13735_13765 = state_13701__$1;
                                                          statearr_13735_13765[2] = inst_13650;
                                                          statearr_13735_13765[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__5697__auto__, c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_13737 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13737[0] = state_machine__5698__auto__;
              statearr_13737[1] = 1;
              return statearr_13737;
            };
            var state_machine__5698__auto____1 = function(state_13701) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_13701);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_13701) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_13701);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__5712__auto__ = function() {
        var statearr_13738 = f__5711__auto__.call(null);
        statearr_13738[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___13739;
        return statearr_13738;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___13739, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj13767 = {};
  return obj13767;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3648__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3648__auto__, mults) {
            return function(p1__13768_SHARP_) {
              if (cljs.core.truth_(p1__13768_SHARP_.call(null, topic))) {
                return p1__13768_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__13768_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3648__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t13892 !== "undefined") {
      } else {
        cljs.core.async.t13892 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta13893) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta13893 = meta13893;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t13892.cljs$lang$type = true;
        cljs.core.async.t13892.cljs$lang$ctorStr = "cljs.core.async/t13892";
        cljs.core.async.t13892.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
            return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13892");
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t13892.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t13892.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_13894) {
            var self__ = this;
            var _13894__$1 = this;
            return self__.meta13893;
          };
        }(mults, ensure_mult);
        cljs.core.async.t13892.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_13894, meta13893__$1) {
            var self__ = this;
            var _13894__$1 = this;
            return new cljs.core.async.t13892(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta13893__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t13892 = function(mults, ensure_mult) {
          return function __GT_t13892(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta13893) {
            return new cljs.core.async.t13892(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta13893);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t13892(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5710__auto___14015 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14015, mults, ensure_mult, p) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14015, mults, ensure_mult, p) {
            return function(state_13967) {
              var state_val_13968 = state_13967[1];
              if (state_val_13968 === 7) {
                var inst_13963 = state_13967[2];
                var state_13967__$1 = state_13967;
                var statearr_13969_14016 = state_13967__$1;
                statearr_13969_14016[2] = inst_13963;
                statearr_13969_14016[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13968 === 20) {
                  var state_13967__$1 = state_13967;
                  var statearr_13970_14017 = state_13967__$1;
                  statearr_13970_14017[2] = null;
                  statearr_13970_14017[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13968 === 1) {
                    var state_13967__$1 = state_13967;
                    var statearr_13971_14018 = state_13967__$1;
                    statearr_13971_14018[2] = null;
                    statearr_13971_14018[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13968 === 24) {
                      try {
                        var inst_13947 = state_13967[5];
                        var inst_13897 = state_13967[6];
                        var inst_13953 = cljs.core.async.muxch_STAR_.call(null, inst_13947);
                        var state_13967__$1 = state_13967;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13967__$1, 25, inst_13953, inst_13897);
                      } catch (e13972) {
                        if (e13972 instanceof Object) {
                          var ex__5691__auto__ = e13972;
                          var statearr_13973_14019 = state_13967;
                          statearr_13973_14019[1] = 23;
                          statearr_13973_14019[2] = ex__5691__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e13972;
                        }
                      }
                    } else {
                      if (state_val_13968 === 4) {
                        var inst_13897 = state_13967[6];
                        var inst_13897__$1 = state_13967[2];
                        var inst_13898 = inst_13897__$1 == null;
                        var state_13967__$1 = function() {
                          var statearr_13974 = state_13967;
                          statearr_13974[6] = inst_13897__$1;
                          return statearr_13974;
                        }();
                        if (cljs.core.truth_(inst_13898)) {
                          var statearr_13975_14020 = state_13967__$1;
                          statearr_13975_14020[1] = 5;
                        } else {
                          var statearr_13976_14021 = state_13967__$1;
                          statearr_13976_14021[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13968 === 15) {
                          var inst_13939 = state_13967[2];
                          var state_13967__$1 = state_13967;
                          var statearr_13977_14022 = state_13967__$1;
                          statearr_13977_14022[2] = inst_13939;
                          statearr_13977_14022[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13968 === 21) {
                            var inst_13960 = state_13967[2];
                            var state_13967__$1 = function() {
                              var statearr_13978 = state_13967;
                              statearr_13978[7] = inst_13960;
                              return statearr_13978;
                            }();
                            var statearr_13979_14023 = state_13967__$1;
                            statearr_13979_14023[2] = null;
                            statearr_13979_14023[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13968 === 13) {
                              var inst_13921 = state_13967[8];
                              var inst_13923 = cljs.core.chunked_seq_QMARK_.call(null, inst_13921);
                              var state_13967__$1 = state_13967;
                              if (inst_13923) {
                                var statearr_13980_14024 = state_13967__$1;
                                statearr_13980_14024[1] = 16;
                              } else {
                                var statearr_13981_14025 = state_13967__$1;
                                statearr_13981_14025[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13968 === 22) {
                                var inst_13957 = state_13967[2];
                                var state_13967__$1 = state_13967;
                                var statearr_13982_14026 = state_13967__$1;
                                statearr_13982_14026[2] = inst_13957;
                                statearr_13982_14026[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13968 === 6) {
                                  var inst_13947 = state_13967[5];
                                  var inst_13897 = state_13967[6];
                                  var inst_13945 = state_13967[9];
                                  var inst_13945__$1 = topic_fn.call(null, inst_13897);
                                  var inst_13946 = cljs.core.deref.call(null, mults);
                                  var inst_13947__$1 = cljs.core.get.call(null, inst_13946, inst_13945__$1);
                                  var state_13967__$1 = function() {
                                    var statearr_13983 = state_13967;
                                    statearr_13983[5] = inst_13947__$1;
                                    statearr_13983[9] = inst_13945__$1;
                                    return statearr_13983;
                                  }();
                                  if (cljs.core.truth_(inst_13947__$1)) {
                                    var statearr_13984_14027 = state_13967__$1;
                                    statearr_13984_14027[1] = 19;
                                  } else {
                                    var statearr_13985_14028 = state_13967__$1;
                                    statearr_13985_14028[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13968 === 25) {
                                    try {
                                      var inst_13955 = state_13967[2];
                                      var state_13967__$1 = state_13967;
                                      var statearr_13988_14029 = state_13967__$1;
                                      statearr_13988_14029[2] = inst_13955;
                                      statearr_13988_14029[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e13986) {
                                      if (e13986 instanceof Object) {
                                        var ex__5691__auto__ = e13986;
                                        var statearr_13987_14030 = state_13967;
                                        statearr_13987_14030[1] = 23;
                                        statearr_13987_14030[2] = ex__5691__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e13986;
                                      }
                                    }
                                  } else {
                                    if (state_val_13968 === 17) {
                                      var inst_13921 = state_13967[8];
                                      var inst_13930 = cljs.core.first.call(null, inst_13921);
                                      var inst_13931 = cljs.core.async.muxch_STAR_.call(null, inst_13930);
                                      var inst_13932 = cljs.core.async.close_BANG_.call(null, inst_13931);
                                      var inst_13933 = cljs.core.next.call(null, inst_13921);
                                      var inst_13907 = inst_13933;
                                      var inst_13908 = null;
                                      var inst_13909 = 0;
                                      var inst_13910 = 0;
                                      var state_13967__$1 = function() {
                                        var statearr_13989 = state_13967;
                                        statearr_13989[10] = inst_13932;
                                        statearr_13989[11] = inst_13910;
                                        statearr_13989[12] = inst_13908;
                                        statearr_13989[13] = inst_13907;
                                        statearr_13989[14] = inst_13909;
                                        return statearr_13989;
                                      }();
                                      var statearr_13990_14031 = state_13967__$1;
                                      statearr_13990_14031[2] = null;
                                      statearr_13990_14031[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13968 === 3) {
                                        var inst_13965 = state_13967[2];
                                        var state_13967__$1 = state_13967;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13967__$1, inst_13965);
                                      } else {
                                        if (state_val_13968 === 12) {
                                          var inst_13941 = state_13967[2];
                                          var state_13967__$1 = state_13967;
                                          var statearr_13991_14032 = state_13967__$1;
                                          statearr_13991_14032[2] = inst_13941;
                                          statearr_13991_14032[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13968 === 2) {
                                            var state_13967__$1 = state_13967;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13967__$1, 4, ch);
                                          } else {
                                            if (state_val_13968 === 23) {
                                              var inst_13945 = state_13967[9];
                                              var inst_13949 = state_13967[2];
                                              var inst_13950 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_13945);
                                              var state_13967__$1 = function() {
                                                var statearr_13992 = state_13967;
                                                statearr_13992[15] = inst_13949;
                                                return statearr_13992;
                                              }();
                                              var statearr_13993_14033 = state_13967__$1;
                                              statearr_13993_14033[2] = inst_13950;
                                              statearr_13993_14033[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13968 === 19) {
                                                var state_13967__$1 = state_13967;
                                                var statearr_13994_14034 = state_13967__$1;
                                                statearr_13994_14034[2] = null;
                                                statearr_13994_14034[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13968 === 11) {
                                                  var inst_13921 = state_13967[8];
                                                  var inst_13907 = state_13967[13];
                                                  var inst_13921__$1 = cljs.core.seq.call(null, inst_13907);
                                                  var state_13967__$1 = function() {
                                                    var statearr_13995 = state_13967;
                                                    statearr_13995[8] = inst_13921__$1;
                                                    return statearr_13995;
                                                  }();
                                                  if (inst_13921__$1) {
                                                    var statearr_13996_14035 = state_13967__$1;
                                                    statearr_13996_14035[1] = 13;
                                                  } else {
                                                    var statearr_13997_14036 = state_13967__$1;
                                                    statearr_13997_14036[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13968 === 9) {
                                                    var inst_13943 = state_13967[2];
                                                    var state_13967__$1 = state_13967;
                                                    var statearr_13998_14037 = state_13967__$1;
                                                    statearr_13998_14037[2] = inst_13943;
                                                    statearr_13998_14037[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13968 === 5) {
                                                      var inst_13904 = cljs.core.deref.call(null, mults);
                                                      var inst_13905 = cljs.core.vals.call(null, inst_13904);
                                                      var inst_13906 = cljs.core.seq.call(null, inst_13905);
                                                      var inst_13907 = inst_13906;
                                                      var inst_13908 = null;
                                                      var inst_13909 = 0;
                                                      var inst_13910 = 0;
                                                      var state_13967__$1 = function() {
                                                        var statearr_13999 = state_13967;
                                                        statearr_13999[11] = inst_13910;
                                                        statearr_13999[12] = inst_13908;
                                                        statearr_13999[13] = inst_13907;
                                                        statearr_13999[14] = inst_13909;
                                                        return statearr_13999;
                                                      }();
                                                      var statearr_14000_14038 = state_13967__$1;
                                                      statearr_14000_14038[2] = null;
                                                      statearr_14000_14038[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13968 === 14) {
                                                        var state_13967__$1 = state_13967;
                                                        var statearr_14004_14039 = state_13967__$1;
                                                        statearr_14004_14039[2] = null;
                                                        statearr_14004_14039[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13968 === 16) {
                                                          var inst_13921 = state_13967[8];
                                                          var inst_13925 = cljs.core.chunk_first.call(null, inst_13921);
                                                          var inst_13926 = cljs.core.chunk_rest.call(null, inst_13921);
                                                          var inst_13927 = cljs.core.count.call(null, inst_13925);
                                                          var inst_13907 = inst_13926;
                                                          var inst_13908 = inst_13925;
                                                          var inst_13909 = inst_13927;
                                                          var inst_13910 = 0;
                                                          var state_13967__$1 = function() {
                                                            var statearr_14005 = state_13967;
                                                            statearr_14005[11] = inst_13910;
                                                            statearr_14005[12] = inst_13908;
                                                            statearr_14005[13] = inst_13907;
                                                            statearr_14005[14] = inst_13909;
                                                            return statearr_14005;
                                                          }();
                                                          var statearr_14006_14040 = state_13967__$1;
                                                          statearr_14006_14040[2] = null;
                                                          statearr_14006_14040[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13968 === 10) {
                                                            var inst_13910 = state_13967[11];
                                                            var inst_13908 = state_13967[12];
                                                            var inst_13907 = state_13967[13];
                                                            var inst_13909 = state_13967[14];
                                                            var inst_13915 = cljs.core._nth.call(null, inst_13908, inst_13910);
                                                            var inst_13916 = cljs.core.async.muxch_STAR_.call(null, inst_13915);
                                                            var inst_13917 = cljs.core.async.close_BANG_.call(null, inst_13916);
                                                            var inst_13918 = inst_13910 + 1;
                                                            var tmp14001 = inst_13908;
                                                            var tmp14002 = inst_13907;
                                                            var tmp14003 = inst_13909;
                                                            var inst_13907__$1 = tmp14002;
                                                            var inst_13908__$1 = tmp14001;
                                                            var inst_13909__$1 = tmp14003;
                                                            var inst_13910__$1 = inst_13918;
                                                            var state_13967__$1 = function() {
                                                              var statearr_14007 = state_13967;
                                                              statearr_14007[16] = inst_13917;
                                                              statearr_14007[11] = inst_13910__$1;
                                                              statearr_14007[12] = inst_13908__$1;
                                                              statearr_14007[13] = inst_13907__$1;
                                                              statearr_14007[14] = inst_13909__$1;
                                                              return statearr_14007;
                                                            }();
                                                            var statearr_14008_14041 = state_13967__$1;
                                                            statearr_14008_14041[2] = null;
                                                            statearr_14008_14041[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13968 === 18) {
                                                              var inst_13936 = state_13967[2];
                                                              var state_13967__$1 = state_13967;
                                                              var statearr_14009_14042 = state_13967__$1;
                                                              statearr_14009_14042[2] = inst_13936;
                                                              statearr_14009_14042[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13968 === 8) {
                                                                var inst_13910 = state_13967[11];
                                                                var inst_13909 = state_13967[14];
                                                                var inst_13912 = inst_13910 < inst_13909;
                                                                var inst_13913 = inst_13912;
                                                                var state_13967__$1 = state_13967;
                                                                if (cljs.core.truth_(inst_13913)) {
                                                                  var statearr_14010_14043 = state_13967__$1;
                                                                  statearr_14010_14043[1] = 10;
                                                                } else {
                                                                  var statearr_14011_14044 = state_13967__$1;
                                                                  statearr_14011_14044[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14015, mults, ensure_mult, p);
          return function(switch__5697__auto__, c__5710__auto___14015, mults, ensure_mult, p) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14013 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14013[0] = state_machine__5698__auto__;
                statearr_14013[1] = 1;
                return statearr_14013;
              };
              var state_machine__5698__auto____1 = function(state_13967) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_13967);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_13967) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_13967);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14015, mults, ensure_mult, p);
        }();
        var state__5712__auto__ = function() {
          var statearr_14014 = f__5711__auto__.call(null);
          statearr_14014[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14015;
          return statearr_14014;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14015, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5710__auto___14175 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_14147) {
              var state_val_14148 = state_14147[1];
              if (state_val_14148 === 7) {
                var state_14147__$1 = state_14147;
                var statearr_14149_14176 = state_14147__$1;
                statearr_14149_14176[2] = null;
                statearr_14149_14176[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14148 === 1) {
                  var state_14147__$1 = state_14147;
                  var statearr_14150_14177 = state_14147__$1;
                  statearr_14150_14177[2] = null;
                  statearr_14150_14177[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14148 === 4) {
                    var inst_14112 = state_14147[5];
                    var inst_14114 = inst_14112 < cnt;
                    var state_14147__$1 = state_14147;
                    if (cljs.core.truth_(inst_14114)) {
                      var statearr_14151_14178 = state_14147__$1;
                      statearr_14151_14178[1] = 6;
                    } else {
                      var statearr_14152_14179 = state_14147__$1;
                      statearr_14152_14179[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14148 === 15) {
                      var inst_14143 = state_14147[2];
                      var state_14147__$1 = state_14147;
                      var statearr_14153_14180 = state_14147__$1;
                      statearr_14153_14180[2] = inst_14143;
                      statearr_14153_14180[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14148 === 13) {
                        var inst_14136 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14147__$1 = state_14147;
                        var statearr_14154_14181 = state_14147__$1;
                        statearr_14154_14181[2] = inst_14136;
                        statearr_14154_14181[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14148 === 6) {
                          var state_14147__$1 = state_14147;
                          var statearr_14155_14182 = state_14147__$1;
                          statearr_14155_14182[2] = null;
                          statearr_14155_14182[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14148 === 3) {
                            var inst_14145 = state_14147[2];
                            var state_14147__$1 = state_14147;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14147__$1, inst_14145);
                          } else {
                            if (state_val_14148 === 12) {
                              var inst_14133 = state_14147[6];
                              var inst_14133__$1 = state_14147[2];
                              var inst_14134 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14133__$1);
                              var state_14147__$1 = function() {
                                var statearr_14156 = state_14147;
                                statearr_14156[6] = inst_14133__$1;
                                return statearr_14156;
                              }();
                              if (cljs.core.truth_(inst_14134)) {
                                var statearr_14157_14183 = state_14147__$1;
                                statearr_14157_14183[1] = 13;
                              } else {
                                var statearr_14158_14184 = state_14147__$1;
                                statearr_14158_14184[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14148 === 2) {
                                var inst_14111 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_14112 = 0;
                                var state_14147__$1 = function() {
                                  var statearr_14159 = state_14147;
                                  statearr_14159[5] = inst_14112;
                                  statearr_14159[7] = inst_14111;
                                  return statearr_14159;
                                }();
                                var statearr_14160_14185 = state_14147__$1;
                                statearr_14160_14185[2] = null;
                                statearr_14160_14185[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14148 === 11) {
                                  try {
                                    var inst_14112 = state_14147[5];
                                    var inst_14120 = chs__$1.call(null, inst_14112);
                                    var inst_14121 = done.call(null, inst_14112);
                                    var inst_14122 = cljs.core.async.take_BANG_.call(null, inst_14120, inst_14121);
                                    var state_14147__$1 = state_14147;
                                    var statearr_14163_14186 = state_14147__$1;
                                    statearr_14163_14186[2] = inst_14122;
                                    statearr_14163_14186[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e14161) {
                                    if (e14161 instanceof Object) {
                                      var ex__5691__auto__ = e14161;
                                      var statearr_14162_14187 = state_14147;
                                      statearr_14162_14187[1] = 10;
                                      statearr_14162_14187[2] = ex__5691__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e14161;
                                    }
                                  }
                                } else {
                                  if (state_val_14148 === 9) {
                                    var inst_14112 = state_14147[5];
                                    var inst_14124 = state_14147[2];
                                    var inst_14125 = inst_14112 + 1;
                                    var inst_14112__$1 = inst_14125;
                                    var state_14147__$1 = function() {
                                      var statearr_14164 = state_14147;
                                      statearr_14164[5] = inst_14112__$1;
                                      statearr_14164[8] = inst_14124;
                                      return statearr_14164;
                                    }();
                                    var statearr_14165_14188 = state_14147__$1;
                                    statearr_14165_14188[2] = null;
                                    statearr_14165_14188[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14148 === 5) {
                                      var inst_14131 = state_14147[2];
                                      var state_14147__$1 = function() {
                                        var statearr_14166 = state_14147;
                                        statearr_14166[9] = inst_14131;
                                        return statearr_14166;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14147__$1, 12, dchan);
                                    } else {
                                      if (state_val_14148 === 14) {
                                        var inst_14133 = state_14147[6];
                                        var inst_14138 = cljs.core.apply.call(null, f, inst_14133);
                                        var state_14147__$1 = state_14147;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14147__$1, 16, out, inst_14138);
                                      } else {
                                        if (state_val_14148 === 16) {
                                          var inst_14140 = state_14147[2];
                                          var state_14147__$1 = function() {
                                            var statearr_14167 = state_14147;
                                            statearr_14167[10] = inst_14140;
                                            return statearr_14167;
                                          }();
                                          var statearr_14168_14189 = state_14147__$1;
                                          statearr_14168_14189[2] = null;
                                          statearr_14168_14189[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14148 === 10) {
                                            var inst_14116 = state_14147[2];
                                            var inst_14117 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_14147__$1 = function() {
                                              var statearr_14169 = state_14147;
                                              statearr_14169[11] = inst_14116;
                                              return statearr_14169;
                                            }();
                                            var statearr_14170_14190 = state_14147__$1;
                                            statearr_14170_14190[2] = inst_14117;
                                            statearr_14170_14190[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14148 === 8) {
                                              var inst_14129 = state_14147[2];
                                              var state_14147__$1 = state_14147;
                                              var statearr_14171_14191 = state_14147__$1;
                                              statearr_14171_14191[2] = inst_14129;
                                              statearr_14171_14191[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__5697__auto__, c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14173 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14173[0] = state_machine__5698__auto__;
                statearr_14173[1] = 1;
                return statearr_14173;
              };
              var state_machine__5698__auto____1 = function(state_14147) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14147);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14147) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14147);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__5712__auto__ = function() {
          var statearr_14174 = f__5711__auto__.call(null);
          statearr_14174[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14175;
          return statearr_14174;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14175, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5710__auto___14291 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14291, out) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14291, out) {
            return function(state_14271) {
              var state_val_14272 = state_14271[1];
              if (state_val_14272 === 7) {
                var inst_14251 = state_14271[5];
                var inst_14250 = state_14271[6];
                var inst_14250__$1 = state_14271[2];
                var inst_14251__$1 = cljs.core.nth.call(null, inst_14250__$1, 0, null);
                var inst_14252 = cljs.core.nth.call(null, inst_14250__$1, 1, null);
                var inst_14253 = inst_14251__$1 == null;
                var state_14271__$1 = function() {
                  var statearr_14273 = state_14271;
                  statearr_14273[7] = inst_14252;
                  statearr_14273[5] = inst_14251__$1;
                  statearr_14273[6] = inst_14250__$1;
                  return statearr_14273;
                }();
                if (cljs.core.truth_(inst_14253)) {
                  var statearr_14274_14292 = state_14271__$1;
                  statearr_14274_14292[1] = 8;
                } else {
                  var statearr_14275_14293 = state_14271__$1;
                  statearr_14275_14293[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14272 === 1) {
                  var inst_14242 = cljs.core.vec.call(null, chs);
                  var inst_14243 = inst_14242;
                  var state_14271__$1 = function() {
                    var statearr_14276 = state_14271;
                    statearr_14276[8] = inst_14243;
                    return statearr_14276;
                  }();
                  var statearr_14277_14294 = state_14271__$1;
                  statearr_14277_14294[2] = null;
                  statearr_14277_14294[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14272 === 4) {
                    var inst_14243 = state_14271[8];
                    var state_14271__$1 = state_14271;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_14271__$1, 7, inst_14243);
                  } else {
                    if (state_val_14272 === 6) {
                      var inst_14267 = state_14271[2];
                      var state_14271__$1 = state_14271;
                      var statearr_14278_14295 = state_14271__$1;
                      statearr_14278_14295[2] = inst_14267;
                      statearr_14278_14295[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14272 === 3) {
                        var inst_14269 = state_14271[2];
                        var state_14271__$1 = state_14271;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14271__$1, inst_14269);
                      } else {
                        if (state_val_14272 === 2) {
                          var inst_14243 = state_14271[8];
                          var inst_14245 = cljs.core.count.call(null, inst_14243);
                          var inst_14246 = inst_14245 > 0;
                          var state_14271__$1 = state_14271;
                          if (cljs.core.truth_(inst_14246)) {
                            var statearr_14280_14296 = state_14271__$1;
                            statearr_14280_14296[1] = 4;
                          } else {
                            var statearr_14281_14297 = state_14271__$1;
                            statearr_14281_14297[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14272 === 11) {
                            var inst_14243 = state_14271[8];
                            var inst_14260 = state_14271[2];
                            var tmp14279 = inst_14243;
                            var inst_14243__$1 = tmp14279;
                            var state_14271__$1 = function() {
                              var statearr_14282 = state_14271;
                              statearr_14282[9] = inst_14260;
                              statearr_14282[8] = inst_14243__$1;
                              return statearr_14282;
                            }();
                            var statearr_14283_14298 = state_14271__$1;
                            statearr_14283_14298[2] = null;
                            statearr_14283_14298[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14272 === 9) {
                              var inst_14251 = state_14271[5];
                              var state_14271__$1 = state_14271;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14271__$1, 11, out, inst_14251);
                            } else {
                              if (state_val_14272 === 5) {
                                var inst_14265 = cljs.core.async.close_BANG_.call(null, out);
                                var state_14271__$1 = state_14271;
                                var statearr_14284_14299 = state_14271__$1;
                                statearr_14284_14299[2] = inst_14265;
                                statearr_14284_14299[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14272 === 10) {
                                  var inst_14263 = state_14271[2];
                                  var state_14271__$1 = state_14271;
                                  var statearr_14285_14300 = state_14271__$1;
                                  statearr_14285_14300[2] = inst_14263;
                                  statearr_14285_14300[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14272 === 8) {
                                    var inst_14252 = state_14271[7];
                                    var inst_14251 = state_14271[5];
                                    var inst_14250 = state_14271[6];
                                    var inst_14243 = state_14271[8];
                                    var inst_14255 = function() {
                                      var c = inst_14252;
                                      var v = inst_14251;
                                      var vec__14248 = inst_14250;
                                      var cs = inst_14243;
                                      return function(c, v, vec__14248, cs, inst_14252, inst_14251, inst_14250, inst_14243, state_val_14272, c__5710__auto___14291, out) {
                                        return function(p1__14192_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__14192_SHARP_);
                                        };
                                      }(c, v, vec__14248, cs, inst_14252, inst_14251, inst_14250, inst_14243, state_val_14272, c__5710__auto___14291, out);
                                    }();
                                    var inst_14256 = cljs.core.filterv.call(null, inst_14255, inst_14243);
                                    var inst_14243__$1 = inst_14256;
                                    var state_14271__$1 = function() {
                                      var statearr_14286 = state_14271;
                                      statearr_14286[8] = inst_14243__$1;
                                      return statearr_14286;
                                    }();
                                    var statearr_14287_14301 = state_14271__$1;
                                    statearr_14287_14301[2] = null;
                                    statearr_14287_14301[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14291, out);
          return function(switch__5697__auto__, c__5710__auto___14291, out) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14289 = [null, null, null, null, null, null, null, null, null, null];
                statearr_14289[0] = state_machine__5698__auto__;
                statearr_14289[1] = 1;
                return statearr_14289;
              };
              var state_machine__5698__auto____1 = function(state_14271) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14271);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14271) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14271);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14291, out);
        }();
        var state__5712__auto__ = function() {
          var statearr_14290 = f__5711__auto__.call(null);
          statearr_14290[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14291;
          return statearr_14290;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14291, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("logger");
goog.require("cljs.core");
cljs.core.enable_console_print_BANG_.call(null);
logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
logger.og = function og(type, format, data) {
  if (cljs.core.truth_(function() {
    var or__3663__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([type], true), logger.tagsOn);
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), logger.tagsOn);
    }
  }())) {
    return console.log(type + " " + format, data);
  } else {
    return null;
  }
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.get = function get() {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10281) {
            var state_val_10282 = state_10281[1];
            if (state_val_10282 === 3) {
              var inst_10278 = state_10281[2];
              var inst_10279 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_10281__$1 = function() {
                var statearr_10283 = state_10281;
                statearr_10283[5] = inst_10278;
                statearr_10283[6] = inst_10279;
                return statearr_10283;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10281__$1, pubsub.a);
            } else {
              if (state_val_10282 === 2) {
                var inst_10274 = state_10281[2];
                var inst_10275 = pubsub.a = inst_10274;
                var inst_10276 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_10281__$1 = function() {
                  var statearr_10284 = state_10281;
                  statearr_10284[7] = inst_10276;
                  statearr_10284[8] = inst_10275;
                  return statearr_10284;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10281__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_10282 === 1) {
                  var state_10281__$1 = state_10281;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10281__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10286 = [null, null, null, null, null, null, null, null, null];
              statearr_10286[0] = state_machine__5728__auto__;
              statearr_10286[1] = 1;
              return statearr_10286;
            };
            var state_machine__5728__auto____1 = function(state_10281) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10281);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10281) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10281);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10287 = f__5741__auto__.call(null);
        statearr_10287[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10287;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
pubsub.init = function init(what) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10302) {
            var state_val_10303 = state_10302[1];
            if (state_val_10303 === 2) {
              var inst_10300 = state_10302[2];
              var state_10302__$1 = state_10302;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10302__$1, inst_10300);
            } else {
              if (state_val_10303 === 1) {
                var inst_10298 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_10302__$1 = function() {
                  var statearr_10304 = state_10302;
                  statearr_10304[5] = inst_10298;
                  return statearr_10304;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10302__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10306 = [null, null, null, null, null, null];
              statearr_10306[0] = state_machine__5728__auto__;
              statearr_10306[1] = 1;
              return statearr_10306;
            };
            var state_machine__5728__auto____1 = function(state_10302) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10302);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10302) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10302);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10307 = f__5741__auto__.call(null);
        statearr_10307[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10307;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
pubsub.set = function set(what) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10324) {
            var state_val_10325 = state_10324[1];
            if (state_val_10325 === 3) {
              var inst_10322 = state_10324[2];
              var state_10324__$1 = state_10324;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10324__$1, inst_10322);
            } else {
              if (state_val_10325 === 2) {
                var inst_10320 = state_10324[2];
                var state_10324__$1 = function() {
                  var statearr_10326 = state_10324;
                  statearr_10326[5] = inst_10320;
                  return statearr_10326;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10324__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_10325 === 1) {
                  var state_10324__$1 = state_10324;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10324__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10328 = [null, null, null, null, null, null];
              statearr_10328[0] = state_machine__5728__auto__;
              statearr_10328[1] = 1;
              return statearr_10328;
            };
            var state_machine__5728__auto____1 = function(state_10324) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10324);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10324) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10324);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10329 = f__5741__auto__.call(null);
        statearr_10329[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10329;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
pubsub.subs = function() {
  var obj10331 = {};
  return obj10331;
}();
pubsub.sub = function sub(typ, fun) {
  return pubsub.subs[typ] = fun;
};
pubsub.pub = function pub(typ, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", typ + " " + msg);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10349) {
            var state_val_10350 = state_10349[1];
            if (state_val_10350 === 2) {
              var inst_10347 = state_10349[2];
              var state_10349__$1 = state_10349;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10349__$1, inst_10347);
            } else {
              if (state_val_10350 === 1) {
                var inst_10345 = {"typ":typ, "msg":msg};
                var state_10349__$1 = state_10349;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10349__$1, 2, pubsub.proxychan, inst_10345);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10352 = [null, null, null, null, null];
              statearr_10352[0] = state_machine__5728__auto__;
              statearr_10352[1] = 1;
              return statearr_10352;
            };
            var state_machine__5728__auto____1 = function(state_10349) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10349);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10349) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10349);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10353 = f__5741__auto__.call(null);
        statearr_10353[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10353;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
pubsub.initpubsub = function initpubsub() {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10388) {
            var state_val_10389 = state_10388[1];
            if (state_val_10389 === 4) {
              var inst_10377 = state_10388[2];
              var inst_10378 = pubsub.m = inst_10377;
              var inst_10379 = logger.og.call(null, new cljs.core.Keyword(null, "sub", "sub", -2093760025), "about to deliver subbed %s", pubsub.m);
              var inst_10380 = pubsub.m["typ"];
              var inst_10381 = pubsub.subs[inst_10380];
              var inst_10382 = pubsub.m["msg"];
              var inst_10383 = inst_10381.call(null, inst_10382);
              var state_10388__$1 = function() {
                var statearr_10390 = state_10388;
                statearr_10390[5] = inst_10378;
                statearr_10390[6] = inst_10383;
                statearr_10390[7] = inst_10379;
                return statearr_10390;
              }();
              var statearr_10391_10396 = state_10388__$1;
              statearr_10391_10396[2] = null;
              statearr_10391_10396[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10389 === 3) {
                var inst_10386 = state_10388[2];
                var state_10388__$1 = state_10388;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10388__$1, inst_10386);
              } else {
                if (state_val_10389 === 2) {
                  var state_10388__$1 = state_10388;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10388__$1, 4, pubsub.proxychan);
                } else {
                  if (state_val_10389 === 1) {
                    var state_10388__$1 = state_10388;
                    var statearr_10392_10397 = state_10388__$1;
                    statearr_10392_10397[2] = null;
                    statearr_10392_10397[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10394 = [null, null, null, null, null, null, null, null];
              statearr_10394[0] = state_machine__5728__auto__;
              statearr_10394[1] = 1;
              return statearr_10394;
            };
            var state_machine__5728__auto____1 = function(state_10388) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10388);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10388) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10388);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10395 = f__5741__auto__.call(null);
        statearr_10395[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10395;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__11820 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__11820;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__11824 = cljs.core._EQ_;
    var expr__11825 = limit;
    if (cljs.core.truth_(pred__11824.call(null, 1, expr__11825))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__11824.call(null, 2, expr__11825))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__11827 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__11828 = limit__$1 - 1;
            var G__11829 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__11827;
            limit__$1 = G__11828;
            parts = G__11829;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__11830 = index - 1;
        index = G__11830;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___11831 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___11831)) {
        var replacement_11832 = temp__4124__auto___11831;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_11832));
      } else {
        buffer.append(ch);
      }
      var G__11833 = index + 1;
      index = G__11833;
      continue;
    }
    break;
  }
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__11666 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__11666, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1050769601), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__11666;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4244__auto__, k__4245__auto__) {
  var self__ = this;
  var this__4244__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4244__auto____$1, k__4245__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4246__auto__, k11668, else__4247__auto__) {
  var self__ = this;
  var this__4246__auto____$1 = this;
  var G__11670 = k11668 instanceof cljs.core.Keyword ? k11668.fqn : null;
  switch(G__11670) {
    case "test-name":
      return self__.test_name;
      break;
    case "test-env":
      return self__.test_env;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k11668, else__4247__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4258__auto__, writer__4259__auto__, opts__4260__auto__) {
  var self__ = this;
  var this__4258__auto____$1 = this;
  var pr_pair__4261__auto__ = function(this__4258__auto____$1) {
    return function(keyval__4262__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, cljs.core.pr_writer, "", " ", "", opts__4260__auto__, keyval__4262__auto__);
    };
  }(this__4258__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, pr_pair__4261__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__4260__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4242__auto__) {
  var self__ = this;
  var this__4242__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4238__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4239__auto__) {
  var self__ = this;
  var this__4239__auto____$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_imap.call(null, this__4239__auto____$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4240__auto__, other__4241__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = other__4241__auto__;
    if (cljs.core.truth_(and__3636__auto__)) {
      return this__4240__auto____$1.constructor === other__4241__auto__.constructor && cljs.core.equiv_map.call(null, this__4240__auto____$1, other__4241__auto__);
    } else {
      return and__3636__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4253__auto__, k__4254__auto__) {
  var self__ = this;
  var this__4253__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), null], null), null), k__4254__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4253__auto____$1), self__.__meta), k__4254__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4254__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4251__auto__, k__4252__auto__, G__11667) {
  var self__ = this;
  var this__4251__auto____$1 = this;
  var pred__11671 = cljs.core.keyword_identical_QMARK_;
  var expr__11672 = k__4252__auto__;
  if (cljs.core.truth_(pred__11671.call(null, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), expr__11672))) {
    return new cemerick.cljs.test.TestContext(G__11667, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__11671.call(null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), expr__11672))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__11667, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4252__auto__, G__11667), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4256__auto__) {
  var self__ = this;
  var this__4256__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4243__auto__, G__11667) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__11667, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4249__auto__, entry__4250__auto__) {
  var self__ = this;
  var this__4249__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4250__auto__)) {
    return cljs.core._assoc.call(null, this__4249__auto____$1, cljs.core._nth.call(null, entry__4250__auto__, 0), cljs.core._nth.call(null, entry__4250__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4249__auto____$1, entry__4250__auto__);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__4278__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__4278__auto__, writer__4279__auto__) {
  return cljs.core._write.call(null, writer__4279__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__11669) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(G__11669), (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(G__11669), null, cljs.core.dissoc.call(null, G__11669, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), new cljs.core.Keyword(null, "test-name", "test-name", -675595913)));
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__11676 = x;
    if (G__11676) {
      var bit__4312__auto__ = G__11676.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4312__auto__ || G__11676.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__11676.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11676);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11676);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__11678 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__11678__$1 = cljs.core.seq_QMARK_.call(null, map__11678) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11678) : map__11678;
  var remaining = cljs.core.get.call(null, map__11678__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312));
  var running = cljs.core.get.call(null, map__11678__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558));
  var async = cljs.core.get.call(null, map__11678__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var and__3636__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__3636__auto__) {
    var and__3636__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__3636__auto____$1) {
      var or__3648__auto__ = async == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__11681 = cljs.core.map.call(null, function(p1__11679_SHARP_) {
        return cljs.core.select_keys.call(null, p1__11679_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 577538877), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "error", "error", -978969032)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__11681, 0, null);
      var newv = cljs.core.nth.call(null, vec__11681, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__11682) {
  var map__11684 = p__11682;
  var map__11684__$1 = cljs.core.seq_QMARK_.call(null, map__11684) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11684) : map__11684;
  var m = map__11684__$1;
  var test_name = cljs.core.get.call(null, map__11684__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
  var test_env = cljs.core.get.call(null, map__11684__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var line = cljs.core.get.call(null, map__11684__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__11684__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, function() {
    var or__3648__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())) + " (" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(file) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(line) + ")";
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__4528__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4529__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4530__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4531__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4532__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("report", new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4532__auto__, method_table__4528__auto__, prefer_table__4529__auto__, method_cache__4530__auto__, cached_hierarchy__4531__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), error.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__11689 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
      switch(G__11689) {
        case "error":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)), m);
          break;
        case "fail":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
          break;
        default:
          return m;
      }
    }());
  };
  var do_report__2 = function(p__11685, m) {
    var map__11688 = p__11685;
    var map__11688__$1 = cljs.core.seq_QMARK_.call(null, map__11688) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11688) : map__11688;
    var test_ctx = map__11688__$1;
    var test_name = cljs.core.get.call(null, map__11688__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__11688__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__11685, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__11685);
      case 2:
        return do_report__2.call(this, p__11685, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__11691) {
  var map__11692 = p__11691;
  var map__11692__$1 = cljs.core.seq_QMARK_.call(null, map__11692) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11692) : map__11692;
  var m = map__11692__$1;
  var test_env = cljs.core.get.call(null, map__11692__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_11693 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11693;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__11694) {
  var map__11695 = p__11694;
  var map__11695__$1 = cljs.core.seq_QMARK_.call(null, map__11695) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11695) : map__11695;
  var m = map__11695__$1;
  var test_env = cljs.core.get.call(null, map__11695__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_11696 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11696;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1706214930), function(p__11697) {
  var map__11698 = p__11697;
  var map__11698__$1 = cljs.core.seq_QMARK_.call(null, map__11698) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11698) : map__11698;
  var m = map__11698__$1;
  var test_env = cljs.core.get.call(null, map__11698__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_11699 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___11700 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___11700)) {
      var message_11701 = temp__4126__auto___11700;
      cljs.core.println.call(null, message_11701);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11699;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", -978969032), function(p__11702) {
  var map__11703 = p__11702;
  var map__11703__$1 = cljs.core.seq_QMARK_.call(null, map__11703) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11703) : map__11703;
  var m = map__11703__$1;
  var test_env = cljs.core.get.call(null, map__11703__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_11704 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", -978969032));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___11705 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___11705)) {
      var message_11706 = temp__4126__auto___11705;
      cljs.core.println.call(null, message_11706);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11704;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), function(p__11707) {
  var map__11708 = p__11707;
  var map__11708__$1 = cljs.core.seq_QMARK_.call(null, map__11708) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11708) : map__11708;
  var m = map__11708__$1;
  var test_env = cljs.core.get.call(null, map__11708__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_11709 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var message = temp__4126__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11709;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 380847952), function(p__11710) {
  var map__11711 = p__11710;
  var map__11711__$1 = cljs.core.seq_QMARK_.call(null, map__11711) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11711) : map__11711;
  var test_env = map__11711__$1;
  var async = cljs.core.get.call(null, map__11711__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__11711__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__11711__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var pass = cljs.core.get.call(null, map__11711__$1, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  var test__$1 = cljs.core.get.call(null, map__11711__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var _STAR_print_fn_STAR_11712 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    var pending_count = function() {
      var and__3636__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__3636__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).call(null, cljs.core.deref.call(null, async))));
      } else {
        return and__3636__auto__;
      }
    }();
    cljs.core.println.call(null, "\nRan", test__$1, cljs.core.truth_(pending_count) ? "synchronous" : "", "tests containing", pass + fail + error, "assertions.");
    cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    if (cljs.core.truth_(pending_count)) {
      return cljs.core.println.call(null, "Waiting on", pending_count, "asynchronous test" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pending_count > 1 ? "s" : null) + " to complete.");
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11712;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), function(p__11713) {
  var map__11714 = p__11713;
  var map__11714__$1 = cljs.core.seq_QMARK_.call(null, map__11714) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11714) : map__11714;
  var m = map__11714__$1;
  var async = cljs.core.get.call(null, map__11714__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var test_env = cljs.core.get.call(null, map__11714__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var ns = cljs.core.get.call(null, map__11714__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var _STAR_print_fn_STAR_11715 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11715;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), function(p__11716) {
  var map__11717 = p__11716;
  var map__11717__$1 = cljs.core.seq_QMARK_.call(null, map__11717) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11717) : map__11717;
  var m = map__11717__$1;
  var test_env = cljs.core.get.call(null, map__11717__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), function(p__11718) {
  var map__11719 = p__11718;
  var map__11719__$1 = cljs.core.seq_QMARK_.call(null, map__11719) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11719) : map__11719;
  var m = map__11719__$1;
  var test_env = cljs.core.get.call(null, map__11719__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), function(p__11720) {
  var map__11721 = p__11720;
  var map__11721__$1 = cljs.core.seq_QMARK_.call(null, map__11721) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11721) : map__11721;
  var m = map__11721__$1;
  var test_env = cljs.core.get.call(null, map__11721__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__11722) {
    var ns_sym = cljs.core.first(arglist__11722);
    arglist__11722 = cljs.core.next(arglist__11722);
    var fixture_type = cljs.core.first(arglist__11722);
    var fixture_fns = cljs.core.rest(arglist__11722);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(next_test) {
    return function(env) {
      var temp__4124__auto__ = function() {
        var and__3636__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(env));
        if (and__3636__auto__) {
          return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(env));
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__11724 = temp__4124__auto__;
        var name = cljs.core.nth.call(null, vec__11724, 0, null);
        var testfn = cljs.core.nth.call(null, vec__11724, 1, null);
        cljs.core.reset_BANG_.call(null, next_test, testfn);
        var ns_11725 = cljs.core.namespace.call(null, name);
        if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_11725)) {
        } else {
          cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_11725, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "async", "async", 1050769601), true], null));
          cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_11725);
        }
        return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.assoc, 
        name, new Date);
      } else {
        return env;
      }
    };
  }(next_test));
  setTimeout(function(next_test) {
    return function() {
      return cljs.core.deref.call(null, next_test).call(null);
    };
  }(next_test), 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__11730 = test_env;
  cljs.core.swap_BANG_.call(null, G__11730, function(G__11730) {
    return function(p1__11726_SHARP_) {
      return cljs.core.reduce.call(null, function(G__11730) {
        return function(env, p__11731) {
          var vec__11732 = p__11731;
          var k = cljs.core.nth.call(null, vec__11732, 0, null);
          var v = cljs.core.nth.call(null, vec__11732, 1, null);
          if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", -1669146357)))) {
            return env;
          } else {
            return cljs.core.assoc.call(null, env, k, v);
          }
        };
      }(G__11730), cljs.core.PersistentArrayMap.EMPTY, p1__11726_SHARP_);
    };
  }(G__11730));
  return G__11730;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1050769601));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__11734) {
    var map__11738 = p__11734;
    var map__11738__$1 = cljs.core.seq_QMARK_.call(null, map__11738) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11738) : map__11738;
    var test_ctx = map__11738__$1;
    var test_name = cljs.core.get.call(null, map__11738__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var async_test_env = cljs.core.get.call(null, map__11738__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(first_call_QMARK_, map__11738, map__11738__$1, test_ctx, test_name, async_test_env) {
      return function(env) {
        cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).cljs$core$IFn$_invoke$arity$1(env), test_name));
        return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.dissoc, test_name);
      };
    }(first_call_QMARK_, map__11738, map__11738__$1, test_ctx, test_name, async_test_env));
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), new cljs.core.Keyword(null, "message", "message", -406056002), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__11733, error) {
    var map__11737 = p__11733;
    var map__11737__$1 = cljs.core.seq_QMARK_.call(null, map__11737) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11737) : map__11737;
    var test_ctx = map__11737__$1;
    var test_name = cljs.core.get.call(null, map__11737__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__11737__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__11733, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__11733);
      case 2:
        return done_STAR___2.call(this, p__11733, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", -2140911342), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___11502__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_11742 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error("Assert failed: test-var must be passed the function to be tested (not a symbol naming it)\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))));
      }
      var map__11743_11745 = cljs.core.meta.call(null, v);
      var map__11743_11746__$1 = cljs.core.seq_QMARK_.call(null, map__11743_11745) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11743_11745) : map__11743_11745;
      var t_11747 = cljs.core.get.call(null, map__11743_11746__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
      var test_name_11748 = cljs.core.get.call(null, map__11743_11746__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var async_QMARK__11749 = cljs.core.get.call(null, map__11743_11746__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
      if (cljs.core.truth_(t_11747)) {
        if (cljs.core.truth_(async_QMARK__11749)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_11748, t_11747);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.conj, function() {
              var or__3648__auto__ = test_name_11748;
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_11748], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
            try {
              t_11747.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_11748));
            } catch (e11744) {
              if (e11744 instanceof Error) {
                var e_11750 = e11744;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_11748, new cljs.core.Keyword(null, 
                "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e_11750], null));
              } else {
                throw e11744;
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_11748], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11502__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_11742;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11502__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_11759 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var tests_11764 = cljs.core.filter.call(null, function(_STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__) {
        return function(p1__11751_SHARP_) {
          return(new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__11751_SHARP_));
        };
      }(_STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__), cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_11765 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_11766 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 940016129)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_11765.call(null, function(once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__) {
        return function() {
          var seq__11760 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_11764));
          var chunk__11761 = null;
          var count__11762 = 0;
          var i__11763 = 0;
          while (true) {
            if (i__11763 < count__11762) {
              var v = cljs.core._nth.call(null, chunk__11761, i__11763);
              each_fixture_fn_11766.call(null, function(seq__11760, chunk__11761, count__11762, i__11763, v, once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__) {
                return function() {
                  return cemerick.cljs.test.test_function.call(null, test_env, v);
                };
              }(seq__11760, chunk__11761, count__11762, i__11763, v, once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__));
              var G__11767 = seq__11760;
              var G__11768 = chunk__11761;
              var G__11769 = count__11762;
              var G__11770 = i__11763 + 1;
              seq__11760 = G__11767;
              chunk__11761 = G__11768;
              count__11762 = G__11769;
              i__11763 = G__11770;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__11760);
              if (temp__4126__auto__) {
                var seq__11760__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__11760__$1)) {
                  var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__11760__$1);
                  var G__11771 = cljs.core.chunk_rest.call(null, seq__11760__$1);
                  var G__11772 = c__4418__auto__;
                  var G__11773 = cljs.core.count.call(null, c__4418__auto__);
                  var G__11774 = 0;
                  seq__11760 = G__11771;
                  chunk__11761 = G__11772;
                  count__11762 = G__11773;
                  i__11763 = G__11774;
                  continue;
                } else {
                  var v = cljs.core.first.call(null, seq__11760__$1);
                  each_fixture_fn_11766.call(null, function(seq__11760, chunk__11761, count__11762, i__11763, v, seq__11760__$1, temp__4126__auto__, once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__) {
                    return function() {
                      return cemerick.cljs.test.test_function.call(null, test_env, v);
                    };
                  }(seq__11760, chunk__11761, count__11762, i__11763, v, seq__11760__$1, temp__4126__auto__, once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__));
                  var G__11775 = cljs.core.next.call(null, seq__11760__$1);
                  var G__11776 = null;
                  var G__11777 = 0;
                  var G__11778 = 0;
                  seq__11760 = G__11775;
                  chunk__11761 = G__11776;
                  count__11762 = G__11777;
                  i__11763 = G__11778;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(once_fixture_fn_11765, each_fixture_fn_11766, tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__));
      cljs.core.reduce.call(null, function(tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__) {
        return function(p1__11752_SHARP_, p2__11753_SHARP_) {
          return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__11752_SHARP_, p2__11753_SHARP_);
        };
      }(tests_11764, _STAR_entry_point_STAR_11759, entry_point_QMARK___11502__auto__), (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "test", "test", 577538877)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_11764)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11502__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_11759;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11502__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_11780 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      var temp__4124__auto___11781 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4124__auto___11781)) {
        var test_hook_11782 = temp__4124__auto___11781;
        test_hook_11782.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11502__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_11780;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.print_summary = function print_summary(env) {
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952)));
};
cemerick.cljs.test.async_test_summary = function async_test_summary(test_env) {
  var async_test_env = cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env));
  var tests = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(async_test_env);
  if (tests > 0) {
    return cemerick.cljs.test.print_summary.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env, async_test_env));
  } else {
    return null;
  }
};
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  cemerick.cljs.test.print_summary.call(null, test_env__$1);
  return cemerick.cljs.test.on_testing_complete.call(null, test_env__$1, cemerick.cljs.test.async_test_summary);
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__11789 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__11789, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__11789, 1);
    var entry_point_QMARK___11502__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_11790 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var seq__11791_11795 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__11792_11796 = null;
      var count__11793_11797 = 0;
      var i__11794_11798 = 0;
      while (true) {
        if (i__11794_11798 < count__11793_11797) {
          var ns_11799 = cljs.core._nth.call(null, chunk__11792_11796, i__11794_11798);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_11799);
          var G__11800 = seq__11791_11795;
          var G__11801 = chunk__11792_11796;
          var G__11802 = count__11793_11797;
          var G__11803 = i__11794_11798 + 1;
          seq__11791_11795 = G__11800;
          chunk__11792_11796 = G__11801;
          count__11793_11797 = G__11802;
          i__11794_11798 = G__11803;
          continue;
        } else {
          var temp__4126__auto___11804 = cljs.core.seq.call(null, seq__11791_11795);
          if (temp__4126__auto___11804) {
            var seq__11791_11805__$1 = temp__4126__auto___11804;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11791_11805__$1)) {
              var c__4418__auto___11806 = cljs.core.chunk_first.call(null, seq__11791_11805__$1);
              var G__11807 = cljs.core.chunk_rest.call(null, seq__11791_11805__$1);
              var G__11808 = c__4418__auto___11806;
              var G__11809 = cljs.core.count.call(null, c__4418__auto___11806);
              var G__11810 = 0;
              seq__11791_11795 = G__11807;
              chunk__11792_11796 = G__11808;
              count__11793_11797 = G__11809;
              i__11794_11798 = G__11810;
              continue;
            } else {
              var ns_11811 = cljs.core.first.call(null, seq__11791_11805__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_11811);
              var G__11812 = cljs.core.next.call(null, seq__11791_11805__$1);
              var G__11813 = null;
              var G__11814 = 0;
              var G__11815 = 0;
              seq__11791_11795 = G__11812;
              chunk__11792_11796 = G__11813;
              count__11793_11797 = G__11814;
              i__11794_11798 = G__11815;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11502__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_11790;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__11816) {
    var namespaces = cljs.core.seq(arglist__11816);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__11817_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__11817_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__11819 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__11819__$1 = cljs.core.seq_QMARK_.call(null, map__11819) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11819) : map__11819;
  var async = cljs.core.get.call(null, map__11819__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__11819__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__11819__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var and__3636__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__3636__auto__)) {
    var and__3636__auto____$1 = function() {
      var or__3648__auto__ = fail;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = function() {
        var or__3648__auto__ = error;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__3636__auto____$2) {
        var or__3648__auto__ = async == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("testt");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cemerick.cljs.test");
goog.require("cemerick.cljs.test");
testt.somewhat_less_wat = function somewhat_less_wat() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.somewhat_less_wat);
};
testt.somewhat_less_wat = cljs.core.with_meta.call(null, testt.somewhat_less_wat, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 11, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 11, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 11, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 11, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function somewhat_less_wat_test(test_ctx__13344__auto__) {
  var _test_ctx = test_ctx__13344__auto__;
  var async_QMARK___13259__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_13510 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___13259__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_13512 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__13279__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.PersistentArrayMap.EMPTY + cljs.core.PersistentVector.EMPTY), "{}[]");
            var result__13280__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__13279__auto__);
            if (result__13280__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__13280__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__13279__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__13279__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__13280__auto__;
          } catch (e13514) {
            if (e13514 instanceof Error) {
              var t__13316__auto__ = e13514;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), t__13316__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e13514;
            }
          }
        } catch (e13513) {
          if (e13513 instanceof Error) {
            var e__13260__auto__ = e13513;
            if (cljs.core.truth_(async_QMARK___13259__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__13260__auto__);
            } else {
              throw e__13260__auto__;
            }
          } else {
            throw e13513;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13512;
      }
    } catch (e13511) {
      if (e13511 instanceof Error) {
        var e__13260__auto__ = e13511;
        if (cljs.core.truth_(async_QMARK___13259__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__13260__auto__);
        } else {
          throw e__13260__auto__;
        }
      } else {
        throw e13511;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13510;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), testt.somewhat_less_wat);
testt.javascript_allows_div0 = function javascript_allows_div0() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.javascript_allows_div0);
};
testt.javascript_allows_div0 = cljs.core.with_meta.call(null, testt.javascript_allows_div0, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 15, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 15, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 15, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 15, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function javascript_allows_div0_test(test_ctx__13344__auto__) {
  var _test_ctx = test_ctx__13344__auto__;
  var async_QMARK___13259__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_13520 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___13259__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_13522 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__13279__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (1 | 0) / (0 | 0)), 1 / 0), Infinity);
            var result__13280__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__13279__auto__);
            if (result__13280__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__13280__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__13279__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__13279__auto__)), 
              new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__13280__auto__;
          } catch (e13524) {
            if (e13524 instanceof Error) {
              var t__13316__auto__ = e13524;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", 
              -1371932971, null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__13316__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e13524;
            }
          }
        } catch (e13523) {
          if (e13523 instanceof Error) {
            var e__13260__auto__ = e13523;
            if (cljs.core.truth_(async_QMARK___13259__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__13260__auto__);
            } else {
              throw e__13260__auto__;
            }
          } else {
            throw e13523;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13522;
      }
    } catch (e13521) {
      if (e13521 instanceof Error) {
        var e__13260__auto__ = e13521;
        if (cljs.core.truth_(async_QMARK___13259__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__13260__auto__);
        } else {
          throw e__13260__auto__;
        }
      } else {
        throw e13521;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13520;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), testt.javascript_allows_div0);
testt.pennies__GT_dollar_string = function pennies__GT_dollar_string(pennies) {
  if (cljs.core.integer_QMARK_.call(null, pennies)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "integer?", "integer?", 1303791671, null), new cljs.core.Symbol(null, "pennies", "pennies", -807392060, null)))));
  }
  return "$" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pennies / 100 | 0) + "." + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.mod.call(null, pennies, 100));
};
testt.pennies__GT_dollar_string = cljs.core.with_meta.call(null, testt.pennies__GT_dollar_string, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 19, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 19, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 19, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, 
new cljs.core.Keyword(null, "line", "line", 212345235), 19, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function pennies__GT_dollar_string_test(test_ctx__13344__auto__) {
  var _test_ctx = test_ctx__13344__auto__;
  var async_QMARK___13259__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_13531 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto__) ? null : _test_ctx;
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "assertions are nice");
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___13259__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_13533 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        try {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___13259__auto____$1) ? null : _test_ctx__$1;
          try {
            try {
              try {
                testt.pennies__GT_dollar_string.call(null, 564.2);
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), null, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } catch (e13536) {
                if (e13536 instanceof Error) {
                  var e__13310__auto__ = e13536;
                  var m__13311__auto___13537 = e__13310__auto__.message;
                  if (cljs.core.truth_(cljs.core.re_find.call(null, /integer?/, m__13311__auto___13537))) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__13310__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__13310__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                  return e__13310__auto__;
                } else {
                  throw e13536;
                }
              }
            } catch (e13535) {
              if (e13535 instanceof Error) {
                var t__13316__auto__ = e13535;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__13316__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e13535;
              }
            }
          } catch (e13534) {
            if (e13534 instanceof Error) {
              var e__13260__auto__ = e13534;
              if (cljs.core.truth_(async_QMARK___13259__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__13260__auto__);
              } else {
                throw e__13260__auto__;
              }
            } else {
              throw e13534;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13533;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e13532) {
      if (e13532 instanceof Error) {
        var e__13260__auto__ = e13532;
        if (cljs.core.truth_(async_QMARK___13259__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__13260__auto__);
        } else {
          throw e__13260__auto__;
        }
      } else {
        throw e13532;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_13531;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), testt.pennies__GT_dollar_string);
goog.provide("reagent.interop");
goog.require("cljs.core");
reagent.interop.fvars = {};
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, s, 1));
  }
};
reagent.impl.util.dash_to_camel = function dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__11706 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__11706, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__11706, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__11708__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__3648__auto___11709 = self__.p;
    if (cljs.core.truth_(or__3648__auto___11709)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__11708 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__11708__delegate.call(this, self__, a);
  };
  G__11708.cljs$lang$maxFixedArity = 1;
  G__11708.cljs$lang$applyTo = function(arglist__11710) {
    var self__ = cljs.core.first(arglist__11710);
    var a = cljs.core.rest(arglist__11710);
    return G__11708__delegate(self__, a);
  };
  G__11708.cljs$core$IFn$_invoke$arity$variadic = G__11708__delegate;
  return G__11708;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args11707) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11707)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__11711__delegate = function(a) {
    var _ = this;
    var or__3648__auto___11712 = self__.p;
    if (cljs.core.truth_(or__3648__auto___11712)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__11711 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__11711__delegate.call(this, a);
  };
  G__11711.cljs$lang$maxFixedArity = 0;
  G__11711.cljs$lang$applyTo = function(arglist__11713) {
    var a = cljs.core.seq(arglist__11713);
    return G__11711__delegate(a);
  };
  G__11711.cljs$core$IFn$_invoke$arity$variadic = G__11711__delegate;
  return G__11711;
}();
reagent.impl.util.__GT_partial_ifn = function __GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c1) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null)))));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e11715) {
    if (e11715 instanceof Object) {
      var e = e11715;
      if (typeof console !== "undefined") {
        console.log("Error unmounting:");
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e11715;
    }
  }
};
reagent.impl.util.render_component = function render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_11720 = reagent.impl.util._STAR_always_update_STAR_;
    try {
      reagent.impl.util._STAR_always_update_STAR_ = true;
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_11720) {
        return function() {
          var _STAR_always_update_STAR_11721 = reagent.impl.util._STAR_always_update_STAR_;
          try {
            reagent.impl.util._STAR_always_update_STAR_ = false;
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_11721;
          }
        };
      }(_STAR_always_update_STAR_11720));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_11720;
    }
  } catch (e11719) {
    if (e11719 instanceof Object) {
      var e = e11719;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e11719;
    }
  }
};
reagent.impl.util.re_render_component = function re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function force_update_all() {
  var seq__11726_11730 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__11727_11731 = null;
  var count__11728_11732 = 0;
  var i__11729_11733 = 0;
  while (true) {
    if (i__11729_11733 < count__11728_11732) {
      var v_11734 = cljs.core._nth.call(null, chunk__11727_11731, i__11729_11733);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_11734);
      var G__11735 = seq__11726_11730;
      var G__11736 = chunk__11727_11731;
      var G__11737 = count__11728_11732;
      var G__11738 = i__11729_11733 + 1;
      seq__11726_11730 = G__11735;
      chunk__11727_11731 = G__11736;
      count__11728_11732 = G__11737;
      i__11729_11733 = G__11738;
      continue;
    } else {
      var temp__4126__auto___11739 = cljs.core.seq.call(null, seq__11726_11730);
      if (temp__4126__auto___11739) {
        var seq__11726_11740__$1 = temp__4126__auto___11739;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11726_11740__$1)) {
          var c__4418__auto___11741 = cljs.core.chunk_first.call(null, seq__11726_11740__$1);
          var G__11742 = cljs.core.chunk_rest.call(null, seq__11726_11740__$1);
          var G__11743 = c__4418__auto___11741;
          var G__11744 = cljs.core.count.call(null, c__4418__auto___11741);
          var G__11745 = 0;
          seq__11726_11730 = G__11742;
          chunk__11727_11731 = G__11743;
          count__11728_11732 = G__11744;
          i__11729_11733 = G__11745;
          continue;
        } else {
          var v_11746 = cljs.core.first.call(null, seq__11726_11740__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_11746);
          var G__11747 = cljs.core.next.call(null, seq__11726_11740__$1);
          var G__11748 = null;
          var G__11749 = 0;
          var G__11750 = 0;
          seq__11726_11730 = G__11747;
          chunk__11727_11731 = G__11748;
          count__11728_11732 = G__11749;
          i__11729_11733 = G__11750;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
reagent.impl.util.Wrapper = function(state, callback, changed) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114688;
};
reagent.impl.util.Wrapper.cljs$lang$type = true;
reagent.impl.util.Wrapper.cljs$lang$ctorStr = "reagent.impl.util/Wrapper";
reagent.impl.util.Wrapper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.impl.util/Wrapper");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.impl.util.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.impl.util.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  self__.changed = true;
  self__.state = newval;
  self__.callback.call(null, newval);
  return self__.state;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.state;
};
reagent.impl.util.__GT_Wrapper = function __GT_Wrapper(state, callback, changed) {
  return new reagent.impl.util.Wrapper(state, callback, changed);
};
reagent.impl.util.make_wrapper = function make_wrapper(value, callback_fn, args) {
  return new reagent.impl.util.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false);
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_11611 = reagent.ratom._STAR_ratom_context_STAR_;
  try {
    reagent.ratom._STAR_ratom_context_STAR_ = obj;
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_11611;
  }
};
reagent.ratom.captured = function captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.__GT_RAtom = function __GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__11615__delegate = function(x, p__11612) {
      var map__11614 = p__11612;
      var map__11614__$1 = cljs.core.seq_QMARK_.call(null, map__11614) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11614) : map__11614;
      var validator = cljs.core.get.call(null, map__11614__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__11614__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__11615 = function(x, var_args) {
      var p__11612 = null;
      if (arguments.length > 1) {
        p__11612 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11615__delegate.call(this, x, p__11612);
    };
    G__11615.cljs$lang$maxFixedArity = 1;
    G__11615.cljs$lang$applyTo = function(arglist__11616) {
      var x = cljs.core.first(arglist__11616);
      var p__11612 = cljs.core.rest(arglist__11616);
      return G__11615__delegate(x, p__11612);
    };
    G__11615.cljs$core$IFn$_invoke$arity$variadic = G__11615__delegate;
    return G__11615;
  }();
  atom = function(x, var_args) {
    var p__11612 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.ratom.peek_at = function peek_at(a, path) {
  var _STAR_ratom_context_STAR_11618 = reagent.ratom._STAR_ratom_context_STAR_;
  try {
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, a), path);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_11618;
  }
};
reagent.ratom.RCursor = function(path, ratom, setf, reaction) {
  this.path = path;
  this.ratom = ratom;
  this.setf = setf;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path, self__.setf], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, self__.ratom, oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, self__.ratom, key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, self__.ratom, key);
};
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cCursor: ");
  cljs.core.pr_writer.call(null, self__.path, writer, opts);
  cljs.core._write.call(null, writer, " ");
  cljs.core.pr_writer.call(null, self__.ratom, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path)));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y, more));
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.setf == null) {
    return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, new_value);
  } else {
    return self__.setf.call(null, new_value);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
  } else {
    if (self__.reaction == null) {
      self__.reaction = reagent.ratom.make_reaction.call(null, function(this$__$1) {
        return function() {
          return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
        };
      }(this$__$1));
    } else {
    }
    return cljs.core.deref.call(null, self__.reaction);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom) && cljs.core._EQ_.call(null, self__.setf, other.setf);
};
reagent.ratom.__GT_RCursor = function __GT_RCursor(path, ratom, setf, reaction) {
  return new reagent.ratom.RCursor(path, ratom, setf, reaction);
};
reagent.ratom.cursor = function() {
  var cursor = null;
  var cursor__2 = function(path, ra) {
    return new reagent.ratom.RCursor(path, ra, null, null);
  };
  var cursor__4 = function(path, ra, setf, args) {
    return new reagent.ratom.RCursor(path, ra, new reagent.impl.util.partial_ifn(setf, args, null), null);
  };
  cursor = function(path, ra, setf, args) {
    switch(arguments.length) {
      case 2:
        return cursor__2.call(this, path, ra);
      case 4:
        return cursor__4.call(this, path, ra, setf, args);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$4 = cursor__4;
  return cursor;
}();
reagent.ratom.IDisposable = function() {
  var obj11620 = {};
  return obj11620;
}();
reagent.ratom.dispose_BANG_ = function dispose_BANG_(this$) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj11622 = {};
  return obj11622;
}();
reagent.ratom.run = function run(this$) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = reagent.ratom.run[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = reagent.ratom.run["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj11624 = {};
  return obj11624;
}();
reagent.ratom._update_watching = function _update_watching(this$, derefed) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function _handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__3636__auto__ = k;
    if (and__3636__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4285__auto__ = k == null ? null : k;
    return function() {
      var or__3648__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom.call_watches = function call_watches(obs, watches, oldval, newval) {
  return cljs.core.reduce_kv.call(null, function(_, key, f) {
    f.call(null, key, obs, oldval, newval);
    return null;
  }, null, watches);
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__3636__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__3636__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__3648__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11625_11637 = cljs.core.seq.call(null, derefed);
  var chunk__11626_11638 = null;
  var count__11627_11639 = 0;
  var i__11628_11640 = 0;
  while (true) {
    if (i__11628_11640 < count__11627_11639) {
      var w_11641 = cljs.core._nth.call(null, chunk__11626_11638, i__11628_11640);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_11641)) {
      } else {
        cljs.core.add_watch.call(null, w_11641, this$__$1, reagent.ratom._handle_change);
      }
      var G__11642 = seq__11625_11637;
      var G__11643 = chunk__11626_11638;
      var G__11644 = count__11627_11639;
      var G__11645 = i__11628_11640 + 1;
      seq__11625_11637 = G__11642;
      chunk__11626_11638 = G__11643;
      count__11627_11639 = G__11644;
      i__11628_11640 = G__11645;
      continue;
    } else {
      var temp__4126__auto___11646 = cljs.core.seq.call(null, seq__11625_11637);
      if (temp__4126__auto___11646) {
        var seq__11625_11647__$1 = temp__4126__auto___11646;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11625_11647__$1)) {
          var c__4418__auto___11648 = cljs.core.chunk_first.call(null, seq__11625_11647__$1);
          var G__11649 = cljs.core.chunk_rest.call(null, seq__11625_11647__$1);
          var G__11650 = c__4418__auto___11648;
          var G__11651 = cljs.core.count.call(null, c__4418__auto___11648);
          var G__11652 = 0;
          seq__11625_11637 = G__11649;
          chunk__11626_11638 = G__11650;
          count__11627_11639 = G__11651;
          i__11628_11640 = G__11652;
          continue;
        } else {
          var w_11653 = cljs.core.first.call(null, seq__11625_11647__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_11653)) {
          } else {
            cljs.core.add_watch.call(null, w_11653, this$__$1, reagent.ratom._handle_change);
          }
          var G__11654 = cljs.core.next.call(null, seq__11625_11647__$1);
          var G__11655 = null;
          var G__11656 = 0;
          var G__11657 = 0;
          seq__11625_11637 = G__11654;
          chunk__11626_11638 = G__11655;
          count__11627_11639 = G__11656;
          i__11628_11640 = G__11657;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__11629_11658 = cljs.core.seq.call(null, self__.watching);
  var chunk__11630_11659 = null;
  var count__11631_11660 = 0;
  var i__11632_11661 = 0;
  while (true) {
    if (i__11632_11661 < count__11631_11660) {
      var w_11662 = cljs.core._nth.call(null, chunk__11630_11659, i__11632_11661);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_11662)) {
      } else {
        cljs.core.remove_watch.call(null, w_11662, this$__$1);
      }
      var G__11663 = seq__11629_11658;
      var G__11664 = chunk__11630_11659;
      var G__11665 = count__11631_11660;
      var G__11666 = i__11632_11661 + 1;
      seq__11629_11658 = G__11663;
      chunk__11630_11659 = G__11664;
      count__11631_11660 = G__11665;
      i__11632_11661 = G__11666;
      continue;
    } else {
      var temp__4126__auto___11667 = cljs.core.seq.call(null, seq__11629_11658);
      if (temp__4126__auto___11667) {
        var seq__11629_11668__$1 = temp__4126__auto___11667;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11629_11668__$1)) {
          var c__4418__auto___11669 = cljs.core.chunk_first.call(null, seq__11629_11668__$1);
          var G__11670 = cljs.core.chunk_rest.call(null, seq__11629_11668__$1);
          var G__11671 = c__4418__auto___11669;
          var G__11672 = cljs.core.count.call(null, c__4418__auto___11669);
          var G__11673 = 0;
          seq__11629_11658 = G__11670;
          chunk__11630_11659 = G__11671;
          count__11631_11660 = G__11672;
          i__11632_11661 = G__11673;
          continue;
        } else {
          var w_11674 = cljs.core.first.call(null, seq__11629_11668__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_11674)) {
          } else {
            cljs.core.remove_watch.call(null, w_11674, this$__$1);
          }
          var G__11675 = cljs.core.next.call(null, seq__11629_11668__$1);
          var G__11676 = null;
          var G__11677 = 0;
          var G__11678 = 0;
          seq__11629_11658 = G__11675;
          chunk__11630_11659 = G__11676;
          count__11631_11660 = G__11677;
          i__11632_11661 = G__11678;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cReaction " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.hash.call(null, this$__$1)) + ": ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11633_11679 = cljs.core.seq.call(null, self__.watching);
  var chunk__11634_11680 = null;
  var count__11635_11681 = 0;
  var i__11636_11682 = 0;
  while (true) {
    if (i__11636_11682 < count__11635_11681) {
      var w_11683 = cljs.core._nth.call(null, chunk__11634_11680, i__11636_11682);
      cljs.core.remove_watch.call(null, w_11683, this$__$1);
      var G__11684 = seq__11633_11679;
      var G__11685 = chunk__11634_11680;
      var G__11686 = count__11635_11681;
      var G__11687 = i__11636_11682 + 1;
      seq__11633_11679 = G__11684;
      chunk__11634_11680 = G__11685;
      count__11635_11681 = G__11686;
      i__11636_11682 = G__11687;
      continue;
    } else {
      var temp__4126__auto___11688 = cljs.core.seq.call(null, seq__11633_11679);
      if (temp__4126__auto___11688) {
        var seq__11633_11689__$1 = temp__4126__auto___11688;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11633_11689__$1)) {
          var c__4418__auto___11690 = cljs.core.chunk_first.call(null, seq__11633_11689__$1);
          var G__11691 = cljs.core.chunk_rest.call(null, seq__11633_11689__$1);
          var G__11692 = c__4418__auto___11690;
          var G__11693 = cljs.core.count.call(null, c__4418__auto___11690);
          var G__11694 = 0;
          seq__11633_11679 = G__11691;
          chunk__11634_11680 = G__11692;
          count__11635_11681 = G__11693;
          i__11636_11682 = G__11694;
          continue;
        } else {
          var w_11695 = cljs.core.first.call(null, seq__11633_11689__$1);
          cljs.core.remove_watch.call(null, w_11695, this$__$1);
          var G__11696 = cljs.core.next.call(null, seq__11633_11689__$1);
          var G__11697 = null;
          var G__11698 = 0;
          var G__11699 = 0;
          seq__11633_11679 = G__11696;
          chunk__11634_11680 = G__11697;
          count__11635_11681 = G__11698;
          i__11636_11682 = G__11699;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = cljs.core.PersistentHashSet.EMPTY;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  var old_value = self__.state;
  self__.state = new_value;
  cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  return new_value;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, self__.state, x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.on_set)) {
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  return reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldval, newval);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, function() {
    var or__3648__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
    var x__10357__auto___11700 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.auto_run, reagent.ratom._STAR_ratom_context_STAR_], null);
    if (typeof console !== "undefined") {
      console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1("dbg reagent.ratom:" + 249 + ": [auto-run *ratom-context*]: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, x__10357__auto___11700))));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
  } else {
    throw new Error("Assert failed: Reaction derefed outside auto-running context\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "*ratom-context*", "*ratom-context*", -1557728360, null)))));
  }
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  if (cljs.core.truth_(self__.dirty_QMARK_)) {
    return reagent.ratom.run.call(null, this$__$1);
  } else {
    return self__.state;
  }
};
reagent.ratom.__GT_Reaction = function __GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var make_reaction__delegate = function(f, p__11701) {
    var map__11703 = p__11701;
    var map__11703__$1 = cljs.core.seq_QMARK_.call(null, map__11703) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11703) : map__11703;
    var derefed = cljs.core.get.call(null, map__11703__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__11703__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__11703__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__11703__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, cljs.core.PersistentArrayMap.EMPTY, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var make_reaction = function(f, var_args) {
    var p__11701 = null;
    if (arguments.length > 1) {
      p__11701 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return make_reaction__delegate.call(this, f, p__11701);
  };
  make_reaction.cljs$lang$maxFixedArity = 1;
  make_reaction.cljs$lang$applyTo = function(arglist__11704) {
    var f = cljs.core.first(arglist__11704);
    var p__11701 = cljs.core.rest(arglist__11704);
    return make_reaction__delegate(f, p__11701);
  };
  make_reaction.cljs$core$IFn$_invoke$arity$variadic = make_reaction__delegate;
  return make_reaction;
}();
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__3648__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var or__3648__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__3648__auto____$1)) {
      return or__3648__auto____$1;
    } else {
      var or__3648__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__3648__auto____$2)) {
        return or__3648__auto____$2;
      } else {
        var or__3648__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__3648__auto____$3)) {
          return or__3648__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__4518__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4518__auto__) {
      var c_11570 = a[i];
      if (cljs.core.truth_(c_11570["cljsIsDirty"])) {
        c_11570["forceUpdate"]();
      } else {
      }
      var G__11571 = i + 1;
      i = G__11571;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function run_funs(a) {
  var n__4518__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4518__auto__) {
      a[i].call(null);
      var G__11572 = i + 1;
      i = G__11572;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.__GT_RenderQueue = function __GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function is_reagent_component(c) {
  var G__11574 = c;
  var G__11574__$1 = G__11574 == null ? null : G__11574["props"];
  var G__11574__$2 = G__11574__$1 == null ? null : G__11574__$1["argv"];
  return G__11574__$2;
};
reagent.impl.batching.run_reactively = function run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null)))));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function dispose(c) {
  var G__11576_11577 = c["cljsRatom"];
  var G__11576_11578__$1 = G__11576_11577 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__11576_11577);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.state = function state(this$) {
  return cljs.core.deref.call(null, reagent.impl.component.state_atom.call(null, this$));
};
reagent.impl.component.replace_state = function replace_state(this$, new_state) {
  return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), new_state);
};
reagent.impl.component.set_state = function set_state(this$, new_state) {
  return cljs.core.swap_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.impl.component.as_element = function as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function do_render(c) {
  var _STAR_current_component_STAR_11556 = reagent.impl.component._STAR_current_component_STAR_;
  try {
    reagent.impl.component._STAR_current_component_STAR_ = c;
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
    }();
    var p = c["props"];
    var res = c["componentFunction"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__11557 = n;
      switch(G__11557) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_11556;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function custom_wrapper(key, f) {
  var G__11560 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__11560) {
    case "componentWillUnmount":
      return function(G__11560) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__11560);
      break;
    case "componentWillMount":
      return function(G__11560) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__11560);
      break;
    case "componentDidUpdate":
      return function(G__11560) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__11560);
      break;
    case "componentWillUpdate":
      return function(G__11560) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__11560);
      break;
    case "shouldComponentUpdate":
      return function(G__11560) {
        return function(nextprops, nextstate) {
          var or__3648__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__11560);
      break;
    case "componentWillReceiveProps":
      return function(G__11560) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__11560);
      break;
    case "getInitialState":
      return function(G__11560) {
        return function() {
          var c = this;
          return reagent.impl.component.set_state.call(null, c, f.call(null, c));
        };
      }(G__11560);
      break;
    case "getDefaultProps":
      throw new Error("Assert failed: getDefaultProps not supported yet\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__11562__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__11562 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11562__delegate.call(this, args);
      };
      G__11562.cljs$lang$maxFixedArity = 0;
      G__11562.cljs$lang$applyTo = function(arglist__11563) {
        var args = cljs.core.seq(arglist__11563);
        return G__11562__delegate(args);
      };
      G__11562.cljs$core$IFn$_invoke$arity$variadic = G__11562__delegate;
      return G__11562;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104), null], null), null);
reagent.impl.component.dont_bind = function dont_bind(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    var G__11565 = f;
    G__11565["__reactDontBind"] = true;
    return G__11565;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = wrap;
      if (cljs.core.truth_(and__3636__auto__)) {
        return f;
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Expected function in " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(key) + " but got " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(f)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
      }
    } else {
    }
    var or__3648__auto__ = wrap;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function add_render(fun_map, render_f) {
  return cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
};
reagent.impl.component.wrap_funs = function wrap_funs(fun_map) {
  var render_fun = function() {
    var or__3648__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Render must be a function, not " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, render_fun))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null)))));
  }();
  var name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
    var or__3648__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      var or__3648__auto____$1 = render_fun["displayName"];
      if (cljs.core.truth_(or__3648__auto____$1)) {
        return or__3648__auto____$1;
      } else {
        var or__3648__auto____$2 = render_fun["name"];
        if (cljs.core.truth_(or__3648__auto____$2)) {
          return or__3648__auto____$2;
        } else {
          return "";
        }
      }
    }
  }());
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.gensym.call(null, "reagent")) : name;
  var fmap = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun);
  return cljs.core.reduce_kv.call(null, function(render_fun, _, name, name_SINGLEQUOTE_, fmap) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(render_fun, _, name, name_SINGLEQUOTE_, fmap), cljs.core.PersistentArrayMap.EMPTY, fmap);
};
reagent.impl.component.map_to_js = function map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__11567 = o;
    G__11567[cljs.core.name.call(null, k)] = v;
    return G__11567;
  }, {}, m);
};
reagent.impl.component.cljsify = function cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null)))));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__11568__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__11568 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11568__delegate.call(this, args);
      };
      G__11568.cljs$lang$maxFixedArity = 0;
      G__11568.cljs$lang$applyTo = function(arglist__11569) {
        var args = cljs.core.seq(arglist__11569);
        return G__11568__delegate(args);
      };
      G__11568.cljs$core$IFn$_invoke$arity$variadic = G__11568__delegate;
      return G__11568;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("clojure.string");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
goog.require("clojure.string");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.attr_aliases = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "className", new cljs.core.Keyword(null, "for", "for", -1323786319), "htmlFor", new cljs.core.Keyword(null, "charset", "charset", -1063822193), "charSet"], null);
reagent.impl.template.hiccup_tag_QMARK_ = function hiccup_tag_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x);
};
reagent.impl.template.to_js_val = function to_js_val(v) {
  if (typeof v === "string" || typeof v === "number") {
    return v;
  } else {
    if (function() {
      var G__11580 = v;
      if (G__11580) {
        var bit__4305__auto__ = G__11580.cljs$lang$protocol_mask$partition1$ & 4096;
        if (bit__4305__auto__ || G__11580.cljs$core$INamed$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.name.call(null, v);
    } else {
      if (cljs.core.coll_QMARK_.call(null, v)) {
        return cljs.core.clj__GT_js.call(null, v);
      } else {
        if (cljs.core.ifn_QMARK_.call(null, v)) {
          return function() {
            var G__11581__delegate = function(args) {
              return cljs.core.apply.call(null, v, args);
            };
            var G__11581 = function(var_args) {
              var args = null;
              if (arguments.length > 0) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
              }
              return G__11581__delegate.call(this, args);
            };
            G__11581.cljs$lang$maxFixedArity = 0;
            G__11581.cljs$lang$applyTo = function(arglist__11582) {
              var args = cljs.core.seq(arglist__11582);
              return G__11581__delegate(args);
            };
            G__11581.cljs$core$IFn$_invoke$arity$variadic = G__11581__delegate;
            return G__11581;
          }();
        } else {
          return v;
        }
      }
    }
  }
};
reagent.impl.template.undash_prop_name = function undash_prop_name(n) {
  var or__3648__auto__ = reagent.impl.template.attr_aliases.call(null, n);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return reagent.impl.util.dash_to_camel.call(null, n);
  }
};
reagent.impl.template.cached_prop_name = reagent.impl.util.memoize_1.call(null, reagent.impl.template.undash_prop_name);
reagent.impl.template.convert_prop_value = function convert_prop_value(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__11584 = o;
          G__11584[reagent.impl.template.cached_prop_name.call(null, k)] = reagent.impl.template.to_js_val.call(null, v);
          return G__11584;
        }, {}, x);
      } else {
        return reagent.impl.template.to_js_val.call(null, x);
      }
    }
  }
};
reagent.impl.template.set_id_class = function set_id_class(props, p__11585) {
  var vec__11587 = p__11585;
  var id = cljs.core.nth.call(null, vec__11587, 0, null);
  var class$ = cljs.core.nth.call(null, vec__11587, 1, null);
  var pid = props["id"];
  props["id"] = cljs.core.some_QMARK_.call(null, pid) ? pid : id;
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old = props["className"];
    return props["className"] = cljs.core.some_QMARK_.call(null, old) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(old) : class$;
  } else {
    return null;
  }
};
reagent.impl.template.convert_props = function convert_props(props, id_class) {
  if (cljs.core.empty_QMARK_.call(null, props) && id_class == null) {
    return null;
  } else {
    var objprops = cljs.core.reduce_kv.call(null, function(o, k, v) {
      var pname_11588 = reagent.impl.template.cached_prop_name.call(null, k);
      o[pname_11588] = reagent.impl.template.convert_prop_value.call(null, v);
      return o;
    }, {}, props);
    if (cljs.core.some_QMARK_.call(null, id_class)) {
      reagent.impl.template.set_id_class.call(null, objprops, id_class);
    } else {
    }
    return objprops;
  }
};
reagent.impl.template.input_unmount = function input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__3636__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__3636__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__11591 = jsprops;
    G__11591["defaultValue"] = value;
    G__11591["onChange"] = function(G__11591, v, value, on_change) {
      return function(p1__11589_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__11589_SHARP_);
      };
    }(G__11591, v, value, on_change);
    return G__11591;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function parse_tag(hiccup_tag) {
  var vec__11593 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__11593, 0, null);
  var id = cljs.core.nth.call(null, vec__11593, 1, null);
  var class$ = cljs.core.nth.call(null, vec__11593, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unknown tag: '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccup_tag) + "'") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null))));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, cljs.core.truth_(function() {
    var or__3648__auto__ = id;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return class_SINGLEQUOTE_;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, class_SINGLEQUOTE_], null) : null], null);
};
reagent.impl.template.fn_to_class = function fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Expected a function, not " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, f))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.reag_element = function reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var key_11598 = function() {
    var temp__4128__auto__ = function() {
      var G__11596 = cljs.core.meta.call(null, v);
      var G__11596__$1 = G__11596 == null ? null : reagent.impl.template.get_key.call(null, G__11596);
      return G__11596__$1;
    }();
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
    } else {
      var k = temp__4128__auto__;
      return k;
    }
  }();
  var G__11597_11599 = key_11598;
  var G__11597_11600__$1 = G__11597_11599 == null ? null : jsprops["key"] = G__11597_11599;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.cached_parse = reagent.impl.util.memoize_1.call(null, reagent.impl.template.parse_tag);
reagent.impl.template.native_element = function native_element(tag, argv) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, tag)) {
    var vec__11604 = reagent.impl.template.cached_parse.call(null, tag);
    var comp = cljs.core.nth.call(null, vec__11604, 0, null);
    var id_class = cljs.core.nth.call(null, vec__11604, 1, null);
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, id_class);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__11605 = cljs.core.meta.call(null, argv);
          var G__11605__$1 = G__11605 == null ? null : reagent.impl.template.get_key.call(null, G__11605);
          return G__11605__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__11606 = jsprops == null ? {} : jsprops;
          G__11606["key"] = key;
          return G__11606;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error("Assert failed: Hiccup form should not be empty\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid Hiccup form: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, v))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.seq_ctx = {};
reagent.impl.template.warn_on_deref = function warn_on_deref(x) {
  if (cljs.core.truth_(reagent.impl.template.seq_ctx["warned"])) {
    return null;
  } else {
    if (typeof console !== "undefined") {
      console.log("Warning: Reactive deref not supported in seq in ", cljs.core.pr_str.call(null, x));
    } else {
    }
    return reagent.impl.template.seq_ctx["warned"] = true;
  }
};
reagent.impl.template.as_element = function as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
          return reagent.impl.template.expand_seq.call(null, x);
        } else {
          var s = reagent.ratom.capture_derefed.call(null, function() {
            return reagent.impl.template.expand_seq.call(null, x);
          }, reagent.impl.template.seq_ctx);
          if (cljs.core.truth_(reagent.ratom.captured.call(null, reagent.impl.template.seq_ctx))) {
            reagent.impl.template.warn_on_deref.call(null, x);
          } else {
          }
          return s;
        }
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__4518__auto___11607 = a.length;
  var i_11608 = 0;
  while (true) {
    if (i_11608 < n__4518__auto___11607) {
      a[i_11608] = reagent.impl.template.as_element.call(null, a[i_11608]);
      var G__11609 = i_11608 + 1;
      i_11608 = G__11609;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.make_element = function make_element(argv, comp, jsprops, first_child) {
  if (cljs.core.count.call(null, argv) === first_child + 1) {
    return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
  } else {
    return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(a, k, v) {
      if (k >= first_child) {
        a.push(reagent.impl.template.as_element.call(null, v));
      } else {
      }
      return a;
    }, [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.impl.template");
goog.require("reagent.ratom");
goog.require("reagent.debug");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var create_element = null;
  var create_element__1 = function(type) {
    return create_element.call(null, type, null);
  };
  var create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
    }
    return React.createElement(type, props);
  };
  var create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
    }
    return React.createElement(type, props, child);
  };
  var create_element__4 = function() {
    var G__11538__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__11538 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11538__delegate.call(this, type, props, child, children);
    };
    G__11538.cljs$lang$maxFixedArity = 3;
    G__11538.cljs$lang$applyTo = function(arglist__11539) {
      var type = cljs.core.first(arglist__11539);
      arglist__11539 = cljs.core.next(arglist__11539);
      var props = cljs.core.first(arglist__11539);
      arglist__11539 = cljs.core.next(arglist__11539);
      var child = cljs.core.first(arglist__11539);
      var children = cljs.core.rest(arglist__11539);
      return G__11538__delegate(type, props, child, children);
    };
    G__11538.cljs$core$IFn$_invoke$arity$variadic = G__11538__delegate;
    return G__11538;
  }();
  create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return create_element__1.call(this, type);
      case 2:
        return create_element__2.call(this, type, props);
      case 3:
        return create_element__3.call(this, type, props, child);
      default:
        return create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_element.cljs$lang$maxFixedArity = 3;
  create_element.cljs$lang$applyTo = create_element__4.cljs$lang$applyTo;
  create_element.cljs$core$IFn$_invoke$arity$1 = create_element__1;
  create_element.cljs$core$IFn$_invoke$arity$2 = create_element__2;
  create_element.cljs$core$IFn$_invoke$arity$3 = create_element__3;
  create_element.cljs$core$IFn$_invoke$arity$variadic = create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return create_element;
}();
reagent.core.as_element = function as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.render = function() {
  var render = null;
  var render__2 = function(comp, container) {
    return render.call(null, comp, container, null);
  };
  var render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return render__2.call(this, comp, container);
      case 3:
        return render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render.cljs$core$IFn$_invoke$arity$2 = render__2;
  render.cljs$core$IFn$_invoke$arity$3 = render__3;
  return render;
}();
reagent.core.unmount_component_at_node = function unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function render_to_string(component) {
  var _STAR_non_reactive_STAR_11541 = reagent.impl.component._STAR_non_reactive_STAR_;
  try {
    reagent.impl.component._STAR_non_reactive_STAR_ = true;
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_11541;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_11543 = reagent.impl.component._STAR_non_reactive_STAR_;
  try {
    reagent.impl.component._STAR_non_reactive_STAR_ = true;
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_11543;
  }
};
reagent.core.force_update_all = function force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state = function state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.component.state.call(null, this$);
};
reagent.core.replace_state = function replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.replace_state.call(null, this$, new_state);
};
reagent.core.set_state = function set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.set_state.call(null, this$, new_state);
};
reagent.core.props = function props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var atom__2 = function() {
    var G__11544__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__11544 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        rest = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11544__delegate.call(this, x, rest);
    };
    G__11544.cljs$lang$maxFixedArity = 1;
    G__11544.cljs$lang$applyTo = function(arglist__11545) {
      var x = cljs.core.first(arglist__11545);
      var rest = cljs.core.rest(arglist__11545);
      return G__11544__delegate(x, rest);
    };
    G__11544.cljs$core$IFn$_invoke$arity$variadic = G__11544__delegate;
    return G__11544;
  }();
  atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.core.wrap = function() {
  var wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null)))));
    }
    return reagent.impl.util.make_wrapper.call(null, value, reset_fn, args);
  };
  var wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return wrap__delegate.call(this, value, reset_fn, args);
  };
  wrap.cljs$lang$maxFixedArity = 2;
  wrap.cljs$lang$applyTo = function(arglist__11546) {
    var value = cljs.core.first(arglist__11546);
    arglist__11546 = cljs.core.next(arglist__11546);
    var reset_fn = cljs.core.first(arglist__11546);
    var args = cljs.core.rest(arglist__11546);
    return wrap__delegate(value, reset_fn, args);
  };
  wrap.cljs$core$IFn$_invoke$arity$variadic = wrap__delegate;
  return wrap;
}();
reagent.core.cursor = function() {
  var cursor = null;
  var cursor__1 = function(path) {
    return function(ra) {
      return cursor.call(null, path, ra);
    };
  };
  var cursor__2 = function(path, ra) {
    if (function() {
      var G__11549 = ra;
      if (G__11549) {
        var bit__4312__auto__ = G__11549.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4312__auto__ || G__11549.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__11549.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11549);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11549);
      }
    }()) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null)))));
    }
    return reagent.ratom.cursor.call(null, path, ra);
  };
  var cursor__4 = function() {
    var G__11551__delegate = function(path, ra, reset_fn, args) {
      if (function() {
        var G__11550 = ra;
        if (G__11550) {
          var bit__4312__auto__ = G__11550.cljs$lang$protocol_mask$partition0$ & 32768;
          if (bit__4312__auto__ || G__11550.cljs$core$IDeref$) {
            return true;
          } else {
            if (!G__11550.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11550);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11550);
        }
      }()) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null)))));
      }
      if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null)))));
      }
      return reagent.ratom.cursor.call(null, path, ra, reset_fn, args);
    };
    var G__11551 = function(path, ra, reset_fn, var_args) {
      var args = null;
      if (arguments.length > 3) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11551__delegate.call(this, path, ra, reset_fn, args);
    };
    G__11551.cljs$lang$maxFixedArity = 3;
    G__11551.cljs$lang$applyTo = function(arglist__11552) {
      var path = cljs.core.first(arglist__11552);
      arglist__11552 = cljs.core.next(arglist__11552);
      var ra = cljs.core.first(arglist__11552);
      arglist__11552 = cljs.core.next(arglist__11552);
      var reset_fn = cljs.core.first(arglist__11552);
      var args = cljs.core.rest(arglist__11552);
      return G__11551__delegate(path, ra, reset_fn, args);
    };
    G__11551.cljs$core$IFn$_invoke$arity$variadic = G__11551__delegate;
    return G__11551;
  }();
  cursor = function(path, ra, reset_fn, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cursor__1.call(this, path);
      case 2:
        return cursor__2.call(this, path, ra);
      default:
        return cursor__4.cljs$core$IFn$_invoke$arity$variadic(path, ra, reset_fn, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$lang$maxFixedArity = 3;
  cursor.cljs$lang$applyTo = cursor__4.cljs$lang$applyTo;
  cursor.cljs$core$IFn$_invoke$arity$1 = cursor__1;
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$variadic = cursor__4.cljs$core$IFn$_invoke$arity$variadic;
  return cursor;
}();
reagent.core.next_tick = function next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return partial__delegate.call(this, f, args);
  };
  partial.cljs$lang$maxFixedArity = 1;
  partial.cljs$lang$applyTo = function(arglist__11553) {
    var f = cljs.core.first(arglist__11553);
    var args = cljs.core.rest(arglist__11553);
    return partial__delegate(f, args);
  };
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__delegate;
  return partial;
}();
goog.provide("html");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.core");
html.timer = reagent.core.atom.call(null, new Date);
html.time_color = reagent.core.atom.call(null, "#f34");
html.update_time = function update_time(time) {
  return setTimeout(function() {
    return cljs.core.reset_BANG_.call(null, time, new Date);
  }, 100);
};
html.greeting = function greeting(message) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), message], null);
};
html.clock = function clock() {
  html.update_time.call(null, html.timer);
  var time_str = cljs.core.first.call(null, clojure.string.split.call(null, cljs.core.deref.call(null, html.timer).toTimeString(), " "));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.example-clock", "div.example-clock", 1559289088), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core.deref.call(null, html.time_color)], null)], null), time_str], null);
};
html.color_input = function color_input() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-input", "div.color-input", -879914246), "Time color: ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, 
  html.time_color), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__14905_SHARP_) {
    return cljs.core.reset_BANG_.call(null, html.time_color, p1__14905_SHARP_.target.value);
  }], null)], null)], null);
};
html.simple_example = function simple_example() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.greeting, "Hello world, it is now"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.clock], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.color_input], null)], null);
};
html.run = function run() {
  return reagent.core.render_component.call(null, function() {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.simple_example], null);
  }, document.body);
};
goog.provide("renderStrategy");
goog.require("cljs.core");
goog.require("html");
renderStrategy.run = function run(renderer) {
  return html.run.call(null);
};
goog.provide("pouchDB");
goog.require("cljs.core");
pouchDB.dbase = new PouchDB("dbname");
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj14393 = {};
  return obj14393;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.read_char[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.read_char["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.unread[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.unread["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3648__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__14394) {
    var rdr = cljs.core.first(arglist__14394);
    var msg = cljs.core.rest(arglist__14394);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3636__auto__ = !(ch === "#");
  if (and__3636__auto__) {
    var and__3636__auto____$1 = !(ch === "'");
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = !(ch === ":");
      if (and__3636__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__14395 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__14396 = cljs.reader.read_char.call(null, rdr);
      sb = G__14395;
      ch = G__14396;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__14397 = cljs.reader.read_char.call(null, rdr);
      ch = G__14397;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__14398 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__14398;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__14399 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__14399;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = ch == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3648__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__14400 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__14401 = cljs.reader.read_char.call(null, reader);
      buffer = G__14400;
      ch = G__14401;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__14402 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__14403 = cljs.reader.read_char.call(null, reader);
        buffer = G__14402;
        ch = G__14403;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14404 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__14405 = cljs.reader.read_char.call(null, reader);
          buffer = G__14404;
          ch = G__14405;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__14410 = function() {
            var G__14408 = buffer;
            G__14408.append(nch);
            return G__14408;
          }();
          var G__14411 = cljs.reader.read_char.call(null, reader);
          buffer = G__14410;
          ch = G__14411;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14412 = function() {
            var G__14409 = buffer;
            G__14409.append(ch);
            return G__14409;
          }();
          var G__14413 = cljs.reader.read_char.call(null, reader);
          buffer = G__14412;
          ch = G__14413;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__14415 = o;
    if (G__14415) {
      var bit__4312__auto__ = G__14415.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__14415.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14415.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14415);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14415);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__14416 = reader;
        var G__14417 = eof_is_error;
        var G__14418 = sentinel;
        var G__14419 = is_recursive;
        reader = G__14416;
        eof_is_error = G__14417;
        sentinel = G__14418;
        is_recursive = G__14419;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__14420 = cljs.reader.read_comment.call(null, reader, ch);
          var G__14421 = eof_is_error;
          var G__14422 = sentinel;
          var G__14423 = is_recursive;
          reader = G__14420;
          eof_is_error = G__14421;
          sentinel = G__14422;
          is_recursive = G__14423;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__14424 = reader;
            var G__14425 = eof_is_error;
            var G__14426 = sentinel;
            var G__14427 = is_recursive;
            reader = G__14424;
            eof_is_error = G__14425;
            sentinel = G__14426;
            is_recursive = G__14427;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__14428 = b.append("0");
          b = G__14428;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__14430 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__14430, 0, null);
  var years = cljs.core.nth.call(null, vec__14430, 1, null);
  var months = cljs.core.nth.call(null, vec__14430, 2, null);
  var days = cljs.core.nth.call(null, vec__14430, 3, null);
  var hours = cljs.core.nth.call(null, vec__14430, 4, null);
  var minutes = cljs.core.nth.call(null, vec__14430, 5, null);
  var seconds = cljs.core.nth.call(null, vec__14430, 6, null);
  var fraction = cljs.core.nth.call(null, vec__14430, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__14430, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__14430, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__14430, 10, null);
  var v = vec__14430;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__14432 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__14432, 0, null);
    var months = cljs.core.nth.call(null, vec__14432, 1, null);
    var days = cljs.core.nth.call(null, vec__14432, 2, null);
    var hours = cljs.core.nth.call(null, vec__14432, 3, null);
    var minutes = cljs.core.nth.call(null, vec__14432, 4, null);
    var seconds = cljs.core.nth.call(null, vec__14432, 5, null);
    var ms = cljs.core.nth.call(null, vec__14432, 6, null);
    var offset = cljs.core.nth.call(null, vec__14432, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__14445_14457 = cljs.core.seq.call(null, form);
    var chunk__14446_14458 = null;
    var count__14447_14459 = 0;
    var i__14448_14460 = 0;
    while (true) {
      if (i__14448_14460 < count__14447_14459) {
        var x_14461 = cljs.core._nth.call(null, chunk__14446_14458, i__14448_14460);
        arr.push(x_14461);
        var G__14462 = seq__14445_14457;
        var G__14463 = chunk__14446_14458;
        var G__14464 = count__14447_14459;
        var G__14465 = i__14448_14460 + 1;
        seq__14445_14457 = G__14462;
        chunk__14446_14458 = G__14463;
        count__14447_14459 = G__14464;
        i__14448_14460 = G__14465;
        continue;
      } else {
        var temp__4126__auto___14466 = cljs.core.seq.call(null, seq__14445_14457);
        if (temp__4126__auto___14466) {
          var seq__14445_14467__$1 = temp__4126__auto___14466;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14445_14467__$1)) {
            var c__4418__auto___14468 = cljs.core.chunk_first.call(null, seq__14445_14467__$1);
            var G__14469 = cljs.core.chunk_rest.call(null, seq__14445_14467__$1);
            var G__14470 = c__4418__auto___14468;
            var G__14471 = cljs.core.count.call(null, c__4418__auto___14468);
            var G__14472 = 0;
            seq__14445_14457 = G__14469;
            chunk__14446_14458 = G__14470;
            count__14447_14459 = G__14471;
            i__14448_14460 = G__14472;
            continue;
          } else {
            var x_14473 = cljs.core.first.call(null, seq__14445_14467__$1);
            arr.push(x_14473);
            var G__14474 = cljs.core.next.call(null, seq__14445_14467__$1);
            var G__14475 = null;
            var G__14476 = 0;
            var G__14477 = 0;
            seq__14445_14457 = G__14474;
            chunk__14446_14458 = G__14475;
            count__14447_14459 = G__14476;
            i__14448_14460 = G__14477;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj14450 = {};
        return obj14450;
      }();
      var seq__14451_14478 = cljs.core.seq.call(null, form);
      var chunk__14452_14479 = null;
      var count__14453_14480 = 0;
      var i__14454_14481 = 0;
      while (true) {
        if (i__14454_14481 < count__14453_14480) {
          var vec__14455_14482 = cljs.core._nth.call(null, chunk__14452_14479, i__14454_14481);
          var k_14483 = cljs.core.nth.call(null, vec__14455_14482, 0, null);
          var v_14484 = cljs.core.nth.call(null, vec__14455_14482, 1, null);
          obj[cljs.core.name.call(null, k_14483)] = v_14484;
          var G__14485 = seq__14451_14478;
          var G__14486 = chunk__14452_14479;
          var G__14487 = count__14453_14480;
          var G__14488 = i__14454_14481 + 1;
          seq__14451_14478 = G__14485;
          chunk__14452_14479 = G__14486;
          count__14453_14480 = G__14487;
          i__14454_14481 = G__14488;
          continue;
        } else {
          var temp__4126__auto___14489 = cljs.core.seq.call(null, seq__14451_14478);
          if (temp__4126__auto___14489) {
            var seq__14451_14490__$1 = temp__4126__auto___14489;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14451_14490__$1)) {
              var c__4418__auto___14491 = cljs.core.chunk_first.call(null, seq__14451_14490__$1);
              var G__14492 = cljs.core.chunk_rest.call(null, seq__14451_14490__$1);
              var G__14493 = c__4418__auto___14491;
              var G__14494 = cljs.core.count.call(null, c__4418__auto___14491);
              var G__14495 = 0;
              seq__14451_14478 = G__14492;
              chunk__14452_14479 = G__14493;
              count__14453_14480 = G__14494;
              i__14454_14481 = G__14495;
              continue;
            } else {
              var vec__14456_14496 = cljs.core.first.call(null, seq__14451_14490__$1);
              var k_14497 = cljs.core.nth.call(null, vec__14456_14496, 0, null);
              var v_14498 = cljs.core.nth.call(null, vec__14456_14496, 1, null);
              obj[cljs.core.name.call(null, k_14497)] = v_14498;
              var G__14499 = cljs.core.next.call(null, seq__14451_14490__$1);
              var G__14500 = null;
              var G__14501 = 0;
              var G__14502 = 0;
              seq__14451_14478 = G__14499;
              chunk__14452_14479 = G__14500;
              count__14453_14480 = G__14501;
              i__14454_14481 = G__14502;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__14383) {
  var vec__14385 = p__14383;
  var result = cljs.core.nth.call(null, vec__14385, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__14385, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__14389 = cljs.core._EQ_;
  var expr__14390 = event.data["command"];
  if (cljs.core.truth_(pred__14389.call(null, "channel", expr__14390))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__14389.call(null, "channel-arraybuffer", expr__14390))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__14390));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__5710__auto___14653 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14653, servant_channel) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___14653, servant_channel) {
          return function(state_14624) {
            var state_val_14625 = state_14624[1];
            if (state_val_14625 === 7) {
              var inst_14587 = state_14624[5];
              var inst_14584 = state_14624[6];
              var inst_14586 = state_14624[7];
              var inst_14585 = state_14624[8];
              var inst_14595 = state_14624[2];
              var inst_14596 = inst_14587 + 1;
              var tmp14626 = inst_14584;
              var tmp14627 = inst_14586;
              var tmp14628 = inst_14585;
              var inst_14584__$1 = tmp14626;
              var inst_14585__$1 = tmp14628;
              var inst_14586__$1 = tmp14627;
              var inst_14587__$1 = inst_14596;
              var state_14624__$1 = function() {
                var statearr_14629 = state_14624;
                statearr_14629[5] = inst_14587__$1;
                statearr_14629[9] = inst_14595;
                statearr_14629[6] = inst_14584__$1;
                statearr_14629[7] = inst_14586__$1;
                statearr_14629[8] = inst_14585__$1;
                return statearr_14629;
              }();
              var statearr_14630_14654 = state_14624__$1;
              statearr_14630_14654[2] = null;
              statearr_14630_14654[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14625 === 1) {
                var inst_14582 = cljs.core.range.call(null, worker_count);
                var inst_14583 = cljs.core.seq.call(null, inst_14582);
                var inst_14584 = inst_14583;
                var inst_14585 = null;
                var inst_14586 = 0;
                var inst_14587 = 0;
                var state_14624__$1 = function() {
                  var statearr_14631 = state_14624;
                  statearr_14631[5] = inst_14587;
                  statearr_14631[6] = inst_14584;
                  statearr_14631[7] = inst_14586;
                  statearr_14631[8] = inst_14585;
                  return statearr_14631;
                }();
                var statearr_14632_14655 = state_14624__$1;
                statearr_14632_14655[2] = null;
                statearr_14632_14655[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14625 === 4) {
                  var inst_14587 = state_14624[5];
                  var inst_14585 = state_14624[8];
                  var inst_14592 = cljs.core._nth.call(null, inst_14585, inst_14587);
                  var inst_14593 = new Worker(worker_script);
                  var state_14624__$1 = function() {
                    var statearr_14633 = state_14624;
                    statearr_14633[10] = inst_14592;
                    return statearr_14633;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14624__$1, 7, servant_channel, inst_14593);
                } else {
                  if (state_val_14625 === 13) {
                    var inst_14615 = state_14624[2];
                    var state_14624__$1 = state_14624;
                    var statearr_14634_14656 = state_14624__$1;
                    statearr_14634_14656[2] = inst_14615;
                    statearr_14634_14656[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14625 === 6) {
                      var inst_14620 = state_14624[2];
                      var state_14624__$1 = state_14624;
                      var statearr_14635_14657 = state_14624__$1;
                      statearr_14635_14657[2] = inst_14620;
                      statearr_14635_14657[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14625 === 3) {
                        var inst_14622 = state_14624[2];
                        var state_14624__$1 = state_14624;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14624__$1, inst_14622);
                      } else {
                        if (state_val_14625 === 12) {
                          var inst_14599 = state_14624[11];
                          var inst_14608 = cljs.core.first.call(null, inst_14599);
                          var inst_14609 = new Worker(worker_script);
                          var state_14624__$1 = function() {
                            var statearr_14636 = state_14624;
                            statearr_14636[12] = inst_14608;
                            return statearr_14636;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14624__$1, 14, servant_channel, inst_14609);
                        } else {
                          if (state_val_14625 === 2) {
                            var inst_14587 = state_14624[5];
                            var inst_14586 = state_14624[7];
                            var inst_14589 = inst_14587 < inst_14586;
                            var inst_14590 = inst_14589;
                            var state_14624__$1 = state_14624;
                            if (cljs.core.truth_(inst_14590)) {
                              var statearr_14637_14658 = state_14624__$1;
                              statearr_14637_14658[1] = 4;
                            } else {
                              var statearr_14638_14659 = state_14624__$1;
                              statearr_14638_14659[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14625 === 11) {
                              var inst_14599 = state_14624[11];
                              var inst_14603 = cljs.core.chunk_first.call(null, inst_14599);
                              var inst_14604 = cljs.core.chunk_rest.call(null, inst_14599);
                              var inst_14605 = cljs.core.count.call(null, inst_14603);
                              var inst_14584 = inst_14604;
                              var inst_14585 = inst_14603;
                              var inst_14586 = inst_14605;
                              var inst_14587 = 0;
                              var state_14624__$1 = function() {
                                var statearr_14639 = state_14624;
                                statearr_14639[5] = inst_14587;
                                statearr_14639[6] = inst_14584;
                                statearr_14639[7] = inst_14586;
                                statearr_14639[8] = inst_14585;
                                return statearr_14639;
                              }();
                              var statearr_14640_14660 = state_14624__$1;
                              statearr_14640_14660[2] = null;
                              statearr_14640_14660[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14625 === 9) {
                                var state_14624__$1 = state_14624;
                                var statearr_14641_14661 = state_14624__$1;
                                statearr_14641_14661[2] = null;
                                statearr_14641_14661[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14625 === 5) {
                                  var inst_14599 = state_14624[11];
                                  var inst_14584 = state_14624[6];
                                  var inst_14599__$1 = cljs.core.seq.call(null, inst_14584);
                                  var state_14624__$1 = function() {
                                    var statearr_14642 = state_14624;
                                    statearr_14642[11] = inst_14599__$1;
                                    return statearr_14642;
                                  }();
                                  if (inst_14599__$1) {
                                    var statearr_14643_14662 = state_14624__$1;
                                    statearr_14643_14662[1] = 8;
                                  } else {
                                    var statearr_14644_14663 = state_14624__$1;
                                    statearr_14644_14663[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14625 === 14) {
                                    var inst_14599 = state_14624[11];
                                    var inst_14611 = state_14624[2];
                                    var inst_14612 = cljs.core.next.call(null, inst_14599);
                                    var inst_14584 = inst_14612;
                                    var inst_14585 = null;
                                    var inst_14586 = 0;
                                    var inst_14587 = 0;
                                    var state_14624__$1 = function() {
                                      var statearr_14645 = state_14624;
                                      statearr_14645[5] = inst_14587;
                                      statearr_14645[6] = inst_14584;
                                      statearr_14645[13] = inst_14611;
                                      statearr_14645[7] = inst_14586;
                                      statearr_14645[8] = inst_14585;
                                      return statearr_14645;
                                    }();
                                    var statearr_14646_14664 = state_14624__$1;
                                    statearr_14646_14664[2] = null;
                                    statearr_14646_14664[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14625 === 10) {
                                      var inst_14618 = state_14624[2];
                                      var state_14624__$1 = state_14624;
                                      var statearr_14647_14665 = state_14624__$1;
                                      statearr_14647_14665[2] = inst_14618;
                                      statearr_14647_14665[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14625 === 8) {
                                        var inst_14599 = state_14624[11];
                                        var inst_14601 = cljs.core.chunked_seq_QMARK_.call(null, inst_14599);
                                        var state_14624__$1 = state_14624;
                                        if (inst_14601) {
                                          var statearr_14648_14666 = state_14624__$1;
                                          statearr_14648_14666[1] = 11;
                                        } else {
                                          var statearr_14649_14667 = state_14624__$1;
                                          statearr_14649_14667[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___14653, servant_channel);
        return function(switch__5697__auto__, c__5710__auto___14653, servant_channel) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_14651 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14651[0] = state_machine__5698__auto__;
              statearr_14651[1] = 1;
              return statearr_14651;
            };
            var state_machine__5698__auto____1 = function(state_14624) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_14624);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_14624) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_14624);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___14653, servant_channel);
      }();
      var state__5712__auto__ = function() {
        var statearr_14652 = f__5711__auto__.call(null);
        statearr_14652[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14653;
        return statearr_14652;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___14653, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_14789) {
            var state_val_14790 = state_14789[1];
            if (state_val_14790 === 7) {
              var inst_14750 = state_14789[5];
              var inst_14749 = state_14789[6];
              var inst_14751 = state_14789[7];
              var inst_14752 = state_14789[8];
              var inst_14759 = state_14789[2];
              var inst_14760 = inst_14759.terminate();
              var inst_14761 = inst_14752 + 1;
              var tmp14791 = inst_14750;
              var tmp14792 = inst_14749;
              var tmp14793 = inst_14751;
              var inst_14749__$1 = tmp14792;
              var inst_14750__$1 = tmp14791;
              var inst_14751__$1 = tmp14793;
              var inst_14752__$1 = inst_14761;
              var state_14789__$1 = function() {
                var statearr_14794 = state_14789;
                statearr_14794[9] = inst_14760;
                statearr_14794[5] = inst_14750__$1;
                statearr_14794[6] = inst_14749__$1;
                statearr_14794[7] = inst_14751__$1;
                statearr_14794[8] = inst_14752__$1;
                return statearr_14794;
              }();
              var statearr_14795_14818 = state_14789__$1;
              statearr_14795_14818[2] = null;
              statearr_14795_14818[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14790 === 1) {
                var inst_14747 = cljs.core.range.call(null, worker_count);
                var inst_14748 = cljs.core.seq.call(null, inst_14747);
                var inst_14749 = inst_14748;
                var inst_14750 = null;
                var inst_14751 = 0;
                var inst_14752 = 0;
                var state_14789__$1 = function() {
                  var statearr_14796 = state_14789;
                  statearr_14796[5] = inst_14750;
                  statearr_14796[6] = inst_14749;
                  statearr_14796[7] = inst_14751;
                  statearr_14796[8] = inst_14752;
                  return statearr_14796;
                }();
                var statearr_14797_14819 = state_14789__$1;
                statearr_14797_14819[2] = null;
                statearr_14797_14819[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14790 === 4) {
                  var inst_14750 = state_14789[5];
                  var inst_14752 = state_14789[8];
                  var inst_14757 = cljs.core._nth.call(null, inst_14750, inst_14752);
                  var state_14789__$1 = function() {
                    var statearr_14798 = state_14789;
                    statearr_14798[10] = inst_14757;
                    return statearr_14798;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14789__$1, 7, servant_channel);
                } else {
                  if (state_val_14790 === 13) {
                    var inst_14780 = state_14789[2];
                    var state_14789__$1 = state_14789;
                    var statearr_14799_14820 = state_14789__$1;
                    statearr_14799_14820[2] = inst_14780;
                    statearr_14799_14820[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14790 === 6) {
                      var inst_14785 = state_14789[2];
                      var state_14789__$1 = state_14789;
                      var statearr_14800_14821 = state_14789__$1;
                      statearr_14800_14821[2] = inst_14785;
                      statearr_14800_14821[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14790 === 3) {
                        var inst_14787 = state_14789[2];
                        var state_14789__$1 = state_14789;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14789__$1, inst_14787);
                      } else {
                        if (state_val_14790 === 12) {
                          var inst_14764 = state_14789[11];
                          var inst_14773 = cljs.core.first.call(null, inst_14764);
                          var state_14789__$1 = function() {
                            var statearr_14801 = state_14789;
                            statearr_14801[12] = inst_14773;
                            return statearr_14801;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14789__$1, 14, servant_channel);
                        } else {
                          if (state_val_14790 === 2) {
                            var inst_14751 = state_14789[7];
                            var inst_14752 = state_14789[8];
                            var inst_14754 = inst_14752 < inst_14751;
                            var inst_14755 = inst_14754;
                            var state_14789__$1 = state_14789;
                            if (cljs.core.truth_(inst_14755)) {
                              var statearr_14802_14822 = state_14789__$1;
                              statearr_14802_14822[1] = 4;
                            } else {
                              var statearr_14803_14823 = state_14789__$1;
                              statearr_14803_14823[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14790 === 11) {
                              var inst_14764 = state_14789[11];
                              var inst_14768 = cljs.core.chunk_first.call(null, inst_14764);
                              var inst_14769 = cljs.core.chunk_rest.call(null, inst_14764);
                              var inst_14770 = cljs.core.count.call(null, inst_14768);
                              var inst_14749 = inst_14769;
                              var inst_14750 = inst_14768;
                              var inst_14751 = inst_14770;
                              var inst_14752 = 0;
                              var state_14789__$1 = function() {
                                var statearr_14804 = state_14789;
                                statearr_14804[5] = inst_14750;
                                statearr_14804[6] = inst_14749;
                                statearr_14804[7] = inst_14751;
                                statearr_14804[8] = inst_14752;
                                return statearr_14804;
                              }();
                              var statearr_14805_14824 = state_14789__$1;
                              statearr_14805_14824[2] = null;
                              statearr_14805_14824[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14790 === 9) {
                                var state_14789__$1 = state_14789;
                                var statearr_14806_14825 = state_14789__$1;
                                statearr_14806_14825[2] = null;
                                statearr_14806_14825[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14790 === 5) {
                                  var inst_14749 = state_14789[6];
                                  var inst_14764 = state_14789[11];
                                  var inst_14764__$1 = cljs.core.seq.call(null, inst_14749);
                                  var state_14789__$1 = function() {
                                    var statearr_14807 = state_14789;
                                    statearr_14807[11] = inst_14764__$1;
                                    return statearr_14807;
                                  }();
                                  if (inst_14764__$1) {
                                    var statearr_14808_14826 = state_14789__$1;
                                    statearr_14808_14826[1] = 8;
                                  } else {
                                    var statearr_14809_14827 = state_14789__$1;
                                    statearr_14809_14827[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14790 === 14) {
                                    var inst_14764 = state_14789[11];
                                    var inst_14775 = state_14789[2];
                                    var inst_14776 = inst_14775.terminate();
                                    var inst_14777 = cljs.core.next.call(null, inst_14764);
                                    var inst_14749 = inst_14777;
                                    var inst_14750 = null;
                                    var inst_14751 = 0;
                                    var inst_14752 = 0;
                                    var state_14789__$1 = function() {
                                      var statearr_14810 = state_14789;
                                      statearr_14810[5] = inst_14750;
                                      statearr_14810[6] = inst_14749;
                                      statearr_14810[13] = inst_14776;
                                      statearr_14810[7] = inst_14751;
                                      statearr_14810[8] = inst_14752;
                                      return statearr_14810;
                                    }();
                                    var statearr_14811_14828 = state_14789__$1;
                                    statearr_14811_14828[2] = null;
                                    statearr_14811_14828[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14790 === 10) {
                                      var inst_14783 = state_14789[2];
                                      var state_14789__$1 = state_14789;
                                      var statearr_14812_14829 = state_14789__$1;
                                      statearr_14812_14829[2] = inst_14783;
                                      statearr_14812_14829[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14790 === 8) {
                                        var inst_14764 = state_14789[11];
                                        var inst_14766 = cljs.core.chunked_seq_QMARK_.call(null, inst_14764);
                                        var state_14789__$1 = state_14789;
                                        if (inst_14766) {
                                          var statearr_14813_14830 = state_14789__$1;
                                          statearr_14813_14830[1] = 11;
                                        } else {
                                          var statearr_14814_14831 = state_14789__$1;
                                          statearr_14814_14831[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_14816 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14816[0] = state_machine__5698__auto__;
              statearr_14816[1] = 1;
              return statearr_14816;
            };
            var state_machine__5698__auto____1 = function(state_14789) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_14789);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_14789) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_14789);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_14817 = f__5711__auto__.call(null);
        statearr_14817[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_14817;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__14832_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__14832_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj14836 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj14836;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__14840 = args;
  var args__$1 = cljs.core.nth.call(null, vec__14840, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__14840, 1, null);
  return worker.postMessage(function() {
    var obj14842 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj14842;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__14846 = args;
  var args__$1 = cljs.core.nth.call(null, vec__14846, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__14846, 1, null);
  return worker.postMessage(function() {
    var obj14848 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj14848;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__5710__auto___14900 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14900, out_channel) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14900, out_channel) {
            return function(state_14882) {
              var state_val_14883 = state_14882[1];
              if (state_val_14883 === 2) {
                var inst_14876 = state_14882[2];
                var inst_14877 = cljs.core.pr_str.call(null, fn_key);
                var inst_14878 = post_message_fn.call(null, inst_14876, inst_14877, args);
                var inst_14879 = function() {
                  var worker = inst_14876;
                  return function(worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel) {
                    return function(p1__14849_SHARP_) {
                      var c__5710__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel) {
                        return function() {
                          var f__5711__auto__ = function() {
                            var switch__5697__auto__ = function(c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel) {
                              return function(state_14890) {
                                var state_val_14891 = state_14890[1];
                                if (state_val_14891 === 3) {
                                  var inst_14888 = state_14890[2];
                                  var state_14890__$1 = state_14890;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14890__$1, inst_14888);
                                } else {
                                  if (state_val_14891 === 2) {
                                    var inst_14886 = state_14890[2];
                                    var state_14890__$1 = function() {
                                      var statearr_14892 = state_14890;
                                      statearr_14892[5] = inst_14886;
                                      return statearr_14892;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14890__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_14891 === 1) {
                                      var inst_14884 = p1__14849_SHARP_.data;
                                      var state_14890__$1 = state_14890;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14890__$1, 2, out_channel, inst_14884);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel);
                            return function(switch__5697__auto__, c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel) {
                              return function() {
                                var state_machine__5698__auto__ = null;
                                var state_machine__5698__auto____0 = function() {
                                  var statearr_14894 = [null, null, null, null, null, null];
                                  statearr_14894[0] = state_machine__5698__auto__;
                                  statearr_14894[1] = 1;
                                  return statearr_14894;
                                };
                                var state_machine__5698__auto____1 = function(state_14890) {
                                  while (true) {
                                    var result__5699__auto__ = switch__5697__auto__.call(null, state_14890);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5699__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5698__auto__ = function(state_14890) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5698__auto____0.call(this);
                                    case 1:
                                      return state_machine__5698__auto____1.call(this, state_14890);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
                                return state_machine__5698__auto__;
                              }();
                            }(switch__5697__auto__, c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel);
                          }();
                          var state__5712__auto__ = function() {
                            var statearr_14895 = f__5711__auto__.call(null);
                            statearr_14895[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto____$1;
                            return statearr_14895;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
                        };
                      }(c__5710__auto____$1, worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel));
                      return c__5710__auto____$1;
                    };
                  }(worker, inst_14876, inst_14877, inst_14878, state_val_14883, c__5710__auto___14900, out_channel);
                }();
                var inst_14880 = inst_14876.addEventListener("message", inst_14879);
                var state_14882__$1 = function() {
                  var statearr_14896 = state_14882;
                  statearr_14896[5] = inst_14878;
                  return statearr_14896;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14882__$1, inst_14880);
              } else {
                if (state_val_14883 === 1) {
                  var state_14882__$1 = state_14882;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14882__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__5710__auto___14900, out_channel);
          return function(switch__5697__auto__, c__5710__auto___14900, out_channel) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14898 = [null, null, null, null, null, null];
                statearr_14898[0] = state_machine__5698__auto__;
                statearr_14898[1] = 1;
                return statearr_14898;
              };
              var state_machine__5698__auto____1 = function(state_14882) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14882);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14882) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14882);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14900, out_channel);
        }();
        var state__5712__auto__ = function() {
          var statearr_14899 = f__5711__auto__.call(null);
          statearr_14899[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14900;
          return statearr_14899;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14900, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__14901) {
    var servant_channel = cljs.core.first(arglist__14901);
    arglist__14901 = cljs.core.next(arglist__14901);
    var post_message_fn = cljs.core.first(arglist__14901);
    arglist__14901 = cljs.core.next(arglist__14901);
    var fn_key = cljs.core.first(arglist__14901);
    var args = cljs.core.rest(arglist__14901);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__14902) {
    var servant_channel = cljs.core.first(arglist__14902);
    arglist__14902 = cljs.core.next(arglist__14902);
    var post_message_fn = cljs.core.first(arglist__14902);
    arglist__14902 = cljs.core.next(arglist__14902);
    var f = cljs.core.first(arglist__14902);
    var args = cljs.core.rest(arglist__14902);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
mining.hashmine = cljs.core.async.chan.call(null);
mining.hashmine.type = "workerch";
console.log("this runs in the browser");
mining.worker_count = 2;
mining.worker_script = "wrkr.js";
mining.servant_channel = servant.core.spawn_servants.call(null, mining.worker_count, mining.worker_script);
mining.mine = function mine(rootHash) {
  logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  mining.chann = servant.core.servant_thread.call(null, mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10423) {
            var state_val_10424 = state_10423[1];
            if (state_val_10424 === 2) {
              var inst_10417 = state_10423[2];
              var inst_10418 = mining.v = inst_10417;
              var inst_10419 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", mining.v);
              var inst_10420 = JSON.parse(mining.v);
              var inst_10421 = pubsub.pub.call(null, "blockMined", inst_10420);
              var state_10423__$1 = function() {
                var statearr_10425 = state_10423;
                statearr_10425[5] = inst_10418;
                statearr_10425[6] = inst_10419;
                return statearr_10425;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10423__$1, inst_10421);
            } else {
              if (state_val_10424 === 1) {
                var inst_10415 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_10423__$1 = function() {
                  var statearr_10426 = state_10423;
                  statearr_10426[7] = inst_10415;
                  return statearr_10426;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10423__$1, 2, mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10428 = [null, null, null, null, null, null, null, null];
              statearr_10428[0] = state_machine__5728__auto__;
              statearr_10428[1] = 1;
              return statearr_10428;
            };
            var state_machine__5728__auto____1 = function(state_10423) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10423);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10423) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10423);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10429 = f__5741__auto__.call(null);
        statearr_10429[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10429;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj12080 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":false};
  return obj12080;
}();
goog.provide("servantWorkers");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.core.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("database");
goog.require("cljs.core");
goog.require("pouchDB");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pouchDB");
goog.require("crypto");
goog.require("logger");
goog.require("logger");
database.onDatabaseChange = cljs.core.async.chan.call(null);
database.onDatabaseChange.type = "databaseChange";
database.update = function update(k, f) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11289) {
            var state_val_11290 = state_11289[1];
            if (state_val_11290 === 5) {
              var inst_11287 = state_11289[2];
              var state_11289__$1 = function() {
                var statearr_11291 = state_11289;
                statearr_11291[5] = inst_11287;
                return statearr_11291;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11289__$1, database.r);
            } else {
              if (state_val_11290 === 4) {
                var state_11289__$1 = state_11289;
                var statearr_11292_11305 = state_11289__$1;
                statearr_11292_11305[2] = database.r;
                statearr_11292_11305[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11290 === 3) {
                  var inst_11284 = database.r.val;
                  var state_11289__$1 = state_11289;
                  var statearr_11293_11306 = state_11289__$1;
                  statearr_11293_11306[2] = inst_11284;
                  statearr_11293_11306[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11290 === 2) {
                    var inst_11279 = state_11289[2];
                    var inst_11280 = database.r = inst_11279;
                    var inst_11281 = "got from db " + k;
                    var inst_11282 = logger.og.call(null, new cljs.core.Keyword(null, "db", "db", 993250759), inst_11281, database.r);
                    var state_11289__$1 = function() {
                      var statearr_11294 = state_11289;
                      statearr_11294[6] = inst_11280;
                      statearr_11294[7] = inst_11282;
                      return statearr_11294;
                    }();
                    if (cljs.core.truth_(database.r)) {
                      var statearr_11295_11307 = state_11289__$1;
                      statearr_11295_11307[1] = 3;
                    } else {
                      var statearr_11296_11308 = state_11289__$1;
                      statearr_11296_11308[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11290 === 1) {
                      var inst_11273 = cljs.core.async.chan.call(null);
                      var inst_11274 = function() {
                        var c = inst_11273;
                        return function(c, inst_11273, state_val_11290, c__5740__auto__) {
                          return function(err, v) {
                            logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update ", v);
                            logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update err ", err);
                            if (cljs.core.truth_(v)) {
                              logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "rev ", v._rev);
                              return pouchDB.dbase.put(function() {
                                var obj11298 = {"val":f.call(null, v.val)};
                                return obj11298;
                              }(), k, v._rev, function(c, inst_11273, state_val_11290, c__5740__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_11273, state_val_11290, c__5740__auto__));
                            } else {
                              return pouchDB.dbase.put(function() {
                                var obj11300 = {"val":f.call(null, v)};
                                return obj11300;
                              }(), k, function(c, inst_11273, state_val_11290, c__5740__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_11273, state_val_11290, c__5740__auto__));
                            }
                          };
                        }(c, inst_11273, state_val_11290, c__5740__auto__);
                      }();
                      var inst_11275 = database.sf = inst_11274;
                      var inst_11276 = pouchDB.dbase.get(k, database.sf);
                      var inst_11277 = database.g.call(null, k);
                      var state_11289__$1 = function() {
                        var statearr_11301 = state_11289;
                        statearr_11301[8] = inst_11275;
                        statearr_11301[9] = inst_11276;
                        return statearr_11301;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11289__$1, 2, inst_11277);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11303 = [null, null, null, null, null, null, null, null, null, null];
              statearr_11303[0] = state_machine__5728__auto__;
              statearr_11303[1] = 1;
              return statearr_11303;
            };
            var state_machine__5728__auto____1 = function(state_11289) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11289);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11289) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11289);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11304 = f__5741__auto__.call(null);
        statearr_11304[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11304;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
database.g = function g(k) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), "getting from db ", k);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11353) {
            var state_val_11354 = state_11353[1];
            if (state_val_11354 === 5) {
              var inst_11351 = state_11353[2];
              var state_11353__$1 = state_11353;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11353__$1, inst_11351);
            } else {
              if (state_val_11354 === 4) {
                var state_11353__$1 = state_11353;
                var statearr_11355_11364 = state_11353__$1;
                statearr_11355_11364[2] = database.r;
                statearr_11355_11364[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11354 === 3) {
                  var inst_11348 = database.r.val;
                  var state_11353__$1 = state_11353;
                  var statearr_11356_11365 = state_11353__$1;
                  statearr_11356_11365[2] = inst_11348;
                  statearr_11356_11365[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11354 === 2) {
                    var inst_11343 = state_11353[2];
                    var inst_11344 = database.r = inst_11343;
                    var inst_11345 = "got from db " + k;
                    var inst_11346 = logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), inst_11345, database.r);
                    var state_11353__$1 = function() {
                      var statearr_11357 = state_11353;
                      statearr_11357[5] = inst_11344;
                      statearr_11357[6] = inst_11346;
                      return statearr_11357;
                    }();
                    if (cljs.core.truth_(database.r)) {
                      var statearr_11358_11366 = state_11353__$1;
                      statearr_11358_11366[1] = 3;
                    } else {
                      var statearr_11359_11367 = state_11353__$1;
                      statearr_11359_11367[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11354 === 1) {
                      var inst_11337 = cljs.core.async.chan.call(null);
                      var inst_11338 = pouchDB.dbase.get(k);
                      var inst_11339 = function() {
                        var c = inst_11337;
                        return function(c, inst_11337, inst_11338, state_val_11354, c__5740__auto__) {
                          return function(p1__11309_SHARP_) {
                            return cljs.core.async.put_BANG_.call(null, c, p1__11309_SHARP_);
                          };
                        }(c, inst_11337, inst_11338, state_val_11354, c__5740__auto__);
                      }();
                      var inst_11340 = function() {
                        var c = inst_11337;
                        return function(c, inst_11337, inst_11338, inst_11339, state_val_11354, c__5740__auto__) {
                          return function() {
                            return cljs.core.async.put_BANG_.call(null, c, false);
                          };
                        }(c, inst_11337, inst_11338, inst_11339, state_val_11354, c__5740__auto__);
                      }();
                      var inst_11341 = inst_11338.then(inst_11339, inst_11340);
                      var state_11353__$1 = function() {
                        var statearr_11360 = state_11353;
                        statearr_11360[7] = inst_11341;
                        return statearr_11360;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11353__$1, 2, inst_11337);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11362 = [null, null, null, null, null, null, null, null];
              statearr_11362[0] = state_machine__5728__auto__;
              statearr_11362[1] = 1;
              return statearr_11362;
            };
            var state_machine__5728__auto____1 = function(state_11353) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11353);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11353) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11353);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11363 = f__5741__auto__.call(null);
        statearr_11363[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11363;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
database.ps = function ps(key, v) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11405) {
            var state_val_11406 = state_11405[1];
            if (state_val_11406 === 2) {
              var inst_11402 = state_11405[2];
              var inst_11403 = logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "just done put s ");
              var state_11405__$1 = function() {
                var statearr_11407 = state_11405;
                statearr_11407[5] = inst_11402;
                statearr_11407[6] = inst_11403;
                return statearr_11407;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11405__$1, 1);
            } else {
              if (state_val_11406 === 1) {
                var inst_11390 = cljs.core.async.chan.call(null);
                var inst_11391 = database.c = inst_11390;
                var inst_11392 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_11393 = [key, v];
                var inst_11394 = new cljs.core.PersistentVector(null, 2, 5, inst_11392, inst_11393, null);
                var inst_11395 = logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", inst_11394);
                var inst_11398 = {"_id":key, "val":v};
                var inst_11399 = function() {
                  return function(inst_11390, inst_11391, inst_11392, inst_11393, inst_11394, inst_11395, inst_11398, state_val_11406, c__5740__auto__) {
                    return function() {
                      return cljs.core.async.put_BANG_.call(null, database.c, 1);
                    };
                  }(inst_11390, inst_11391, inst_11392, inst_11393, inst_11394, inst_11395, inst_11398, state_val_11406, c__5740__auto__);
                }();
                var inst_11400 = pouchDB.dbase.put(inst_11398, inst_11399);
                var state_11405__$1 = function() {
                  var statearr_11408 = state_11405;
                  statearr_11408[7] = inst_11400;
                  statearr_11408[8] = inst_11391;
                  statearr_11408[9] = inst_11395;
                  return statearr_11408;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11405__$1, 2, database.c);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11410 = [null, null, null, null, null, null, null, null, null, null];
              statearr_11410[0] = state_machine__5728__auto__;
              statearr_11410[1] = 1;
              return statearr_11410;
            };
            var state_machine__5728__auto____1 = function(state_11405) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11405);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11405) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11405);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11411 = f__5741__auto__.call(null);
        statearr_11411[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11411;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
database.p = function p(key, v) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, v], null));
  return pouchDB.dbase.put(function() {
    var obj11415 = {"_id":key, "val":v};
    return obj11415;
  }());
};
goog.provide("intercomMake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
intercomMake.makeInv = function makeInv(typ, message) {
  var obj12088 = {"type":"json", "data":JSON.stringify(function() {
    var obj12090 = {"type":"inv", "data":function() {
      var obj12092 = {"type":typ, "vector":message};
      return obj12092;
    }()};
    return obj12090;
  }())};
  return obj12088;
};
intercomMake.makeData = function makeData(typ, message) {
  return null;
};
intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercomMake.makeVersion = function makeVersion(message) {
  var obj12096 = {"type":"version", "data":message};
  return obj12096;
};
intercomMake.makeConn = function makeConn(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj12100 = {"type":"conn", "data":conn};
  return obj12100;
};
intercomMake.makeGetBlock = function makeGetBlock(hash) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_12206) {
            var state_val_12207 = state_12206[1];
            if (state_val_12207 === 7) {
              var state_12206__$1 = state_12206;
              var statearr_12208_12227 = state_12206__$1;
              statearr_12208_12227[2] = null;
              statearr_12208_12227[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12207 === 1) {
                var inst_12166 = [];
                var inst_12167 = {"count":0, "blocks":inst_12166};
                var inst_12168 = inst_12167[intercomMake.hash_stop] = 0;
                var inst_12169 = intercomMake.gtBlock = inst_12167;
                var inst_12170 = app.blockchain.blockchainHeight.call(null, 1);
                var state_12206__$1 = function() {
                  var statearr_12209 = state_12206;
                  statearr_12209[5] = inst_12168;
                  statearr_12209[6] = inst_12169;
                  return statearr_12209;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12206__$1, 2, inst_12170);
              } else {
                if (state_val_12207 === 4) {
                  var inst_12204 = state_12206[2];
                  var state_12206__$1 = function() {
                    var statearr_12210 = state_12206;
                    statearr_12210[7] = inst_12204;
                    return statearr_12210;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12206__$1, intercomMake.gtBlock);
                } else {
                  if (state_val_12207 === 6) {
                    var inst_12175 = state_12206[8];
                    var inst_12191 = inst_12175 < 10;
                    var state_12206__$1 = state_12206;
                    if (cljs.core.truth_(inst_12191)) {
                      var statearr_12211_12228 = state_12206__$1;
                      statearr_12211_12228[1] = 9;
                    } else {
                      var statearr_12212_12229 = state_12206__$1;
                      statearr_12212_12229[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12207 === 3) {
                      var inst_12174 = state_12206[9];
                      var inst_12175 = state_12206[8];
                      var inst_12177 = "new loop " + inst_12174;
                      var inst_12178 = inst_12177 + " ";
                      var inst_12179 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_12178, inst_12175);
                      var inst_12180 = "b" + inst_12174;
                      var inst_12181 = database.g.call(null, inst_12180);
                      var state_12206__$1 = function() {
                        var statearr_12213 = state_12206;
                        statearr_12213[10] = inst_12179;
                        return statearr_12213;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12206__$1, 5, inst_12181);
                    } else {
                      if (state_val_12207 === 2) {
                        var inst_12172 = state_12206[2];
                        var inst_12173 = intercomMake.heightForBlock = inst_12172;
                        var inst_12174 = intercomMake.heightForBlock;
                        var inst_12175 = 0;
                        var state_12206__$1 = function() {
                          var statearr_12214 = state_12206;
                          statearr_12214[11] = inst_12173;
                          statearr_12214[9] = inst_12174;
                          statearr_12214[8] = inst_12175;
                          return statearr_12214;
                        }();
                        var statearr_12215_12230 = state_12206__$1;
                        statearr_12215_12230[2] = null;
                        statearr_12215_12230[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12207 === 11) {
                          var inst_12175 = state_12206[8];
                          var inst_12197 = state_12206[2];
                          var inst_12198 = inst_12175 + 1;
                          var inst_12174 = inst_12197;
                          var inst_12175__$1 = inst_12198;
                          var state_12206__$1 = function() {
                            var statearr_12216 = state_12206;
                            statearr_12216[9] = inst_12174;
                            statearr_12216[8] = inst_12175__$1;
                            return statearr_12216;
                          }();
                          var statearr_12217_12231 = state_12206__$1;
                          statearr_12217_12231[2] = null;
                          statearr_12217_12231[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12207 === 9) {
                            var inst_12174 = state_12206[9];
                            var inst_12193 = inst_12174 - 1;
                            var state_12206__$1 = state_12206;
                            var statearr_12218_12232 = state_12206__$1;
                            statearr_12218_12232[2] = inst_12193;
                            statearr_12218_12232[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12207 === 5) {
                              var inst_12174 = state_12206[9];
                              var inst_12183 = state_12206[2];
                              var inst_12184 = intercomMake.blockg = inst_12183;
                              var inst_12185 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_12186 = intercomMake.gtBlock.count = inst_12174;
                              var inst_12187 = intercomMake.gtBlock.blocks;
                              var inst_12188 = inst_12187.push(intercomMake.blockg);
                              var inst_12189 = 0 < inst_12174;
                              var state_12206__$1 = function() {
                                var statearr_12219 = state_12206;
                                statearr_12219[12] = inst_12186;
                                statearr_12219[13] = inst_12185;
                                statearr_12219[14] = inst_12188;
                                statearr_12219[15] = inst_12184;
                                return statearr_12219;
                              }();
                              if (cljs.core.truth_(inst_12189)) {
                                var statearr_12220_12233 = state_12206__$1;
                                statearr_12220_12233[1] = 6;
                              } else {
                                var statearr_12221_12234 = state_12206__$1;
                                statearr_12221_12234[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12207 === 10) {
                                var inst_12174 = state_12206[9];
                                var inst_12195 = cljs.core.quot.call(null, inst_12174, 2);
                                var state_12206__$1 = state_12206;
                                var statearr_12222_12235 = state_12206__$1;
                                statearr_12222_12235[2] = inst_12195;
                                statearr_12222_12235[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12207 === 8) {
                                  var inst_12202 = state_12206[2];
                                  var state_12206__$1 = state_12206;
                                  var statearr_12223_12236 = state_12206__$1;
                                  statearr_12223_12236[2] = inst_12202;
                                  statearr_12223_12236[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12225 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12225[0] = state_machine__5728__auto__;
              statearr_12225[1] = 1;
              return statearr_12225;
            };
            var state_machine__5728__auto____1 = function(state_12206) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12206);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12206) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12206);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12226 = f__5741__auto__.call(null);
        statearr_12226[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12226;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
goog.provide("blockchain");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("database");
goog.require("database");
goog.require("crypto");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
blockchain.memPool = [];
blockchain.blockhainInfo = function() {
  var obj10700 = {};
  return obj10700;
}();
blockchain.blockhainInfo.dificulty = 5;
blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  blockchain.memPool.push(x);
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", blockchain.memPool);
};
blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  blockchain.memPool.splice(blockchain.memPool.indexOf(x));
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", blockchain.memPool);
};
blockchain.makeBlockHeader = function makeBlockHeader(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj10704 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj10704;
};
blockchain.makeTransaction = function makeTransaction() {
  var obj10708 = {"":1};
  return obj10708;
};
blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj10712 = {"":1};
  return obj10712;
};
blockchain.prevblk = function prevblk(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk);
  return blockk.header.previous;
};
blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10790) {
            var state_val_10791 = state_10790[1];
            if (state_val_10791 === 7) {
              var inst_10784 = state_10790[2];
              var inst_10785 = blockchain.res = inst_10784;
              var state_10790__$1 = function() {
                var statearr_10792 = state_10790;
                statearr_10792[5] = inst_10785;
                return statearr_10792;
              }();
              var statearr_10793_10813 = state_10790__$1;
              statearr_10793_10813[2] = blockchain.res;
              statearr_10793_10813[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10791 === 1) {
                var state_10790__$1 = state_10790;
                if (cljs.core.truth_(blockk)) {
                  var statearr_10794_10814 = state_10790__$1;
                  statearr_10794_10814[1] = 2;
                } else {
                  var statearr_10795_10815 = state_10790__$1;
                  statearr_10795_10815[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10791 === 4) {
                  var inst_10788 = state_10790[2];
                  var state_10790__$1 = state_10790;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10790__$1, inst_10788);
                } else {
                  if (state_val_10791 === 15) {
                    var inst_10782 = state_10790[2];
                    var state_10790__$1 = state_10790;
                    var statearr_10796_10816 = state_10790__$1;
                    statearr_10796_10816[2] = inst_10782;
                    statearr_10796_10816[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10791 === 13) {
                      var state_10790__$1 = state_10790;
                      var statearr_10797_10817 = state_10790__$1;
                      statearr_10797_10817[2] = true;
                      statearr_10797_10817[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10791 === 6) {
                        var inst_10776 = database.g.call(null, blockk);
                        var state_10790__$1 = state_10790;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10790__$1, 12, inst_10776);
                      } else {
                        if (state_val_10791 === 3) {
                          var state_10790__$1 = state_10790;
                          var statearr_10798_10818 = state_10790__$1;
                          statearr_10798_10818[2] = false;
                          statearr_10798_10818[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10791 === 12) {
                            var inst_10778 = state_10790[2];
                            var state_10790__$1 = state_10790;
                            if (cljs.core.truth_(inst_10778)) {
                              var statearr_10799_10819 = state_10790__$1;
                              statearr_10799_10819[1] = 13;
                            } else {
                              var statearr_10800_10820 = state_10790__$1;
                              statearr_10800_10820[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10791 === 2) {
                              var inst_10764 = logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_10765 = blockk.hash;
                              var state_10790__$1 = function() {
                                var statearr_10801 = state_10790;
                                statearr_10801[6] = inst_10764;
                                return statearr_10801;
                              }();
                              if (cljs.core.truth_(inst_10765)) {
                                var statearr_10802_10821 = state_10790__$1;
                                statearr_10802_10821[1] = 5;
                              } else {
                                var statearr_10803_10822 = state_10790__$1;
                                statearr_10803_10822[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10791 === 11) {
                                var inst_10774 = state_10790[2];
                                var state_10790__$1 = state_10790;
                                var statearr_10804_10823 = state_10790__$1;
                                statearr_10804_10823[2] = inst_10774;
                                statearr_10804_10823[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10791 === 9) {
                                  var state_10790__$1 = state_10790;
                                  var statearr_10805_10824 = state_10790__$1;
                                  statearr_10805_10824[2] = true;
                                  statearr_10805_10824[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10791 === 5) {
                                    var inst_10767 = blockk.hash;
                                    var inst_10768 = database.g.call(null, inst_10767);
                                    var state_10790__$1 = state_10790;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10790__$1, 8, inst_10768);
                                  } else {
                                    if (state_val_10791 === 14) {
                                      var state_10790__$1 = state_10790;
                                      var statearr_10806_10825 = state_10790__$1;
                                      statearr_10806_10825[2] = false;
                                      statearr_10806_10825[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10791 === 10) {
                                        var state_10790__$1 = state_10790;
                                        var statearr_10807_10826 = state_10790__$1;
                                        statearr_10807_10826[2] = false;
                                        statearr_10807_10826[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10791 === 8) {
                                          var inst_10770 = state_10790[2];
                                          var state_10790__$1 = state_10790;
                                          if (cljs.core.truth_(inst_10770)) {
                                            var statearr_10808_10827 = state_10790__$1;
                                            statearr_10808_10827[1] = 9;
                                          } else {
                                            var statearr_10809_10828 = state_10790__$1;
                                            statearr_10809_10828[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10811 = [null, null, null, null, null, null, null];
              statearr_10811[0] = state_machine__5728__auto__;
              statearr_10811[1] = 1;
              return statearr_10811;
            };
            var state_machine__5728__auto____1 = function(state_10790) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10790);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10790) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10790);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10812 = f__5741__auto__.call(null);
        statearr_10812[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10812;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10915) {
            var state_val_10916 = state_10915[1];
            if (state_val_10916 === 7) {
              var state_10915__$1 = state_10915;
              var statearr_10917_10935 = state_10915__$1;
              statearr_10917_10935[2] = true;
              statearr_10917_10935[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10916 === 1) {
                var inst_10882 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_10883 = database.g.call(null, "last");
                var state_10915__$1 = function() {
                  var statearr_10918 = state_10915;
                  statearr_10918[5] = inst_10882;
                  return statearr_10918;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10915__$1, 2, inst_10883);
              } else {
                if (state_val_10916 === 4) {
                  var inst_10901 = database.g.call(null, blockk);
                  var state_10915__$1 = state_10915;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10915__$1, 10, inst_10901);
                } else {
                  if (state_val_10916 === 13) {
                    var inst_10910 = state_10915[2];
                    var state_10915__$1 = state_10915;
                    var statearr_10919_10936 = state_10915__$1;
                    statearr_10919_10936[2] = inst_10910;
                    statearr_10919_10936[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10916 === 6) {
                      var inst_10892 = state_10915[2];
                      var inst_10893 = inst_10892.hash;
                      var inst_10894 = blockchain.block.hash;
                      var inst_10895 = inst_10893 === inst_10894;
                      var state_10915__$1 = state_10915;
                      if (cljs.core.truth_(inst_10895)) {
                        var statearr_10920_10937 = state_10915__$1;
                        statearr_10920_10937[1] = 7;
                      } else {
                        var statearr_10921_10938 = state_10915__$1;
                        statearr_10921_10938[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10916 === 3) {
                        var inst_10889 = blockk.hash;
                        var inst_10890 = database.g.call(null, inst_10889);
                        var state_10915__$1 = state_10915;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10915__$1, 6, inst_10890);
                      } else {
                        if (state_val_10916 === 12) {
                          var state_10915__$1 = state_10915;
                          var statearr_10922_10939 = state_10915__$1;
                          statearr_10922_10939[2] = false;
                          statearr_10922_10939[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10916 === 2) {
                            var inst_10885 = state_10915[2];
                            var inst_10886 = blockchain.lastt = inst_10885;
                            var inst_10887 = blockk.hash;
                            var state_10915__$1 = function() {
                              var statearr_10923 = state_10915;
                              statearr_10923[6] = inst_10886;
                              return statearr_10923;
                            }();
                            if (cljs.core.truth_(inst_10887)) {
                              var statearr_10924_10940 = state_10915__$1;
                              statearr_10924_10940[1] = 3;
                            } else {
                              var statearr_10925_10941 = state_10915__$1;
                              statearr_10925_10941[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10916 === 11) {
                              var state_10915__$1 = state_10915;
                              var statearr_10926_10942 = state_10915__$1;
                              statearr_10926_10942[2] = true;
                              statearr_10926_10942[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10916 === 9) {
                                var inst_10899 = state_10915[2];
                                var state_10915__$1 = state_10915;
                                var statearr_10927_10943 = state_10915__$1;
                                statearr_10927_10943[2] = inst_10899;
                                statearr_10927_10943[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10916 === 5) {
                                  var inst_10912 = state_10915[2];
                                  var inst_10913 = blockchain.res = inst_10912;
                                  var state_10915__$1 = function() {
                                    var statearr_10928 = state_10915;
                                    statearr_10928[7] = inst_10913;
                                    return statearr_10928;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10915__$1, blockchain.res);
                                } else {
                                  if (state_val_10916 === 10) {
                                    var inst_10903 = state_10915[2];
                                    var inst_10904 = inst_10903.hash;
                                    var inst_10905 = blockchain.block.hash;
                                    var inst_10906 = inst_10904 === inst_10905;
                                    var state_10915__$1 = state_10915;
                                    if (cljs.core.truth_(inst_10906)) {
                                      var statearr_10929_10944 = state_10915__$1;
                                      statearr_10929_10944[1] = 11;
                                    } else {
                                      var statearr_10930_10945 = state_10915__$1;
                                      statearr_10930_10945[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10916 === 8) {
                                      var state_10915__$1 = state_10915;
                                      var statearr_10931_10946 = state_10915__$1;
                                      statearr_10931_10946[2] = false;
                                      statearr_10931_10946[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10933 = [null, null, null, null, null, null, null, null];
              statearr_10933[0] = state_machine__5728__auto__;
              statearr_10933[1] = 1;
              return statearr_10933;
            };
            var state_machine__5728__auto____1 = function(state_10915) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10915);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10915) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10915);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10934 = f__5741__auto__.call(null);
        statearr_10934[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10934;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.heightFromBlock = function heightFromBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
blockchain.makeBlock = function makeBlock(work) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "about to make block ", work);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11017) {
            var state_val_11018 = state_11017[1];
            if (state_val_11018 === 4) {
              var inst_11012 = state_11017[2];
              var inst_11013 = {"header":blockchain.blockHeader, "hash":inst_11012, "transactions":blockchain.transactions};
              var inst_11014 = blockchain.blockk = inst_11013;
              var inst_11015 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "newly made block ", blockchain.blockk);
              var state_11017__$1 = function() {
                var statearr_11019 = state_11017;
                statearr_11019[5] = inst_11014;
                statearr_11019[6] = inst_11015;
                return statearr_11019;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11017__$1, blockchain.blockk);
            } else {
              if (state_val_11018 === 3) {
                var inst_10993 = state_11017[2];
                var inst_10994 = blockchain.transactions = inst_10993;
                var inst_10995 = blockchain.lastv = blockchain.lastt2;
                var inst_10996 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastv);
                var inst_10997 = blockchain.lastv.hash;
                var inst_10998 = work.root;
                var inst_10999 = new Date;
                var inst_11000 = inst_10999.getTime();
                var inst_11001 = blockchain.blockhainInfo.dificulty;
                var inst_11002 = work.nonce;
                var inst_11003 = blockchain.transactions.lenght;
                var inst_11004 = blockchain.makeBlockHeader.call(null, "0", inst_10997, inst_10998, inst_11000, inst_11001, inst_11002, inst_11003);
                var inst_11005 = blockchain.blockHeader = inst_11004;
                var inst_11006 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "block header ", blockchain.blockHeader);
                var inst_11007 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "transactions when saving block ", blockchain.transactions);
                var inst_11010 = crypto.bHash.call(null, blockchain.blockHeader);
                var state_11017__$1 = function() {
                  var statearr_11020 = state_11017;
                  statearr_11020[7] = inst_10996;
                  statearr_11020[8] = inst_10994;
                  statearr_11020[9] = inst_10995;
                  statearr_11020[10] = inst_11005;
                  statearr_11020[11] = inst_11007;
                  statearr_11020[12] = inst_11006;
                  return statearr_11020;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11017__$1, 4, inst_11010);
              } else {
                if (state_val_11018 === 2) {
                  var inst_10988 = state_11017[2];
                  var inst_10989 = blockchain.lastt2 = inst_10988;
                  var inst_10990 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastt2);
                  var inst_10991 = database.g.call(null, "txs");
                  var state_11017__$1 = function() {
                    var statearr_11021 = state_11017;
                    statearr_11021[13] = inst_10989;
                    statearr_11021[14] = inst_10990;
                    return statearr_11021;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11017__$1, 3, inst_10991);
                } else {
                  if (state_val_11018 === 1) {
                    var inst_10986 = database.g.call(null, "last");
                    var state_11017__$1 = state_11017;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11017__$1, 2, inst_10986);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11023 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11023[0] = state_machine__5728__auto__;
              statearr_11023[1] = 1;
              return statearr_11023;
            };
            var state_machine__5728__auto____1 = function(state_11017) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11017);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11017) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11017);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11024 = f__5741__auto__.call(null);
        statearr_11024[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11024;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.saveBlock = function saveBlock(dbase, blockR) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11071) {
            var state_val_11072 = state_11071[1];
            if (state_val_11072 === 4) {
              var inst_11069 = state_11071[2];
              var state_11071__$1 = state_11071;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11071__$1, inst_11069);
            } else {
              if (state_val_11072 === 3) {
                var inst_11065 = state_11071[2];
                var inst_11066 = "b" + blockchain.heightForBlock;
                var inst_11067 = database.ps.call(null, inst_11066, blockR);
                var state_11071__$1 = function() {
                  var statearr_11073 = state_11071;
                  statearr_11073[5] = inst_11065;
                  return statearr_11073;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11071__$1, 4, inst_11067);
              } else {
                if (state_val_11072 === 2) {
                  var inst_11055 = state_11071[2];
                  var inst_11056 = blockchain.heightForBlock = inst_11055;
                  var inst_11057 = blockR.header;
                  var inst_11058 = inst_11057.heightFromRoot = blockchain.heightForBlock;
                  var inst_11059 = function() {
                    return function(inst_11055, inst_11056, inst_11057, inst_11058, state_val_11072, c__5740__auto__) {
                      return function() {
                        return blockR;
                      };
                    }(inst_11055, inst_11056, inst_11057, inst_11058, state_val_11072, c__5740__auto__);
                  }();
                  var inst_11060 = blockchain.a = inst_11059;
                  var inst_11061 = database.update.call(null, "last", blockchain.a);
                  var inst_11062 = blockR.hash;
                  var inst_11063 = database.ps.call(null, inst_11062, blockR);
                  var state_11071__$1 = function() {
                    var statearr_11074 = state_11071;
                    statearr_11074[6] = inst_11058;
                    statearr_11074[7] = inst_11056;
                    statearr_11074[8] = inst_11060;
                    statearr_11074[9] = inst_11061;
                    return statearr_11074;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11071__$1, 3, inst_11063);
                } else {
                  if (state_val_11072 === 1) {
                    var inst_11052 = logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                    var inst_11053 = blockchain.blockchainHeight.call(null, 1);
                    var state_11071__$1 = function() {
                      var statearr_11075 = state_11071;
                      statearr_11075[10] = inst_11052;
                      return statearr_11075;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11071__$1, 2, inst_11053);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11077 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11077[0] = state_machine__5728__auto__;
              statearr_11077[1] = 1;
              return statearr_11077;
            };
            var state_machine__5728__auto____1 = function(state_11071) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11071);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11071) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11071);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11078 = f__5741__auto__.call(null);
        statearr_11078[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11078;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.addToChain = function addToChain(schain) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11158) {
            var state_val_11159 = state_11158[1];
            if (state_val_11159 === 7) {
              var inst_11130 = state_11158[5];
              var inst_11144 = state_11158[2];
              var inst_11145 = schain.length;
              var inst_11146 = inst_11130 < inst_11145;
              var state_11158__$1 = function() {
                var statearr_11160 = state_11158;
                statearr_11160[6] = inst_11144;
                return statearr_11160;
              }();
              if (cljs.core.truth_(inst_11146)) {
                var statearr_11161_11179 = state_11158__$1;
                statearr_11161_11179[1] = 8;
              } else {
                var statearr_11162_11180 = state_11158__$1;
                statearr_11162_11180[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11159 === 1) {
                var inst_11129 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_11130 = 0;
                var state_11158__$1 = function() {
                  var statearr_11163 = state_11158;
                  statearr_11163[7] = inst_11129;
                  statearr_11163[5] = inst_11130;
                  return statearr_11163;
                }();
                var statearr_11164_11181 = state_11158__$1;
                statearr_11164_11181[2] = null;
                statearr_11164_11181[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11159 === 4) {
                  var inst_11137 = state_11158[2];
                  var state_11158__$1 = state_11158;
                  if (cljs.core.truth_(inst_11137)) {
                    var statearr_11165_11182 = state_11158__$1;
                    statearr_11165_11182[1] = 5;
                  } else {
                    var statearr_11166_11183 = state_11158__$1;
                    statearr_11166_11183[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11159 === 6) {
                    var inst_11130 = state_11158[5];
                    var inst_11141 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_11130);
                    var inst_11142 = blockchain.saveBlock.call(null, inst_11130);
                    var state_11158__$1 = function() {
                      var statearr_11167 = state_11158;
                      statearr_11167[8] = inst_11141;
                      return statearr_11167;
                    }();
                    var statearr_11168_11184 = state_11158__$1;
                    statearr_11168_11184[2] = inst_11142;
                    statearr_11168_11184[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11159 === 3) {
                      var inst_11154 = state_11158[2];
                      var inst_11155 = cljs.core.last.call(null, schain);
                      var inst_11156 = database.update.call(null, "last", inst_11155);
                      var state_11158__$1 = function() {
                        var statearr_11169 = state_11158;
                        statearr_11169[9] = inst_11154;
                        return statearr_11169;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11158__$1, inst_11156);
                    } else {
                      if (state_val_11159 === 2) {
                        var inst_11130 = state_11158[5];
                        var inst_11132 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_11130);
                        var inst_11133 = schain[inst_11130];
                        var inst_11134 = blockchain.prevblk.call(null, inst_11133);
                        var inst_11135 = blockchain.blockKnown_QMARK_.call(null, inst_11134);
                        var state_11158__$1 = function() {
                          var statearr_11170 = state_11158;
                          statearr_11170[10] = inst_11132;
                          return statearr_11170;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11158__$1, 4, inst_11135);
                      } else {
                        if (state_val_11159 === 9) {
                          var state_11158__$1 = state_11158;
                          var statearr_11171_11185 = state_11158__$1;
                          statearr_11171_11185[2] = null;
                          statearr_11171_11185[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11159 === 5) {
                            var inst_11130 = state_11158[5];
                            var inst_11139 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_11130);
                            var state_11158__$1 = state_11158;
                            var statearr_11172_11186 = state_11158__$1;
                            statearr_11172_11186[2] = inst_11139;
                            statearr_11172_11186[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11159 === 10) {
                              var inst_11152 = state_11158[2];
                              var state_11158__$1 = state_11158;
                              var statearr_11173_11187 = state_11158__$1;
                              statearr_11173_11187[2] = inst_11152;
                              statearr_11173_11187[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11159 === 8) {
                                var inst_11130 = state_11158[5];
                                var inst_11148 = inst_11130 + 1;
                                var inst_11130__$1 = inst_11148;
                                var state_11158__$1 = function() {
                                  var statearr_11174 = state_11158;
                                  statearr_11174[5] = inst_11130__$1;
                                  return statearr_11174;
                                }();
                                var statearr_11175_11188 = state_11158__$1;
                                statearr_11175_11188[2] = null;
                                statearr_11175_11188[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11177 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11177[0] = state_machine__5728__auto__;
              statearr_11177[1] = 1;
              return statearr_11177;
            };
            var state_machine__5728__auto____1 = function(state_11158) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11158);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11158) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11158);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11178 = f__5741__auto__.call(null);
        statearr_11178[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11178;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11227) {
            var state_val_11228 = state_11227[1];
            if (state_val_11228 === 6) {
              var inst_11222 = state_11227[2];
              var state_11227__$1 = state_11227;
              var statearr_11229_11237 = state_11227__$1;
              statearr_11229_11237[2] = inst_11222;
              statearr_11229_11237[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11228 === 5) {
                var inst_11225 = state_11227[2];
                var state_11227__$1 = state_11227;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11227__$1, inst_11225);
              } else {
                if (state_val_11228 === 4) {
                  var state_11227__$1 = state_11227;
                  var statearr_11230_11238 = state_11227__$1;
                  statearr_11230_11238[2] = blockchain.hght;
                  statearr_11230_11238[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11228 === 3) {
                    var inst_11219 = function() {
                      return function(state_val_11228, c__5740__auto__) {
                        return function(v) {
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "prev height ", v);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "to add  ", x);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "after addition  ", v + x);
                          return v + x;
                        };
                      }(state_val_11228, c__5740__auto__);
                    }();
                    var inst_11220 = database.update.call(null, "height", inst_11219);
                    var state_11227__$1 = state_11227;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11227__$1, 6, inst_11220);
                  } else {
                    if (state_val_11228 === 2) {
                      var inst_11215 = state_11227[2];
                      var inst_11216 = blockchain.hght = inst_11215;
                      var inst_11217 = logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", blockchain.hght);
                      var state_11227__$1 = function() {
                        var statearr_11231 = state_11227;
                        statearr_11231[5] = inst_11217;
                        statearr_11231[6] = inst_11216;
                        return statearr_11231;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_11232_11239 = state_11227__$1;
                        statearr_11232_11239[1] = 3;
                      } else {
                        var statearr_11233_11240 = state_11227__$1;
                        statearr_11233_11240[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11228 === 1) {
                        var inst_11213 = database.g.call(null, "height");
                        var state_11227__$1 = state_11227;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11227__$1, 2, inst_11213);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11235 = [null, null, null, null, null, null, null];
              statearr_11235[0] = state_machine__5728__auto__;
              statearr_11235[1] = 1;
              return statearr_11235;
            };
            var state_machine__5728__auto____1 = function(state_11227) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11227);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11227) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11227);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11236 = f__5741__auto__.call(null);
        statearr_11236[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11236;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("blockchain");
goog.require("pubsub");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
intercomTake.sendm = function sendm(peer, payload) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11427) {
            var state_val_11428 = state_11427[1];
            if (state_val_11428 === 2) {
              var inst_11425 = state_11427[2];
              var state_11427__$1 = state_11427;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11427__$1, inst_11425);
            } else {
              if (state_val_11428 === 1) {
                var state_11427__$1 = state_11427;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11427__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11430 = [null, null, null, null, null];
              statearr_11430[0] = state_machine__5728__auto__;
              statearr_11430[1] = 1;
              return statearr_11430;
            };
            var state_machine__5728__auto____1 = function(state_11427) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11427);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11427) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11427);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11431 = f__5741__auto__.call(null);
        statearr_11431[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11431;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11561) {
            var state_val_11562 = state_11561[1];
            if (state_val_11562 === 7) {
              var inst_11528 = state_11561[2];
              var inst_11529 = intercomTake.heightFromBlock.call(null, inst_11528);
              var inst_11530 = intercomTake.blocks.vector;
              var inst_11531 = inst_11530.length;
              var inst_11532 = inst_11529 + inst_11531;
              var inst_11533 = inst_11532 + 1;
              var inst_11534 = intercomTake.newHeight = inst_11533;
              var inst_11535 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
              var inst_11536 = intercomTake.bchainHeight < intercomTake.newHeight;
              var state_11561__$1 = function() {
                var statearr_11563 = state_11561;
                statearr_11563[5] = inst_11535;
                statearr_11563[6] = inst_11534;
                return statearr_11563;
              }();
              if (cljs.core.truth_(inst_11536)) {
                var statearr_11564_11582 = state_11561__$1;
                statearr_11564_11582[1] = 8;
              } else {
                var statearr_11565_11583 = state_11561__$1;
                statearr_11565_11583[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11562 === 1) {
                var inst_11507 = fullMessage.data;
                var inst_11508 = intercomTake.blocks = inst_11507;
                var inst_11509 = logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_11510 = intercomTake.blocks.vector;
                var inst_11511 = inst_11510[0];
                var inst_11512 = blockchain.prevblk.call(null, inst_11511);
                var inst_11513 = blockchain.blockKnown_QMARK_.call(null, inst_11512);
                var state_11561__$1 = function() {
                  var statearr_11566 = state_11561;
                  statearr_11566[7] = inst_11509;
                  statearr_11566[8] = inst_11508;
                  return statearr_11566;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11561__$1, 2, inst_11513);
              } else {
                if (state_val_11562 === 4) {
                  var inst_11545 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_11546 = database.g.call(null, "last");
                  var state_11561__$1 = function() {
                    var statearr_11567 = state_11561;
                    statearr_11567[9] = inst_11545;
                    return statearr_11567;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11561__$1, 11, inst_11546);
                } else {
                  if (state_val_11562 === 13) {
                    var inst_11552 = state_11561[10];
                    var inst_11555 = state_11561[2];
                    var state_11561__$1 = state_11561;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11561__$1, 12, inst_11552, inst_11555);
                  } else {
                    if (state_val_11562 === 6) {
                      var inst_11520 = state_11561[2];
                      var inst_11521 = intercomTake.bchainHeight = inst_11520;
                      var inst_11522 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_11523 = intercomTake.blocks.vector;
                      var inst_11524 = inst_11523[0];
                      var inst_11525 = blockchain.prevblk.call(null, inst_11524);
                      var inst_11526 = database.g.call(null, inst_11525);
                      var state_11561__$1 = function() {
                        var statearr_11568 = state_11561;
                        statearr_11568[11] = inst_11521;
                        statearr_11568[12] = inst_11522;
                        return statearr_11568;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11561__$1, 7, inst_11526);
                    } else {
                      if (state_val_11562 === 3) {
                        var inst_11517 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_11518 = blockchain.blockchainHeight.call(null);
                        var state_11561__$1 = function() {
                          var statearr_11569 = state_11561;
                          statearr_11569[13] = inst_11517;
                          return statearr_11569;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11561__$1, 6, inst_11518);
                      } else {
                        if (state_val_11562 === 12) {
                          var inst_11557 = state_11561[2];
                          var state_11561__$1 = state_11561;
                          var statearr_11570_11584 = state_11561__$1;
                          statearr_11570_11584[2] = inst_11557;
                          statearr_11570_11584[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11562 === 2) {
                            var inst_11515 = state_11561[2];
                            var state_11561__$1 = state_11561;
                            if (cljs.core.truth_(inst_11515)) {
                              var statearr_11571_11585 = state_11561__$1;
                              statearr_11571_11585[1] = 3;
                            } else {
                              var statearr_11572_11586 = state_11561__$1;
                              statearr_11572_11586[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11562 === 11) {
                              var inst_11548 = state_11561[2];
                              var inst_11549 = inst_11548.hash;
                              var inst_11550 = intercomTake.lblock = inst_11549;
                              var inst_11551 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                              var inst_11552 = fullMessage.peer;
                              var inst_11553 = intercomMake.makeGetBlock.call(null, intercomTake.lblock);
                              var state_11561__$1 = function() {
                                var statearr_11573 = state_11561;
                                statearr_11573[14] = inst_11551;
                                statearr_11573[15] = inst_11550;
                                statearr_11573[10] = inst_11552;
                                return statearr_11573;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11561__$1, 13, inst_11553);
                            } else {
                              if (state_val_11562 === 9) {
                                var inst_11541 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_11561__$1 = state_11561;
                                var statearr_11574_11587 = state_11561__$1;
                                statearr_11574_11587[2] = inst_11541;
                                statearr_11574_11587[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11562 === 5) {
                                  var inst_11559 = state_11561[2];
                                  var state_11561__$1 = function() {
                                    var statearr_11575 = state_11561;
                                    statearr_11575[16] = inst_11559;
                                    return statearr_11575;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11561__$1, "grind");
                                } else {
                                  if (state_val_11562 === 10) {
                                    var inst_11543 = state_11561[2];
                                    var state_11561__$1 = state_11561;
                                    var statearr_11576_11588 = state_11561__$1;
                                    statearr_11576_11588[2] = inst_11543;
                                    statearr_11576_11588[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11562 === 8) {
                                      var inst_11538 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_11539 = blockchain.addToChain.call(null, intercomTake.blocks);
                                      var state_11561__$1 = function() {
                                        var statearr_11577 = state_11561;
                                        statearr_11577[17] = inst_11538;
                                        return statearr_11577;
                                      }();
                                      var statearr_11578_11589 = state_11561__$1;
                                      statearr_11578_11589[2] = inst_11539;
                                      statearr_11578_11589[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11580 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11580[0] = state_machine__5728__auto__;
              statearr_11580[1] = 1;
              return statearr_11580;
            };
            var state_machine__5728__auto____1 = function(state_11561) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11561);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11561) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11561);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11581 = f__5741__auto__.call(null);
        statearr_11581[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11581;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11610) {
            var state_val_11611 = state_11610[1];
            if (state_val_11611 === 1) {
              var inst_11603 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_11604 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_11605 = intercomTake.v.data;
              var inst_11606 = it.handleInvBlock.call(null, inst_11605, intercomTake.v);
              var inst_11607 = intercomTake.tostate.call(null, "grind");
              var inst_11608 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_11610__$1 = function() {
                var statearr_11612 = state_11610;
                statearr_11612[5] = inst_11604;
                statearr_11612[6] = inst_11606;
                statearr_11612[7] = inst_11603;
                statearr_11612[8] = inst_11607;
                return statearr_11612;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11610__$1, inst_11608);
            } else {
              return null;
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11614 = [null, null, null, null, null, null, null, null, null];
              statearr_11614[0] = state_machine__5728__auto__;
              statearr_11614[1] = 1;
              return statearr_11614;
            };
            var state_machine__5728__auto____1 = function(state_11610) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11610);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11610) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11610);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11615 = f__5741__auto__.call(null);
        statearr_11615[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11615;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11632) {
            var state_val_11633 = state_11632[1];
            if (state_val_11633 === 1) {
              var inst_11627 = intercomTake.v.peer;
              var inst_11628 = intercomTake.sendmsg.call(null, inst_11627, "version", "0");
              var inst_11629 = intercomTake.tostate.call(null, "grind");
              var inst_11630 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_11632__$1 = function() {
                var statearr_11634 = state_11632;
                statearr_11634[5] = inst_11628;
                statearr_11634[6] = inst_11629;
                return statearr_11634;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11632__$1, inst_11630);
            } else {
              return null;
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11636 = [null, null, null, null, null, null, null];
              statearr_11636[0] = state_machine__5728__auto__;
              statearr_11636[1] = 1;
              return statearr_11636;
            };
            var state_machine__5728__auto____1 = function(state_11632) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11632);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11632) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11632);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11637 = f__5741__auto__.call(null);
        statearr_11637[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11637;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11648) {
            var state_val_11649 = state_11648[1];
            if (state_val_11649 === 1) {
              var inst_11646 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_11648__$1 = function() {
                var statearr_11650 = state_11648;
                statearr_11650[5] = inst_11646;
                return statearr_11650;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11648__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11652 = [null, null, null, null, null, null];
              statearr_11652[0] = state_machine__5728__auto__;
              statearr_11652[1] = 1;
              return statearr_11652;
            };
            var state_machine__5728__auto____1 = function(state_11648) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11648);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11648) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11648);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11653 = f__5741__auto__.call(null);
        statearr_11653[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11653;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11694) {
            var state_val_11695 = state_11694[1];
            if (state_val_11695 === 4) {
              var inst_11692 = state_11694[2];
              var state_11694__$1 = state_11694;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11694__$1, inst_11692);
            } else {
              if (state_val_11695 === 3) {
                var state_11694__$1 = state_11694;
                var statearr_11696_11704 = state_11694__$1;
                statearr_11696_11704[2] = "version";
                statearr_11696_11704[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11695 === 2) {
                  var state_11694__$1 = state_11694;
                  var statearr_11697_11705 = state_11694__$1;
                  statearr_11697_11705[2] = "grind";
                  statearr_11697_11705[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11695 === 1) {
                    var inst_11679 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_11680 = conn.data;
                    var inst_11681 = inst_11680.writec;
                    var inst_11682 = intercomMake.makeVersion.call(null, "0");
                    var inst_11683 = intercomTake.sendm.call(null, inst_11681, inst_11682);
                    var inst_11684 = conn.connType;
                    var inst_11685 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_11684);
                    var inst_11686 = conn.data;
                    var inst_11687 = inst_11686.connType;
                    var inst_11688 = inst_11687 === "saltan";
                    var state_11694__$1 = function() {
                      var statearr_11698 = state_11694;
                      statearr_11698[5] = inst_11683;
                      statearr_11698[6] = inst_11685;
                      statearr_11698[7] = inst_11679;
                      return statearr_11698;
                    }();
                    if (cljs.core.truth_(inst_11688)) {
                      var statearr_11699_11706 = state_11694__$1;
                      statearr_11699_11706[1] = 2;
                    } else {
                      var statearr_11700_11707 = state_11694__$1;
                      statearr_11700_11707[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11702 = [null, null, null, null, null, null, null, null];
              statearr_11702[0] = state_machine__5728__auto__;
              statearr_11702[1] = 1;
              return statearr_11702;
            };
            var state_machine__5728__auto____1 = function(state_11694) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11694);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11694) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11694);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11703 = f__5741__auto__.call(null);
        statearr_11703[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11703;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11728) {
            var state_val_11729 = state_11728[1];
            if (state_val_11729 === 2) {
              var inst_11725 = state_11728[2];
              var inst_11726 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_11725);
              var state_11728__$1 = state_11728;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11728__$1, inst_11726);
            } else {
              if (state_val_11729 === 1) {
                var inst_11721 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_11722 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_11723 = intercomTake.makeGetBlock.call(null, hash);
                var state_11728__$1 = function() {
                  var statearr_11730 = state_11728;
                  statearr_11730[5] = inst_11722;
                  statearr_11730[6] = inst_11721;
                  return statearr_11730;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11728__$1, 2, inst_11723);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11732 = [null, null, null, null, null, null, null];
              statearr_11732[0] = state_machine__5728__auto__;
              statearr_11732[1] = 1;
              return statearr_11732;
            };
            var state_machine__5728__auto____1 = function(state_11728) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11728);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11728) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11728);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11733 = f__5741__auto__.call(null);
        statearr_11733[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11733;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
goog.provide("intercom");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("intercomTake");
goog.require("intercomTake");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
intercom.intercomState = "start";
intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
intercom.inputch = cljs.core.async.chan.call(null);
intercom.outputch = cljs.core.async.chan.call(null);
intercom.statech = cljs.core.async.chan.call(null);
intercom.onMessage = function onMessage(wch, type, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11751) {
            var state_val_11752 = state_11751[1];
            if (state_val_11752 === 2) {
              var inst_11749 = state_11751[2];
              var state_11751__$1 = state_11751;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11751__$1, inst_11749);
            } else {
              if (state_val_11752 === 1) {
                var inst_11747 = {"type":type, "data":data, "peer":wch};
                var state_11751__$1 = state_11751;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11751__$1, 2, intercom.inputch, inst_11747);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_11754 = [null, null, null, null, null];
              statearr_11754[0] = state_machine__5728__auto__;
              statearr_11754[1] = 1;
              return statearr_11754;
            };
            var state_machine__5728__auto____1 = function(state_11751) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11751);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11751) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11751);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_11755 = f__5741__auto__.call(null);
        statearr_11755[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_11755;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
intercom.setIntercomState = function setIntercomState(conn, state) {
  return conn.intercomstate = state;
};
intercom.getIntercomState = function getIntercomState(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
intercom.tostateu = function tostateu(conn, statename) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_11985) {
            var state_val_11986 = state_11985[1];
            if (state_val_11986 === 7) {
              var inst_11928 = intercom.is_QMARK_.call(null, intercom.state, "grind");
              var state_11985__$1 = state_11985;
              if (inst_11928) {
                var statearr_11987_12036 = state_11985__$1;
                statearr_11987_12036[1] = 13;
              } else {
                var statearr_11988_12037 = state_11985__$1;
                statearr_11988_12037[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11986 === 20) {
                var inst_11940 = intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_11985__$1 = state_11985;
                if (inst_11940) {
                  var statearr_11989_12038 = state_11985__$1;
                  statearr_11989_12038[1] = 22;
                } else {
                  var statearr_11990_12039 = state_11985__$1;
                  statearr_11990_12039[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11986 === 27) {
                  var inst_11970 = state_11985[2];
                  var state_11985__$1 = state_11985;
                  var statearr_11991_12040 = state_11985__$1;
                  statearr_11991_12040[2] = inst_11970;
                  statearr_11991_12040[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11986 === 1) {
                    var inst_11896 = cljs.core.partial.call(null, intercom.tostateu, conn);
                    var inst_11897 = intercom.tostate = inst_11896;
                    var inst_11898 = intercom.getIntercomState.call(null, conn);
                    var inst_11899 = intercom.state = inst_11898;
                    var inst_11900 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_11901 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", intercom.state);
                    var inst_11902 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_11903 = message.data;
                    var inst_11904 = intercom.v = inst_11903;
                    var inst_11905 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", intercom.state);
                    var inst_11906 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_11907 = intercom.is_QMARK_.call(null, intercom.state, "start");
                    var state_11985__$1 = function() {
                      var statearr_11992 = state_11985;
                      statearr_11992[5] = inst_11899;
                      statearr_11992[6] = inst_11902;
                      statearr_11992[7] = inst_11900;
                      statearr_11992[8] = inst_11897;
                      statearr_11992[9] = inst_11906;
                      statearr_11992[10] = inst_11901;
                      statearr_11992[11] = inst_11904;
                      statearr_11992[12] = inst_11905;
                      return statearr_11992;
                    }();
                    if (inst_11907) {
                      var statearr_11993_12041 = state_11985__$1;
                      statearr_11993_12041[1] = 2;
                    } else {
                      var statearr_11994_12042 = state_11985__$1;
                      statearr_11994_12042[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11986 === 24) {
                      var inst_11972 = state_11985[2];
                      var state_11985__$1 = state_11985;
                      var statearr_11995_12043 = state_11985__$1;
                      statearr_11995_12043[2] = inst_11972;
                      statearr_11995_12043[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11986 === 4) {
                        var inst_11983 = state_11985[2];
                        var state_11985__$1 = state_11985;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11985__$1, inst_11983);
                      } else {
                        if (state_val_11986 === 15) {
                          var inst_11979 = state_11985[2];
                          var state_11985__$1 = state_11985;
                          var statearr_11996_12044 = state_11985__$1;
                          statearr_11996_12044[2] = inst_11979;
                          statearr_11996_12044[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11986 === 21) {
                            var inst_11974 = state_11985[2];
                            var state_11985__$1 = state_11985;
                            var statearr_11997_12045 = state_11985__$1;
                            statearr_11997_12045[2] = inst_11974;
                            statearr_11997_12045[1] = 18;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11986 === 31) {
                              var inst_11957 = intercomTake.takeData.call(null, message);
                              var inst_11958 = intercom.tostate.call(null, inst_11957);
                              var state_11985__$1 = state_11985;
                              var statearr_11998_12046 = state_11985__$1;
                              statearr_11998_12046[2] = inst_11958;
                              statearr_11998_12046[1] = 33;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11986 === 32) {
                                var state_11985__$1 = state_11985;
                                var statearr_11999_12047 = state_11985__$1;
                                statearr_11999_12047[1] = 34;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11986 === 33) {
                                  var inst_11966 = state_11985[2];
                                  var state_11985__$1 = state_11985;
                                  var statearr_12001_12048 = state_11985__$1;
                                  statearr_12001_12048[2] = inst_11966;
                                  statearr_12001_12048[1] = 30;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11986 === 13) {
                                    var inst_11930 = intercom.typeof_QMARK_.call(null, message, "conn");
                                    var state_11985__$1 = state_11985;
                                    if (inst_11930) {
                                      var statearr_12002_12049 = state_11985__$1;
                                      statearr_12002_12049[1] = 16;
                                    } else {
                                      var statearr_12003_12050 = state_11985__$1;
                                      statearr_12003_12050[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11986 === 22) {
                                      var inst_11942 = intercomTake.takeGetData.call(null, message);
                                      var inst_11943 = intercom.tostate.call(null, inst_11942);
                                      var state_11985__$1 = state_11985;
                                      var statearr_12004_12051 = state_11985__$1;
                                      statearr_12004_12051[2] = inst_11943;
                                      statearr_12004_12051[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11986 === 36) {
                                        var inst_11964 = state_11985[2];
                                        var state_11985__$1 = state_11985;
                                        var statearr_12005_12052 = state_11985__$1;
                                        statearr_12005_12052[2] = inst_11964;
                                        statearr_12005_12052[1] = 33;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11986 === 29) {
                                          var inst_11955 = intercom.typeof_QMARK_.call(null, message, "data");
                                          var state_11985__$1 = state_11985;
                                          if (inst_11955) {
                                            var statearr_12006_12053 = state_11985__$1;
                                            statearr_12006_12053[1] = 31;
                                          } else {
                                            var statearr_12007_12054 = state_11985__$1;
                                            statearr_12007_12054[1] = 32;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11986 === 6) {
                                            var inst_11918 = intercom.typeof_QMARK_.call(null, message, "version");
                                            var state_11985__$1 = state_11985;
                                            if (inst_11918) {
                                              var statearr_12008_12055 = state_11985__$1;
                                              statearr_12008_12055[1] = 9;
                                            } else {
                                              var statearr_12009_12056 = state_11985__$1;
                                              statearr_12009_12056[1] = 10;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11986 === 28) {
                                              var inst_11952 = intercomTake.takeTx.call(null, message);
                                              var inst_11953 = intercom.tostate.call(null, inst_11952);
                                              var state_11985__$1 = state_11985;
                                              var statearr_12010_12057 = state_11985__$1;
                                              statearr_12010_12057[2] = inst_11953;
                                              statearr_12010_12057[1] = 30;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11986 === 25) {
                                                var inst_11947 = intercomTake.takeGetTx.call(null, message);
                                                var inst_11948 = intercom.tostate.call(null, inst_11947);
                                                var state_11985__$1 = state_11985;
                                                var statearr_12011_12058 = state_11985__$1;
                                                statearr_12011_12058[2] = inst_11948;
                                                statearr_12011_12058[1] = 27;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11986 === 34) {
                                                  var inst_11961 = intercom.tostate.call(null, "grind");
                                                  var state_11985__$1 = state_11985;
                                                  var statearr_12012_12059 = state_11985__$1;
                                                  statearr_12012_12059[2] = inst_11961;
                                                  statearr_12012_12059[1] = 36;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11986 === 17) {
                                                    var inst_11935 = intercom.typeof_QMARK_.call(null, message, "inv");
                                                    var state_11985__$1 = state_11985;
                                                    if (inst_11935) {
                                                      var statearr_12013_12060 = state_11985__$1;
                                                      statearr_12013_12060[1] = 19;
                                                    } else {
                                                      var statearr_12014_12061 = state_11985__$1;
                                                      statearr_12014_12061[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11986 === 3) {
                                                      var inst_11916 = intercom.is_QMARK_.call(null, intercom.state, "version");
                                                      var state_11985__$1 = state_11985;
                                                      if (inst_11916) {
                                                        var statearr_12015_12062 = state_11985__$1;
                                                        statearr_12015_12062[1] = 6;
                                                      } else {
                                                        var statearr_12016_12063 = state_11985__$1;
                                                        statearr_12016_12063[1] = 7;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11986 === 12) {
                                                        var inst_11922 = state_11985[2];
                                                        var inst_11923 = intercom.tostate.call(null, inst_11922);
                                                        var state_11985__$1 = state_11985;
                                                        var statearr_12017_12064 = state_11985__$1;
                                                        statearr_12017_12064[2] = inst_11923;
                                                        statearr_12017_12064[1] = 11;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11986 === 2) {
                                                          var inst_11909 = intercomTake.takeConn.call(null, message);
                                                          var state_11985__$1 = state_11985;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11985__$1, 5, inst_11909);
                                                        } else {
                                                          if (state_val_11986 === 23) {
                                                            var inst_11945 = intercom.typeof_QMARK_.call(null, message, "gettx");
                                                            var state_11985__$1 = state_11985;
                                                            if (inst_11945) {
                                                              var statearr_12018_12065 = state_11985__$1;
                                                              statearr_12018_12065[1] = 25;
                                                            } else {
                                                              var statearr_12019_12066 = state_11985__$1;
                                                              statearr_12019_12066[1] = 26;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11986 === 35) {
                                                              var state_11985__$1 = state_11985;
                                                              var statearr_12020_12067 = state_11985__$1;
                                                              statearr_12020_12067[2] = null;
                                                              statearr_12020_12067[1] = 36;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11986 === 19) {
                                                                var inst_11937 = intercomTake.takeInv.call(null, message);
                                                                var inst_11938 = intercom.tostate.call(null, inst_11937);
                                                                var state_11985__$1 = state_11985;
                                                                var statearr_12021_12068 = state_11985__$1;
                                                                statearr_12021_12068[2] = inst_11938;
                                                                statearr_12021_12068[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_11986 === 11) {
                                                                  var inst_11926 = state_11985[2];
                                                                  var state_11985__$1 = state_11985;
                                                                  var statearr_12022_12069 = state_11985__$1;
                                                                  statearr_12022_12069[2] = inst_11926;
                                                                  statearr_12022_12069[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_11986 === 9) {
                                                                    var inst_11920 = intercomTake.takeVersion.call(null, message);
                                                                    var state_11985__$1 = state_11985;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11985__$1, 12, inst_11920);
                                                                  } else {
                                                                    if (state_val_11986 === 5) {
                                                                      var inst_11911 = state_11985[2];
                                                                      var inst_11912 = intercom.newstate = inst_11911;
                                                                      var inst_11913 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", intercom.newstate);
                                                                      var inst_11914 = intercom.tostate.call(null, intercom.newstate);
                                                                      var state_11985__$1 = function() {
                                                                        var statearr_12023 = state_11985;
                                                                        statearr_12023[13] = inst_11912;
                                                                        statearr_12023[14] = inst_11913;
                                                                        return statearr_12023;
                                                                      }();
                                                                      var statearr_12024_12070 = state_11985__$1;
                                                                      statearr_12024_12070[2] = inst_11914;
                                                                      statearr_12024_12070[1] = 4;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_11986 === 14) {
                                                                        var state_11985__$1 = state_11985;
                                                                        var statearr_12025_12071 = state_11985__$1;
                                                                        statearr_12025_12071[2] = null;
                                                                        statearr_12025_12071[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_11986 === 26) {
                                                                          var inst_11950 = intercom.typeof_QMARK_.call(null, message, "tx");
                                                                          var state_11985__$1 = state_11985;
                                                                          if (inst_11950) {
                                                                            var statearr_12026_12072 = state_11985__$1;
                                                                            statearr_12026_12072[1] = 28;
                                                                          } else {
                                                                            var statearr_12027_12073 = state_11985__$1;
                                                                            statearr_12027_12073[1] = 29;
                                                                          }
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_11986 === 16) {
                                                                            var inst_11932 = intercomTake.takeConn.call(null, message);
                                                                            var inst_11933 = intercom.tostate.call(null, inst_11932);
                                                                            var state_11985__$1 = state_11985;
                                                                            var statearr_12028_12074 = state_11985__$1;
                                                                            statearr_12028_12074[2] = inst_11933;
                                                                            statearr_12028_12074[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_11986 === 30) {
                                                                              var inst_11968 = state_11985[2];
                                                                              var state_11985__$1 = state_11985;
                                                                              var statearr_12029_12075 = state_11985__$1;
                                                                              statearr_12029_12075[2] = inst_11968;
                                                                              statearr_12029_12075[1] = 27;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_11986 === 10) {
                                                                                var state_11985__$1 = state_11985;
                                                                                var statearr_12030_12076 = state_11985__$1;
                                                                                statearr_12030_12076[2] = null;
                                                                                statearr_12030_12076[1] = 11;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_11986 === 18) {
                                                                                  var inst_11976 = state_11985[2];
                                                                                  var state_11985__$1 = state_11985;
                                                                                  var statearr_12031_12077 = state_11985__$1;
                                                                                  statearr_12031_12077[2] = inst_11976;
                                                                                  statearr_12031_12077[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_11986 === 8) {
                                                                                    var inst_11981 = state_11985[2];
                                                                                    var state_11985__$1 = state_11985;
                                                                                    var statearr_12032_12078 = state_11985__$1;
                                                                                    statearr_12032_12078[2] = inst_11981;
                                                                                    statearr_12032_12078[1] = 4;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12034 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12034[0] = state_machine__5728__auto__;
              statearr_12034[1] = 1;
              return statearr_12034;
            };
            var state_machine__5728__auto____1 = function(state_11985) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_11985);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_11985) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_11985);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12035 = f__5741__auto__.call(null);
        statearr_12035[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12035;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
goog.provide("communications");
goog.require("cljs.core");
goog.require("crypto");
goog.require("mining");
goog.require("peerjs");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("intercom");
goog.require("intercomMake");
goog.require("intercom");
goog.require("intercomMake");
goog.require("pubsub");
goog.require("blockchain");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("database");
goog.require("logger");
goog.require("mining");
goog.require("logger");
goog.require("blockchain");
goog.require("database");
goog.require("crypto");
communications.intercomMeta = function() {
  var obj12697 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj12697;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_12843) {
            var state_val_12844 = state_12843[1];
            if (state_val_12844 === 7) {
              var inst_12793 = state_12843[5];
              var inst_12792 = state_12843[6];
              var inst_12791 = state_12843[7];
              var inst_12794 = state_12843[8];
              var inst_12808 = state_12843[2];
              var inst_12809 = inst_12794 + 1;
              var tmp12845 = inst_12793;
              var tmp12846 = inst_12792;
              var tmp12847 = inst_12791;
              var inst_12791__$1 = tmp12847;
              var inst_12792__$1 = tmp12846;
              var inst_12793__$1 = tmp12845;
              var inst_12794__$1 = inst_12809;
              var state_12843__$1 = function() {
                var statearr_12848 = state_12843;
                statearr_12848[5] = inst_12793__$1;
                statearr_12848[6] = inst_12792__$1;
                statearr_12848[7] = inst_12791__$1;
                statearr_12848[9] = inst_12808;
                statearr_12848[8] = inst_12794__$1;
                return statearr_12848;
              }();
              var statearr_12849_12872 = state_12843__$1;
              statearr_12849_12872[2] = null;
              statearr_12849_12872[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12844 === 1) {
                var inst_12789 = communications.intercomMeta.knownPeersChannels;
                var inst_12790 = cljs.core.seq.call(null, inst_12789);
                var inst_12791 = inst_12790;
                var inst_12792 = null;
                var inst_12793 = 0;
                var inst_12794 = 0;
                var state_12843__$1 = function() {
                  var statearr_12850 = state_12843;
                  statearr_12850[5] = inst_12793;
                  statearr_12850[6] = inst_12792;
                  statearr_12850[7] = inst_12791;
                  statearr_12850[8] = inst_12794;
                  return statearr_12850;
                }();
                var statearr_12851_12873 = state_12843__$1;
                statearr_12851_12873[2] = null;
                statearr_12851_12873[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12844 === 4) {
                  var inst_12792 = state_12843[6];
                  var inst_12794 = state_12843[8];
                  var inst_12799 = cljs.core._nth.call(null, inst_12792, inst_12794);
                  var inst_12800 = "broadsacting new block to peer " + inst_12799;
                  var inst_12801 = inst_12800 + " ";
                  var inst_12802 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_12801, blockk);
                  var inst_12803 = [];
                  var inst_12804 = communications.vectoR = inst_12803;
                  var inst_12805 = communications.vectoR.push(blockk);
                  var inst_12806 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                  var state_12843__$1 = function() {
                    var statearr_12852 = state_12843;
                    statearr_12852[10] = inst_12805;
                    statearr_12852[11] = inst_12804;
                    statearr_12852[12] = inst_12802;
                    return statearr_12852;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12843__$1, 7, inst_12799, inst_12806);
                } else {
                  if (state_val_12844 === 13) {
                    var inst_12834 = state_12843[2];
                    var state_12843__$1 = state_12843;
                    var statearr_12853_12874 = state_12843__$1;
                    statearr_12853_12874[2] = inst_12834;
                    statearr_12853_12874[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12844 === 6) {
                      var inst_12839 = state_12843[2];
                      var state_12843__$1 = state_12843;
                      var statearr_12854_12875 = state_12843__$1;
                      statearr_12854_12875[2] = inst_12839;
                      statearr_12854_12875[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12844 === 3) {
                        var inst_12841 = state_12843[2];
                        var state_12843__$1 = state_12843;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12843__$1, inst_12841);
                      } else {
                        if (state_val_12844 === 12) {
                          var inst_12812 = state_12843[13];
                          var inst_12821 = cljs.core.first.call(null, inst_12812);
                          var inst_12822 = "broadsacting new block to peer " + inst_12821;
                          var inst_12823 = inst_12822 + " ";
                          var inst_12824 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_12823, blockk);
                          var inst_12825 = [];
                          var inst_12826 = communications.vectoR = inst_12825;
                          var inst_12827 = communications.vectoR.push(blockk);
                          var inst_12828 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                          var state_12843__$1 = function() {
                            var statearr_12855 = state_12843;
                            statearr_12855[14] = inst_12827;
                            statearr_12855[15] = inst_12826;
                            statearr_12855[16] = inst_12824;
                            return statearr_12855;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12843__$1, 14, inst_12821, inst_12828);
                        } else {
                          if (state_val_12844 === 2) {
                            var inst_12793 = state_12843[5];
                            var inst_12794 = state_12843[8];
                            var inst_12796 = inst_12794 < inst_12793;
                            var inst_12797 = inst_12796;
                            var state_12843__$1 = state_12843;
                            if (cljs.core.truth_(inst_12797)) {
                              var statearr_12856_12876 = state_12843__$1;
                              statearr_12856_12876[1] = 4;
                            } else {
                              var statearr_12857_12877 = state_12843__$1;
                              statearr_12857_12877[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12844 === 11) {
                              var inst_12812 = state_12843[13];
                              var inst_12816 = cljs.core.chunk_first.call(null, inst_12812);
                              var inst_12817 = cljs.core.chunk_rest.call(null, inst_12812);
                              var inst_12818 = cljs.core.count.call(null, inst_12816);
                              var inst_12791 = inst_12817;
                              var inst_12792 = inst_12816;
                              var inst_12793 = inst_12818;
                              var inst_12794 = 0;
                              var state_12843__$1 = function() {
                                var statearr_12858 = state_12843;
                                statearr_12858[5] = inst_12793;
                                statearr_12858[6] = inst_12792;
                                statearr_12858[7] = inst_12791;
                                statearr_12858[8] = inst_12794;
                                return statearr_12858;
                              }();
                              var statearr_12859_12878 = state_12843__$1;
                              statearr_12859_12878[2] = null;
                              statearr_12859_12878[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12844 === 9) {
                                var state_12843__$1 = state_12843;
                                var statearr_12860_12879 = state_12843__$1;
                                statearr_12860_12879[2] = null;
                                statearr_12860_12879[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12844 === 5) {
                                  var inst_12791 = state_12843[7];
                                  var inst_12812 = state_12843[13];
                                  var inst_12812__$1 = cljs.core.seq.call(null, inst_12791);
                                  var state_12843__$1 = function() {
                                    var statearr_12861 = state_12843;
                                    statearr_12861[13] = inst_12812__$1;
                                    return statearr_12861;
                                  }();
                                  if (inst_12812__$1) {
                                    var statearr_12862_12880 = state_12843__$1;
                                    statearr_12862_12880[1] = 8;
                                  } else {
                                    var statearr_12863_12881 = state_12843__$1;
                                    statearr_12863_12881[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12844 === 14) {
                                    var inst_12812 = state_12843[13];
                                    var inst_12830 = state_12843[2];
                                    var inst_12831 = cljs.core.next.call(null, inst_12812);
                                    var inst_12791 = inst_12831;
                                    var inst_12792 = null;
                                    var inst_12793 = 0;
                                    var inst_12794 = 0;
                                    var state_12843__$1 = function() {
                                      var statearr_12864 = state_12843;
                                      statearr_12864[5] = inst_12793;
                                      statearr_12864[6] = inst_12792;
                                      statearr_12864[7] = inst_12791;
                                      statearr_12864[8] = inst_12794;
                                      statearr_12864[17] = inst_12830;
                                      return statearr_12864;
                                    }();
                                    var statearr_12865_12882 = state_12843__$1;
                                    statearr_12865_12882[2] = null;
                                    statearr_12865_12882[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12844 === 10) {
                                      var inst_12837 = state_12843[2];
                                      var state_12843__$1 = state_12843;
                                      var statearr_12866_12883 = state_12843__$1;
                                      statearr_12866_12883[2] = inst_12837;
                                      statearr_12866_12883[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12844 === 8) {
                                        var inst_12812 = state_12843[13];
                                        var inst_12814 = cljs.core.chunked_seq_QMARK_.call(null, inst_12812);
                                        var state_12843__$1 = state_12843;
                                        if (inst_12814) {
                                          var statearr_12867_12884 = state_12843__$1;
                                          statearr_12867_12884[1] = 11;
                                        } else {
                                          var statearr_12868_12885 = state_12843__$1;
                                          statearr_12868_12885[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12870 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12870[0] = state_machine__5728__auto__;
              statearr_12870[1] = 1;
              return statearr_12870;
            };
            var state_machine__5728__auto____1 = function(state_12843) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12843);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12843) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12843);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12871 = f__5741__auto__.call(null);
        statearr_12871[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12871;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_12903) {
            var state_val_12904 = state_12903[1];
            if (state_val_12904 === 2) {
              var inst_12901 = state_12903[2];
              var state_12903__$1 = state_12903;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12903__$1, inst_12901);
            } else {
              if (state_val_12904 === 1) {
                var inst_12899 = {"type":type, "msg":msg};
                var state_12903__$1 = state_12903;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12903__$1, 2, peer, inst_12899);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12906 = [null, null, null, null, null];
              statearr_12906[0] = state_machine__5728__auto__;
              statearr_12906[1] = 1;
              return statearr_12906;
            };
            var state_machine__5728__auto____1 = function(state_12903) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12903);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12903) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12903);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12907 = f__5741__auto__.call(null);
        statearr_12907[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12907;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.onOpen = function onOpen(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__5740__auto___12924 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto___12924) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto___12924) {
          return function(state_12919) {
            var state_val_12920 = state_12919[1];
            if (state_val_12920 === 2) {
              var inst_12917 = state_12919[2];
              var state_12919__$1 = state_12919;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12919__$1, inst_12917);
            } else {
              if (state_val_12920 === 1) {
                var state_12919__$1 = state_12919;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12919__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto___12924);
        return function(switch__5727__auto__, c__5740__auto___12924) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12922 = [null, null, null, null, null];
              statearr_12922[0] = state_machine__5728__auto__;
              statearr_12922[1] = 1;
              return statearr_12922;
            };
            var state_machine__5728__auto____1 = function(state_12919) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12919);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12919) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12919);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto___12924);
      }();
      var state__5742__auto__ = function() {
        var statearr_12923 = f__5741__auto__.call(null);
        statearr_12923[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto___12924;
        return statearr_12923;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto___12924));
  return logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_12936) {
            var state_val_12937 = state_12936[1];
            if (state_val_12937 === 2) {
              var inst_12934 = state_12936[2];
              var state_12936__$1 = state_12936;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12936__$1, inst_12934);
            } else {
              if (state_val_12937 === 1) {
                var state_12936__$1 = state_12936;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12936__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12939 = [null, null, null, null, null];
              statearr_12939[0] = state_machine__5728__auto__;
              statearr_12939[1] = 1;
              return statearr_12939;
            };
            var state_machine__5728__auto____1 = function(state_12936) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12936);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12936) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12936);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12940 = f__5741__auto__.call(null);
        statearr_12940[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12940;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.onData = function onData(read, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_12952) {
            var state_val_12953 = state_12952[1];
            if (state_val_12953 === 2) {
              var inst_12950 = state_12952[2];
              var state_12952__$1 = state_12952;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12952__$1, inst_12950);
            } else {
              if (state_val_12953 === 1) {
                var state_12952__$1 = state_12952;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12952__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_12955 = [null, null, null, null, null];
              statearr_12955[0] = state_machine__5728__auto__;
              statearr_12955[1] = 1;
              return statearr_12955;
            };
            var state_machine__5728__auto____1 = function(state_12952) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_12952);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_12952) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_12952);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_12956 = f__5741__auto__.call(null);
        statearr_12956[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_12956;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_13111) {
            var state_val_13112 = state_13111[1];
            if (state_val_13112 === 7) {
              var inst_13106 = state_13111[2];
              var state_13111__$1 = function() {
                var statearr_13113 = state_13111;
                statearr_13113[5] = inst_13106;
                return statearr_13113;
              }();
              var statearr_13114_13141 = state_13111__$1;
              statearr_13114_13141[2] = null;
              statearr_13114_13141[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13112 === 1) {
                var state_13111__$1 = state_13111;
                var statearr_13115_13142 = state_13111__$1;
                statearr_13115_13142[2] = null;
                statearr_13115_13142[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13112 === 4) {
                  var inst_13053 = state_13111[2];
                  var inst_13054 = communications.v = inst_13053;
                  var inst_13055 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_13056 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_13057 = communications.vrecieved = inst_13056;
                  var inst_13058 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_13059 = communications.ch2 = inst_13058;
                  var inst_13060 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_13061 = inst_13060 === communications.connectionch;
                  var state_13111__$1 = function() {
                    var statearr_13116 = state_13111;
                    statearr_13116[6] = inst_13059;
                    statearr_13116[7] = inst_13057;
                    statearr_13116[8] = inst_13054;
                    statearr_13116[9] = inst_13055;
                    return statearr_13116;
                  }();
                  if (cljs.core.truth_(inst_13061)) {
                    var statearr_13117_13143 = state_13111__$1;
                    statearr_13117_13143[1] = 5;
                  } else {
                    var statearr_13118_13144 = state_13111__$1;
                    statearr_13118_13144[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13112 === 15) {
                    var state_13111__$1 = state_13111;
                    var statearr_13119_13145 = state_13111__$1;
                    statearr_13119_13145[2] = null;
                    statearr_13119_13145[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13112 === 13) {
                      var inst_13086 = state_13111[2];
                      var inst_13087 = communications.ch2.writec;
                      var inst_13088 = communications.vrecieved.peer = inst_13087;
                      var inst_13089 = communications.ch2.conn;
                      var inst_13090 = intercom.intercomstatemachine.call(null, inst_13089, communications.vrecieved);
                      var state_13111__$1 = function() {
                        var statearr_13120 = state_13111;
                        statearr_13120[10] = inst_13086;
                        statearr_13120[11] = inst_13088;
                        return statearr_13120;
                      }();
                      var statearr_13121_13146 = state_13111__$1;
                      statearr_13121_13146[2] = inst_13090;
                      statearr_13121_13146[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13112 === 6) {
                        var inst_13074 = communications.ch2.type;
                        var inst_13075 = inst_13074 === "readch";
                        var state_13111__$1 = state_13111;
                        if (cljs.core.truth_(inst_13075)) {
                          var statearr_13122_13147 = state_13111__$1;
                          statearr_13122_13147[1] = 8;
                        } else {
                          var statearr_13123_13148 = state_13111__$1;
                          statearr_13123_13148[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13112 === 3) {
                          var inst_13109 = state_13111[2];
                          var state_13111__$1 = state_13111;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13111__$1, inst_13109);
                        } else {
                          if (state_val_13112 === 12) {
                            var state_13111__$1 = state_13111;
                            var statearr_13124_13149 = state_13111__$1;
                            statearr_13124_13149[2] = null;
                            statearr_13124_13149[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13112 === 2) {
                              var inst_13050 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                              var inst_13051 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                              var state_13111__$1 = function() {
                                var statearr_13125 = state_13111;
                                statearr_13125[12] = inst_13051;
                                statearr_13125[13] = inst_13050;
                                return statearr_13125;
                              }();
                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_13111__$1, 4, communications.stated);
                            } else {
                              if (state_val_13112 === 11) {
                                var inst_13081 = communications.vrecieved.data;
                                var inst_13082 = JSON.parse(inst_13081);
                                var inst_13083 = communications.vrecieved = inst_13082;
                                var state_13111__$1 = state_13111;
                                var statearr_13126_13150 = state_13111__$1;
                                statearr_13126_13150[2] = inst_13083;
                                statearr_13126_13150[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13112 === 9) {
                                  var inst_13092 = communications.ch2.type;
                                  var inst_13093 = inst_13092 === "writech";
                                  var state_13111__$1 = state_13111;
                                  if (cljs.core.truth_(inst_13093)) {
                                    var statearr_13127_13151 = state_13111__$1;
                                    statearr_13127_13151[1] = 14;
                                  } else {
                                    var statearr_13128_13152 = state_13111__$1;
                                    statearr_13128_13152[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13112 === 5) {
                                    var inst_13063 = cljs.core.PersistentVector.EMPTY;
                                    var inst_13064 = communications.onNewConnection.call(null, communications.vrecieved);
                                    var inst_13065 = cljs.core.concat.call(null, communications.stated, inst_13064);
                                    var inst_13066 = cljs.core.into.call(null, inst_13063, inst_13065);
                                    var inst_13067 = communications.stated = inst_13066;
                                    var inst_13068 = intercom.getIntercomState.call(null, communications.vrecieved);
                                    var inst_13069 = communications.stat = inst_13068;
                                    var inst_13070 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "intercom state", communications.stat);
                                    var inst_13071 = intercomMake.makeConn.call(null, communications.vrecieved);
                                    var inst_13072 = intercom.intercomstatemachine.call(null, communications.vrecieved, inst_13071);
                                    var state_13111__$1 = function() {
                                      var statearr_13129 = state_13111;
                                      statearr_13129[14] = inst_13067;
                                      statearr_13129[15] = inst_13070;
                                      statearr_13129[16] = inst_13069;
                                      return statearr_13129;
                                    }();
                                    var statearr_13130_13153 = state_13111__$1;
                                    statearr_13130_13153[2] = inst_13072;
                                    statearr_13130_13153[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13112 === 14) {
                                      var inst_13095 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                                      var inst_13096 = communications.ch2.conn;
                                      var inst_13097 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_13096);
                                      var inst_13098 = communications.ch2.conn;
                                      var inst_13099 = inst_13098.send(communications.vrecieved);
                                      var state_13111__$1 = function() {
                                        var statearr_13131 = state_13111;
                                        statearr_13131[17] = inst_13097;
                                        statearr_13131[18] = inst_13095;
                                        return statearr_13131;
                                      }();
                                      var statearr_13132_13154 = state_13111__$1;
                                      statearr_13132_13154[2] = inst_13099;
                                      statearr_13132_13154[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13112 === 16) {
                                        var inst_13102 = state_13111[2];
                                        var state_13111__$1 = state_13111;
                                        var statearr_13133_13155 = state_13111__$1;
                                        statearr_13133_13155[2] = inst_13102;
                                        statearr_13133_13155[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13112 === 10) {
                                          var inst_13104 = state_13111[2];
                                          var state_13111__$1 = state_13111;
                                          var statearr_13134_13156 = state_13111__$1;
                                          statearr_13134_13156[2] = inst_13104;
                                          statearr_13134_13156[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13112 === 8) {
                                            var inst_13077 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                            var inst_13078 = communications.vrecieved.type;
                                            var inst_13079 = inst_13078 === "json";
                                            var state_13111__$1 = function() {
                                              var statearr_13135 = state_13111;
                                              statearr_13135[19] = inst_13077;
                                              return statearr_13135;
                                            }();
                                            if (cljs.core.truth_(inst_13079)) {
                                              var statearr_13136_13157 = state_13111__$1;
                                              statearr_13136_13157[1] = 11;
                                            } else {
                                              var statearr_13137_13158 = state_13111__$1;
                                              statearr_13137_13158[1] = 12;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_13139 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13139[0] = state_machine__5728__auto__;
              statearr_13139[1] = 1;
              return statearr_13139;
            };
            var state_machine__5728__auto____1 = function(state_13111) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_13111);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_13111) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_13111);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_13140 = f__5741__auto__.call(null);
        statearr_13140[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_13140;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.onNewConnection = function onNewConnection(message) {
  communications.gconn = message;
  intercom.setIntercomState.call(null, message, "start");
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
  communications.peerChannels = communications.channelsFromConnection.call(null, message);
  communications.intercomMeta.knownPeers = cljs.core.conj.call(null, communications.intercomMeta.knownPeers, message.peer);
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", cljs.core.nth.call(null, communications.peerChannels, 1));
  communications.intercomMeta.p2pchans = cljs.core.concat.call(null, communications.intercomMeta.p2pchans, communications.peerChannels);
  communications.intercomMeta.knownPeersChannels = cljs.core.conj.call(null, communications.intercomMeta.knownPeersChannels, cljs.core.nth.call(null, communications.peerChannels, 1));
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
  return communications.peerChannels;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_13206) {
            var state_val_13207 = state_13206[1];
            if (state_val_13207 === 4) {
              var inst_13201 = state_13206[2];
              var inst_13202 = communications.gotFromHash = inst_13201;
              var inst_13203 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_13204 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_13206__$1 = function() {
                var statearr_13208 = state_13206;
                statearr_13208[5] = inst_13202;
                statearr_13208[6] = inst_13203;
                return statearr_13208;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13206__$1, inst_13204);
            } else {
              if (state_val_13207 === 3) {
                var inst_13197 = state_13206[2];
                var inst_13198 = communications.blockk.hash;
                var inst_13199 = database.g.call(null, inst_13198);
                var state_13206__$1 = function() {
                  var statearr_13209 = state_13206;
                  statearr_13209[7] = inst_13197;
                  return statearr_13209;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13206__$1, 4, inst_13199);
              } else {
                if (state_val_13207 === 2) {
                  var inst_13190 = state_13206[2];
                  var inst_13191 = communications.blockk = inst_13190;
                  var inst_13192 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_13193 = communications.blockk.hash;
                  var inst_13194 = logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_13193);
                  var inst_13195 = blockchain.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_13206__$1 = function() {
                    var statearr_13210 = state_13206;
                    statearr_13210[8] = inst_13191;
                    statearr_13210[9] = inst_13192;
                    statearr_13210[10] = inst_13194;
                    return statearr_13210;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13206__$1, 3, inst_13195);
                } else {
                  if (state_val_13207 === 1) {
                    var inst_13187 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_13188 = blockchain.makeBlock.call(null, message);
                    var state_13206__$1 = function() {
                      var statearr_13211 = state_13206;
                      statearr_13211[11] = inst_13187;
                      return statearr_13211;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13206__$1, 2, inst_13188);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_13213 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13213[0] = state_machine__5728__auto__;
              statearr_13213[1] = 1;
              return statearr_13213;
            };
            var state_machine__5728__auto____1 = function(state_13206) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_13206);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_13206) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_13206);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_13214 = f__5741__auto__.call(null);
        statearr_13214[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_13214;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
communications.onTransaction = function onTransaction(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return crypto.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", blockchain.memPool);
  blockchain.addTransactionToMemPool.call(null, message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    mining.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, blockchain.memPool) > 3) {
    var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
      return function() {
        var f__5741__auto__ = function() {
          var switch__5727__auto__ = function(c__5740__auto__) {
            return function(state_13235) {
              var state_val_13236 = state_13235[1];
              if (state_val_13236 === 2) {
                var inst_13230 = state_13235[2];
                var inst_13231 = communications.fmroot = inst_13230;
                var inst_13232 = logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_13233 = mining.mine.call(null, communications.fmroot);
                var state_13235__$1 = function() {
                  var statearr_13237 = state_13235;
                  statearr_13237[5] = inst_13232;
                  statearr_13237[6] = inst_13231;
                  return statearr_13237;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13235__$1, inst_13233);
              } else {
                if (state_val_13236 === 1) {
                  var inst_13228 = crypto.merkleRoot.call(null, blockchain.memPool);
                  var state_13235__$1 = state_13235;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13235__$1, 2, inst_13228);
                } else {
                  return null;
                }
              }
            };
          }(c__5740__auto__);
          return function(switch__5727__auto__, c__5740__auto__) {
            return function() {
              var state_machine__5728__auto__ = null;
              var state_machine__5728__auto____0 = function() {
                var statearr_13239 = [null, null, null, null, null, null, null];
                statearr_13239[0] = state_machine__5728__auto__;
                statearr_13239[1] = 1;
                return statearr_13239;
              };
              var state_machine__5728__auto____1 = function(state_13235) {
                while (true) {
                  var result__5729__auto__ = switch__5727__auto__.call(null, state_13235);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5729__auto__;
                  }
                  break;
                }
              };
              state_machine__5728__auto__ = function(state_13235) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5728__auto____0.call(this);
                  case 1:
                    return state_machine__5728__auto____1.call(this, state_13235);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
              state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
              return state_machine__5728__auto__;
            }();
          }(switch__5727__auto__, c__5740__auto__);
        }();
        var state__5742__auto__ = function() {
          var statearr_13240 = f__5741__auto__.call(null);
          statearr_13240[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
          return statearr_13240;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
      };
    }(c__5740__auto__));
    return c__5740__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  pubsub.sub.call(null, "blockMined", communications.onBlockMined);
  pubsub.sub.call(null, "crypto", communications.onCrypto);
  pubsub.sub.call(null, "transaction", communications.onTransaction);
  return pubsub.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("app.crypto");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
goog.require("database");
goog.require("database");
app.crypto.bHash = function bHash(blockHeader) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10453) {
            var state_val_10454 = state_10453[1];
            if (state_val_10454 === 2) {
              var inst_10450 = state_10453[2];
              var inst_10451 = app.crypto.blockHash = inst_10450;
              var state_10453__$1 = function() {
                var statearr_10455 = state_10453;
                statearr_10455[5] = inst_10451;
                return statearr_10455;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10453__$1, app.crypto.blockHash);
            } else {
              if (state_val_10454 === 1) {
                var inst_10445 = JSON.stringify(blockHeader);
                var inst_10446 = app.crypto.stringified = inst_10445;
                var inst_10447 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", app.crypto.stringified);
                var inst_10448 = app.crypto.s256.call(null, app.crypto.stringified);
                var state_10453__$1 = function() {
                  var statearr_10456 = state_10453;
                  statearr_10456[6] = inst_10446;
                  statearr_10456[7] = inst_10447;
                  return statearr_10456;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10453__$1, 2, inst_10448);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10458 = [null, null, null, null, null, null, null, null];
              statearr_10458[0] = state_machine__5728__auto__;
              statearr_10458[1] = 1;
              return statearr_10458;
            };
            var state_machine__5728__auto____1 = function(state_10453) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10453);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10453) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10453);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10459 = f__5741__auto__.call(null);
        statearr_10459[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10459;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
app.crypto.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
app.crypto.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
app.crypto.merkleRoot = function merkleRoot(transactions) {
  logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10601) {
            var state_val_10602 = state_10601[1];
            if (state_val_10602 === 9) {
              var inst_10593 = state_10601[2];
              var inst_10594 = app.crypto.fromC = inst_10593;
              var inst_10595 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", app.crypto.fromC);
              var inst_10596 = app.crypto.fromC.type = "fmr";
              var inst_10599 = {"value":app.crypto.fromC, "type":"fmr"};
              var state_10601__$1 = function() {
                var statearr_10604 = state_10601;
                statearr_10604[5] = inst_10594;
                statearr_10604[6] = inst_10595;
                statearr_10604[7] = inst_10596;
                return statearr_10604;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10601__$1, inst_10599);
            } else {
              if (state_val_10602 === 8) {
                var inst_10589 = state_10601[2];
                var state_10601__$1 = state_10601;
                var statearr_10605_10624 = state_10601__$1;
                statearr_10605_10624[2] = inst_10589;
                statearr_10605_10624[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10602 === 7) {
                  var inst_10567 = state_10601[8];
                  var inst_10585 = inst_10567.shift();
                  var inst_10586 = inst_10567.length;
                  var tmp10603 = inst_10567;
                  var inst_10565 = inst_10585;
                  var inst_10566 = inst_10586;
                  var inst_10567__$1 = tmp10603;
                  var state_10601__$1 = function() {
                    var statearr_10606 = state_10601;
                    statearr_10606[9] = inst_10565;
                    statearr_10606[10] = inst_10566;
                    statearr_10606[8] = inst_10567__$1;
                    return statearr_10606;
                  }();
                  var statearr_10607_10625 = state_10601__$1;
                  statearr_10607_10625[2] = null;
                  statearr_10607_10625[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10602 === 6) {
                    var inst_10565 = state_10601[9];
                    var inst_10566 = state_10601[10];
                    var inst_10567 = state_10601[8];
                    var inst_10581 = cljs.core.async.chan.call(null, 1);
                    var inst_10582 = function() {
                      var c__5740__auto____$1 = inst_10581;
                      var next = inst_10565;
                      var cnt = inst_10566;
                      var txs = inst_10567;
                      return function(c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__) {
                        return function() {
                          var f__5741__auto__ = function() {
                            var switch__5727__auto__ = function(c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__) {
                              return function(state_10579) {
                                var state_val_10580 = state_10579[1];
                                if (state_val_10580 === 1) {
                                  var state_10579__$1 = state_10579;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10579__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__);
                            return function(switch__5727__auto__, c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__) {
                              return function() {
                                var state_machine__5728__auto__ = null;
                                var state_machine__5728__auto____0 = function() {
                                  var statearr_10609 = [null, null, null, null, null];
                                  statearr_10609[0] = state_machine__5728__auto__;
                                  statearr_10609[1] = 1;
                                  return statearr_10609;
                                };
                                var state_machine__5728__auto____1 = function(state_10579) {
                                  while (true) {
                                    var result__5729__auto__ = switch__5727__auto__.call(null, state_10579);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5729__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5728__auto__ = function(state_10579) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5728__auto____0.call(this);
                                    case 1:
                                      return state_machine__5728__auto____1.call(this, state_10579);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
                                state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
                                return state_machine__5728__auto__;
                              }();
                            }(switch__5727__auto__, c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__);
                          }();
                          var state__5742__auto__ = function() {
                            var statearr_10610 = f__5741__auto__.call(null);
                            statearr_10610[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto____$1;
                            return statearr_10610;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
                        };
                      }(c__5740__auto____$1, next, cnt, txs, inst_10565, inst_10566, inst_10567, inst_10581, state_val_10602, c__5740__auto__);
                    }();
                    var inst_10583 = cljs.core.async.impl.dispatch.run.call(null, inst_10582);
                    var state_10601__$1 = function() {
                      var statearr_10611 = state_10601;
                      statearr_10611[11] = inst_10583;
                      return statearr_10611;
                    }();
                    var statearr_10612_10626 = state_10601__$1;
                    statearr_10612_10626[2] = inst_10581;
                    statearr_10612_10626[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10602 === 5) {
                      var inst_10565 = state_10601[9];
                      var inst_10566 = state_10601[10];
                      var inst_10571 = state_10601[2];
                      var inst_10572 = app.crypto.tx = inst_10571;
                      var inst_10573 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                      var inst_10574 = app.crypto.tx + inst_10565;
                      var inst_10575 = app.crypto.sha256c.call(null, inst_10573, inst_10574);
                      var inst_10576 = 0 === inst_10566;
                      var state_10601__$1 = function() {
                        var statearr_10613 = state_10601;
                        statearr_10613[12] = inst_10572;
                        statearr_10613[13] = inst_10575;
                        return statearr_10613;
                      }();
                      if (cljs.core.truth_(inst_10576)) {
                        var statearr_10614_10627 = state_10601__$1;
                        statearr_10614_10627[1] = 6;
                      } else {
                        var statearr_10615_10628 = state_10601__$1;
                        statearr_10615_10628[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10602 === 4) {
                        var inst_10591 = state_10601[2];
                        var state_10601__$1 = function() {
                          var statearr_10616 = state_10601;
                          statearr_10616[14] = inst_10591;
                          return statearr_10616;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10601__$1, 9, app.crypto.shaC);
                      } else {
                        if (state_val_10602 === 3) {
                          var inst_10566 = state_10601[10];
                          var inst_10569 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_10566);
                          var state_10601__$1 = function() {
                            var statearr_10617 = state_10601;
                            statearr_10617[15] = inst_10569;
                            return statearr_10617;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10601__$1, 5, app.crypto.shaC);
                        } else {
                          if (state_val_10602 === 2) {
                            var inst_10550 = state_10601[2];
                            var inst_10551 = cljs.core.async.chan.call(null);
                            var inst_10552 = app.crypto.shaC = inst_10551;
                            var inst_10553 = transactions.length;
                            var inst_10554 = app.crypto.originl = inst_10553;
                            var inst_10555 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", app.crypto.originl);
                            var inst_10556 = transactions.shift();
                            var inst_10557 = app.crypto.tx = inst_10556;
                            var inst_10558 = transactions.shift();
                            var inst_10559 = app.crypto.next = inst_10558;
                            var inst_10560 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                            var inst_10561 = app.crypto.tx + cljs.core.next;
                            var inst_10562 = app.crypto.sha256c.call(null, inst_10560, inst_10561);
                            var inst_10563 = transactions.shift();
                            var inst_10564 = transactions.length;
                            var inst_10565 = inst_10563;
                            var inst_10566 = inst_10564;
                            var inst_10567 = transactions;
                            var state_10601__$1 = function() {
                              var statearr_10618 = state_10601;
                              statearr_10618[9] = inst_10565;
                              statearr_10618[16] = inst_10562;
                              statearr_10618[10] = inst_10566;
                              statearr_10618[17] = inst_10552;
                              statearr_10618[18] = inst_10557;
                              statearr_10618[8] = inst_10567;
                              statearr_10618[19] = inst_10555;
                              statearr_10618[20] = inst_10550;
                              statearr_10618[21] = inst_10559;
                              statearr_10618[22] = inst_10554;
                              return statearr_10618;
                            }();
                            var statearr_10619_10629 = state_10601__$1;
                            statearr_10619_10629[2] = null;
                            statearr_10619_10629[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10602 === 1) {
                              var inst_10542 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_10543 = app.crypto.tr = transactions;
                              var inst_10544 = function() {
                                return function(inst_10542, inst_10543, state_val_10602, c__5740__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", app.crypto.tr);
                                    return app.crypto.tr;
                                  };
                                }(inst_10542, inst_10543, state_val_10602, c__5740__auto__);
                              }();
                              var inst_10545 = app.crypto.a = inst_10544;
                              var inst_10546 = function() {
                                return function(inst_10542, inst_10543, inst_10544, inst_10545, state_val_10602, c__5740__auto__) {
                                  return function() {
                                    return database.update.call(null, "txs", app.crypto.a);
                                  };
                                }(inst_10542, inst_10543, inst_10544, inst_10545, state_val_10602, c__5740__auto__);
                              }();
                              var inst_10547 = app.crypto.utx = inst_10546;
                              var inst_10548 = database.update.call(null, "txs", app.crypto.a);
                              var state_10601__$1 = function() {
                                var statearr_10620 = state_10601;
                                statearr_10620[23] = inst_10543;
                                statearr_10620[24] = inst_10545;
                                statearr_10620[25] = inst_10542;
                                statearr_10620[26] = inst_10547;
                                return statearr_10620;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10601__$1, 2, inst_10548);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10622 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10622[0] = state_machine__5728__auto__;
              statearr_10622[1] = 1;
              return statearr_10622;
            };
            var state_machine__5728__auto____1 = function(state_10601) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10601);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10601) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10601);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10623 = f__5741__auto__.call(null);
        statearr_10623[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10623;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
app.crypto.shaC = cljs.core.async.chan.call(null);
app.crypto.resultToCh = function resultToCh(chan, digest) {
  app.crypto.m = app.crypto.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", app.crypto.m);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10641) {
            var state_val_10642 = state_10641[1];
            if (state_val_10642 === 2) {
              var inst_10639 = state_10641[2];
              var state_10641__$1 = state_10641;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10641__$1, inst_10639);
            } else {
              if (state_val_10642 === 1) {
                var state_10641__$1 = state_10641;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10641__$1, 2, chan, app.crypto.m);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10644 = [null, null, null, null, null];
              statearr_10644[0] = state_machine__5728__auto__;
              statearr_10644[1] = 1;
              return statearr_10644;
            };
            var state_machine__5728__auto____1 = function(state_10641) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10641);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10641) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10641);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10645 = f__5741__auto__.call(null);
        statearr_10645[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10645;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
app.crypto.sha256 = function sha256(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj10649 = {"name":"SHA-256"};
    return obj10649;
  }(), app.crypto.encode.call(null, x)).then(app.crypto.shaCallb);
};
app.crypto.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj10653 = {"name":"SHA-256"};
    return obj10653;
  }(), app.crypto.encode.call(null, x)).then(c);
};
app.crypto.s256 = function s256(k) {
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "about to sha256 ", k);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_10692) {
            var state_val_10693 = state_10692[1];
            if (state_val_10693 === 2) {
              var inst_10686 = state_10692[2];
              var inst_10687 = app.crypto.arraybtostring.call(null, inst_10686);
              var inst_10688 = app.crypto.r = inst_10687;
              var inst_10689 = "got from sha256 " + k;
              var inst_10690 = logger.og.call(null, new cljs.core.Keyword(null, "s256", "s256", -1445609188), inst_10689, app.crypto.r);
              var state_10692__$1 = function() {
                var statearr_10694 = state_10692;
                statearr_10694[5] = inst_10688;
                statearr_10694[6] = inst_10690;
                return statearr_10694;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10692__$1, app.crypto.r);
            } else {
              if (state_val_10693 === 1) {
                var inst_10677 = cljs.core.async.chan.call(null);
                var inst_10680 = {"name":"SHA-256"};
                var inst_10681 = app.crypto.encode.call(null, k);
                var inst_10682 = crypto.subtle.digest(inst_10680, inst_10681);
                var inst_10683 = function() {
                  var c = inst_10677;
                  return function(c, inst_10677, inst_10680, inst_10681, inst_10682, state_val_10693, c__5740__auto__) {
                    return function(p1__10654_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__10654_SHARP_);
                    };
                  }(c, inst_10677, inst_10680, inst_10681, inst_10682, state_val_10693, c__5740__auto__);
                }();
                var inst_10684 = inst_10682.then(inst_10683);
                var state_10692__$1 = function() {
                  var statearr_10695 = state_10692;
                  statearr_10695[7] = inst_10684;
                  return statearr_10695;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10692__$1, 2, inst_10677);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_10697 = [null, null, null, null, null, null, null, null];
              statearr_10697[0] = state_machine__5728__auto__;
              statearr_10697[1] = 1;
              return statearr_10697;
            };
            var state_machine__5728__auto____1 = function(state_10692) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_10692);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_10692) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_10692);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_10698 = f__5741__auto__.call(null);
        statearr_10698[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_10698;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
app.crypto.shaCallb = function shaCallb(digest) {
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  app.crypto.h = app.crypto.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), app.crypto.h);
  return pubsub.pub.call(null, "crypto", app.crypto.h);
};
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("app.main");
goog.require("cljs.core");
goog.require("pouchDB");
goog.require("peerjs");
goog.require("blockchain");
goog.require("database");
goog.require("reagent.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("reagent.core");
goog.require("intercom");
goog.require("intercom");
goog.require("pubsub");
goog.require("blockchain");
goog.require("html");
goog.require("reagent.core");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("communications");
goog.require("logger");
goog.require("html");
goog.require("logger");
goog.require("pouchDB");
goog.require("database");
goog.require("crypto");
cljs.core.enable_console_print_BANG_.call(null);
app.main.initDBase = function initDBase(dbase) {
  var c = cljs.core.async.chan.call(null);
  var c__5740__auto___14739 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto___14739, c) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto___14739, c) {
          return function(state_14724) {
            var state_val_14725 = state_14724[1];
            if (state_val_14725 === 7) {
              var inst_14700 = state_14724[5];
              var inst_14703 = state_14724[2];
              var inst_14704 = cljs.core.PersistentVector.EMPTY;
              var inst_14705 = {"header":inst_14700, "hash":inst_14703, "transactions":inst_14704};
              var inst_14706 = app.main.blck = inst_14705;
              var inst_14707 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", app.main.blck);
              var inst_14708 = app.main.blck.header;
              var inst_14709 = inst_14708.heightFromRoot = 0;
              var inst_14710 = database.ps.call(null, "last", app.main.blck);
              var state_14724__$1 = function() {
                var statearr_14726 = state_14724;
                statearr_14726[6] = inst_14707;
                statearr_14726[7] = inst_14706;
                statearr_14726[8] = inst_14709;
                return statearr_14726;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 8, inst_14710);
            } else {
              if (state_val_14725 === 1) {
                var inst_14685 = database.g.call(null, "last");
                var state_14724__$1 = state_14724;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 2, inst_14685);
              } else {
                if (state_val_14725 === 4) {
                  var inst_14694 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_14695 = database.ps.call(null, "height", 0);
                  var state_14724__$1 = function() {
                    var statearr_14727 = state_14724;
                    statearr_14727[9] = inst_14694;
                    return statearr_14727;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 6, inst_14695);
                } else {
                  if (state_val_14725 === 6) {
                    var inst_14697 = state_14724[2];
                    var inst_14700 = blockchain.makeBlockHeader.call(null, 0, 0, 0, 0, 0, 0, 0);
                    var inst_14701 = crypto.bHash.call(null, 0);
                    var state_14724__$1 = function() {
                      var statearr_14728 = state_14724;
                      statearr_14728[10] = inst_14697;
                      statearr_14728[5] = inst_14700;
                      return statearr_14728;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 7, inst_14701);
                  } else {
                    if (state_val_14725 === 3) {
                      var inst_14692 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", app.main.lastone);
                      var state_14724__$1 = state_14724;
                      var statearr_14729_14740 = state_14724__$1;
                      statearr_14729_14740[2] = inst_14692;
                      statearr_14729_14740[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14725 === 2) {
                        var inst_14687 = state_14724[2];
                        var inst_14688 = app.main.lastone = inst_14687;
                        var inst_14689 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_14690 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", app.main.lastone);
                        var state_14724__$1 = function() {
                          var statearr_14730 = state_14724;
                          statearr_14730[11] = inst_14688;
                          statearr_14730[12] = inst_14689;
                          statearr_14730[13] = inst_14690;
                          return statearr_14730;
                        }();
                        if (cljs.core.truth_(app.main.lastone)) {
                          var statearr_14731_14741 = state_14724__$1;
                          statearr_14731_14741[1] = 3;
                        } else {
                          var statearr_14732_14742 = state_14724__$1;
                          statearr_14732_14742[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14725 === 9) {
                          var inst_14716 = state_14724[2];
                          var inst_14717 = "b" + 0;
                          var inst_14718 = database.ps.call(null, inst_14717, app.main.blck);
                          var state_14724__$1 = function() {
                            var statearr_14733 = state_14724;
                            statearr_14733[14] = inst_14716;
                            return statearr_14733;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 10, inst_14718);
                        } else {
                          if (state_val_14725 === 5) {
                            var inst_14722 = state_14724[2];
                            var state_14724__$1 = state_14724;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14724__$1, inst_14722);
                          } else {
                            if (state_val_14725 === 10) {
                              var inst_14720 = state_14724[2];
                              var state_14724__$1 = state_14724;
                              var statearr_14734_14743 = state_14724__$1;
                              statearr_14734_14743[2] = inst_14720;
                              statearr_14734_14743[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14725 === 8) {
                                var inst_14712 = state_14724[2];
                                var inst_14713 = app.main.blck.hash;
                                var inst_14714 = database.ps.call(null, inst_14713, app.main.blck);
                                var state_14724__$1 = function() {
                                  var statearr_14735 = state_14724;
                                  statearr_14735[15] = inst_14712;
                                  return statearr_14735;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 9, inst_14714);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto___14739, c);
        return function(switch__5727__auto__, c__5740__auto___14739, c) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_14737 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14737[0] = state_machine__5728__auto__;
              statearr_14737[1] = 1;
              return statearr_14737;
            };
            var state_machine__5728__auto____1 = function(state_14724) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_14724);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_14724) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_14724);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto___14739, c);
      }();
      var state__5742__auto__ = function() {
        var statearr_14738 = f__5741__auto__.call(null);
        statearr_14738[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto___14739;
        return statearr_14738;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto___14739, c));
  return 1;
};
app.main.start = cljs.core.async.chan.call(null);
app.main.transactionch = cljs.core.async.chan.call(null);
app.main.transactionch.type = "transactionch";
app.main.cryptoCh = cljs.core.async.chan.call(null);
app.main.cryptoCh.type = "cryptoch";
$(document).on("transaction", function(a1, a2) {
  return pubsub.pub.call(null, "transaction", a2);
});
app.main.connectTo = function connectTo(ev, id) {
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_14786) {
            var state_val_14787 = state_14786[1];
            if (state_val_14787 === 4) {
              var inst_14781 = state_14786[2];
              var inst_14782 = inst_14781.connect(id);
              var inst_14783 = cljs.core.partial.call(null, communications.onOpen, inst_14782);
              var inst_14784 = inst_14782.on("open", inst_14783);
              var state_14786__$1 = state_14786;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14786__$1, inst_14784);
            } else {
              if (state_val_14787 === 3) {
                var inst_14777 = state_14786[2];
                var inst_14778 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_14777);
                var inst_14779 = pubsub.get.call(null);
                var state_14786__$1 = function() {
                  var statearr_14788 = state_14786;
                  statearr_14788[5] = inst_14778;
                  return statearr_14788;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14786__$1, 4, inst_14779);
              } else {
                if (state_val_14787 === 2) {
                  var inst_14773 = state_14786[2];
                  var inst_14774 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_14773);
                  var inst_14775 = pubsub.get.call(null);
                  var state_14786__$1 = function() {
                    var statearr_14789 = state_14786;
                    statearr_14789[6] = inst_14774;
                    return statearr_14789;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14786__$1, 3, inst_14775);
                } else {
                  if (state_val_14787 === 1) {
                    var inst_14769 = cljs.core.first.call(null, id);
                    var inst_14770 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_14769);
                    var inst_14771 = pubsub.get.call(null);
                    var state_14786__$1 = function() {
                      var statearr_14790 = state_14786;
                      statearr_14790[7] = inst_14770;
                      return statearr_14790;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14786__$1, 2, inst_14771);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_14792 = [null, null, null, null, null, null, null, null];
              statearr_14792[0] = state_machine__5728__auto__;
              statearr_14792[1] = 1;
              return statearr_14792;
            };
            var state_machine__5728__auto____1 = function(state_14786) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_14786);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_14786) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_14786);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_14793 = f__5741__auto__.call(null);
        statearr_14793[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_14793;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
$(document).on("connectTo", app.main.connectTo);
app.main.empty_string = "";
app.main.setID = function setID(ev, id) {
  cljs.core.println.call(null, id);
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_14821) {
            var state_val_14822 = state_14821[1];
            if (state_val_14822 === 2) {
              var inst_14814 = state_14821[2];
              var inst_14815 = console.log(inst_14814);
              var inst_14816 = new Peer(id, peerjs.peerParams);
              var inst_14817 = app.main.peerjs = inst_14816;
              var inst_14818 = pubsub.init.call(null, app.main.peerjs);
              var inst_14819 = app.main.peerjs.on("connection", communications.onConnection);
              var state_14821__$1 = function() {
                var statearr_14823 = state_14821;
                statearr_14823[5] = inst_14817;
                statearr_14823[6] = inst_14815;
                statearr_14823[7] = inst_14818;
                return statearr_14823;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14821__$1, inst_14819);
            } else {
              if (state_val_14822 === 1) {
                var inst_14811 = database.p.call(null, "lid", id);
                var inst_14812 = database.g.call(null, "lid");
                var state_14821__$1 = function() {
                  var statearr_14824 = state_14821;
                  statearr_14824[8] = inst_14811;
                  return statearr_14824;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14821__$1, 2, inst_14812);
              } else {
                return null;
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_14826 = [null, null, null, null, null, null, null, null, null];
              statearr_14826[0] = state_machine__5728__auto__;
              statearr_14826[1] = 1;
              return statearr_14826;
            };
            var state_machine__5728__auto____1 = function(state_14821) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_14821);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_14821) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_14821);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_14827 = f__5741__auto__.call(null);
        statearr_14827[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_14827;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
$(document).on("setid", app.main.setID);
app.main.entryy = function entryy() {
  logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "Hello wor 32 d rdaldad!");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "about to connect from heere");
  var c__5740__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5740__auto__) {
    return function() {
      var f__5741__auto__ = function() {
        var switch__5727__auto__ = function(c__5740__auto__) {
          return function(state_14888) {
            var state_val_14889 = state_14888[1];
            if (state_val_14889 === 6) {
              var inst_14880 = state_14888[2];
              var state_14888__$1 = state_14888;
              var statearr_14890_14900 = state_14888__$1;
              statearr_14890_14900[2] = inst_14880;
              statearr_14890_14900[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14889 === 5) {
                var inst_14882 = state_14888[2];
                var inst_14883 = pubsub.initpubsub.call(null);
                var inst_14884 = communications.setupComm.call(null);
                var inst_14885 = communications.startP2PCommLoop.call(null);
                var inst_14886 = html.run.call(null);
                var state_14888__$1 = function() {
                  var statearr_14891 = state_14888;
                  statearr_14891[5] = inst_14883;
                  statearr_14891[6] = inst_14882;
                  statearr_14891[7] = inst_14884;
                  statearr_14891[8] = inst_14885;
                  return statearr_14891;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14888__$1, inst_14886);
              } else {
                if (state_val_14889 === 4) {
                  var inst_14878 = app.main.initDBase.call(null);
                  var state_14888__$1 = state_14888;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14888__$1, 6, inst_14878);
                } else {
                  if (state_val_14889 === 3) {
                    var inst_14870 = console.log(app.main.id);
                    var inst_14871 = $("#id");
                    var inst_14872 = inst_14871.val(app.main.id);
                    var inst_14873 = new Peer(app.main.id, peerjs.peerParams);
                    var inst_14874 = app.main.peerjs = inst_14873;
                    var inst_14875 = pubsub.init.call(null, app.main.peerjs);
                    var inst_14876 = app.main.peerjs.on("connection", communications.onConnection);
                    var state_14888__$1 = function() {
                      var statearr_14892 = state_14888;
                      statearr_14892[9] = inst_14872;
                      statearr_14892[10] = inst_14875;
                      statearr_14892[11] = inst_14874;
                      statearr_14892[12] = inst_14870;
                      return statearr_14892;
                    }();
                    var statearr_14893_14901 = state_14888__$1;
                    statearr_14893_14901[2] = inst_14876;
                    statearr_14893_14901[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14889 === 2) {
                      var inst_14866 = state_14888[2];
                      var inst_14867 = app.main.id = inst_14866;
                      var inst_14868 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", app.main.id);
                      var state_14888__$1 = function() {
                        var statearr_14894 = state_14888;
                        statearr_14894[13] = inst_14867;
                        statearr_14894[14] = inst_14868;
                        return statearr_14894;
                      }();
                      if (cljs.core.truth_(app.main.id)) {
                        var statearr_14895_14902 = state_14888__$1;
                        statearr_14895_14902[1] = 3;
                      } else {
                        var statearr_14896_14903 = state_14888__$1;
                        statearr_14896_14903[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14889 === 1) {
                        var inst_14864 = database.g.call(null, "lid");
                        var state_14888__$1 = state_14888;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14888__$1, 2, inst_14864);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5740__auto__);
        return function(switch__5727__auto__, c__5740__auto__) {
          return function() {
            var state_machine__5728__auto__ = null;
            var state_machine__5728__auto____0 = function() {
              var statearr_14898 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14898[0] = state_machine__5728__auto__;
              statearr_14898[1] = 1;
              return statearr_14898;
            };
            var state_machine__5728__auto____1 = function(state_14888) {
              while (true) {
                var result__5729__auto__ = switch__5727__auto__.call(null, state_14888);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5729__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5729__auto__;
                }
                break;
              }
            };
            state_machine__5728__auto__ = function(state_14888) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5728__auto____0.call(this);
                case 1:
                  return state_machine__5728__auto____1.call(this, state_14888);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5728__auto____0;
            state_machine__5728__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5728__auto____1;
            return state_machine__5728__auto__;
          }();
        }(switch__5727__auto__, c__5740__auto__);
      }();
      var state__5742__auto__ = function() {
        var statearr_14899 = f__5741__auto__.call(null);
        statearr_14899[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5740__auto__;
        return statearr_14899;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5742__auto__);
    };
  }(c__5740__auto__));
  return c__5740__auto__;
};
window.onload = app.main.entryy;
goog.provide("mockdatabase");
goog.require("cljs.core");
mockdatabase.mdbase = function() {
  var obj10399 = {};
  return obj10399;
}();
mockdatabase.g = function g(kie) {
  return mockdatabase.mdbase[kie];
};
mockdatabase.p = function p(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.ps = function ps(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.update = function update(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
goog.provide("mw");
goog.require("cljs.core");
mw.mdbase = cljs.core.List.EMPTY;
