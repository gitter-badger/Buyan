if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__11351__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__11351 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11351__delegate.call(this, args);
    };
    G__11351.cljs$lang$maxFixedArity = 0;
    G__11351.cljs$lang$applyTo = function(arglist__11352) {
      var args = cljs.core.seq(arglist__11352);
      return G__11351__delegate(args);
    };
    G__11351.cljs$core$IFn$_invoke$arity$variadic = G__11351__delegate;
    return G__11351;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3636__auto__ = ty;
    if (cljs.core.truth_(and__3636__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3636__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4518__auto___11353 = len;
  var i_11354 = 0;
  while (true) {
    if (i_11354 < n__4518__auto___11353) {
      new_arr[i_11354] = arr[i_11354];
      var G__11355 = i_11354 + 1;
      i_11354 = G__11355;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__11356__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__11356 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11356__delegate.call(this, array, i, idxs);
    };
    G__11356.cljs$lang$maxFixedArity = 2;
    G__11356.cljs$lang$applyTo = function(arglist__11357) {
      var array = cljs.core.first(arglist__11357);
      arglist__11357 = cljs.core.next(arglist__11357);
      var i = cljs.core.first(arglist__11357);
      var idxs = cljs.core.rest(arglist__11357);
      return G__11356__delegate(array, i, idxs);
    };
    G__11356.cljs$core$IFn$_invoke$arity$variadic = G__11356__delegate;
    return G__11356;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11358__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__11358 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11358__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11358.cljs$lang$maxFixedArity = 3;
    G__11358.cljs$lang$applyTo = function(arglist__11359) {
      var array = cljs.core.first(arglist__11359);
      arglist__11359 = cljs.core.next(arglist__11359);
      var idx = cljs.core.first(arglist__11359);
      arglist__11359 = cljs.core.next(arglist__11359);
      var idx2 = cljs.core.first(arglist__11359);
      var idxv = cljs.core.rest(arglist__11359);
      return G__11358__delegate(array, idx, idx2, idxv);
    };
    G__11358.cljs$core$IFn$_invoke$arity$variadic = G__11358__delegate;
    return G__11358;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj11361 = {};
  return obj11361;
}();
cljs.core.IFn = function() {
  var obj11363 = {};
  return obj11363;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj11365 = {};
  return obj11365;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3636__auto__ = value;
    if (and__3636__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4285__auto__ = value == null ? null : value;
    return function() {
      var or__3648__auto__ = cljs.core._clone[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clone["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj11367 = {};
  return obj11367;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._count[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._count["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj11369 = {};
  return obj11369;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._empty[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._empty["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj11371 = {};
  return obj11371;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._conj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj11373 = {};
  return obj11373;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj11375 = {};
  return obj11375;
}();
cljs.core.ISeq = function() {
  var obj11377 = {};
  return obj11377;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj11379 = {};
  return obj11379;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj11381 = {};
  return obj11381;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj11383 = {};
  return obj11383;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj11385 = {};
  return obj11385;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj11387 = {};
  return obj11387;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._val[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._val["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj11389 = {};
  return obj11389;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj11391 = {};
  return obj11391;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._peek[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._peek["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._pop[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj11393 = {};
  return obj11393;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj11395 = {};
  return obj11395;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj11397 = {};
  return obj11397;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj11399 = {};
  return obj11399;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj11401 = {};
  return obj11401;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._with_meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._with_meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj11403 = {};
  return obj11403;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj11405 = {};
  return obj11405;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj11407 = {};
  return obj11407;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._equiv[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._equiv["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj11409 = {};
  return obj11409;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._hash[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._hash["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj11411 = {};
  return obj11411;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj11413 = {};
  return obj11413;
}();
cljs.core.IList = function() {
  var obj11415 = {};
  return obj11415;
}();
cljs.core.IRecord = function() {
  var obj11417 = {};
  return obj11417;
}();
cljs.core.IReversible = function() {
  var obj11419 = {};
  return obj11419;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rseq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rseq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj11421 = {};
  return obj11421;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._entry_key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._entry_key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._comparator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._comparator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj11423 = {};
  return obj11423;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._write[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._write["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._flush[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._flush["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj11425 = {};
  return obj11425;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._pr_writer[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj11427 = {};
  return obj11427;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3636__auto__ = d;
    if (and__3636__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4285__auto__ = d == null ? null : d;
    return function() {
      var or__3648__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj11429 = {};
  return obj11429;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._notify_watches[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._add_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._remove_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj11431 = {};
  return obj11431;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._as_transient[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._as_transient["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj11433 = {};
  return obj11433;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj11435 = {};
  return obj11435;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj11437 = {};
  return obj11437;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj11439 = {};
  return obj11439;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj11441 = {};
  return obj11441;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj11443 = {};
  return obj11443;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._compare[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._compare["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj11445 = {};
  return obj11445;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._drop_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._drop_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj11447 = {};
  return obj11447;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj11449 = {};
  return obj11449;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj11451 = {};
  return obj11451;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._name[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._name["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._namespace[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._namespace["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj11453 = {};
  return obj11453;
}();
cljs.core.IReset = function() {
  var obj11455 = {};
  return obj11455;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj11457 = {};
  return obj11457;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj11459 = {};
  return obj11459;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._iterator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._iterator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__11460 = i + 2;
        var G__11461 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__11460;
        h1 = G__11461;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj11463 = {};
  return obj11463;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__11464 = i + 1;
          var G__11465 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__11464;
          hash = G__11465;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj11469 = {};
      return obj11469;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__11471 = o;
    if (G__11471) {
      var bit__4305__auto__ = G__11471.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4305__auto__ || G__11471.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3636__auto__) {
        return b.ns;
      } else {
        return and__3636__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__11473 = null;
  var G__11473__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__11473__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__11473 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11473__2.call(this, self__, coll);
      case 3:
        return G__11473__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11473.cljs$core$IFn$_invoke$arity$2 = G__11473__2;
  G__11473.cljs$core$IFn$_invoke$arity$3 = G__11473__3;
  return G__11473;
}();
cljs.core.Symbol.prototype.apply = function(self__, args11472) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11472)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__11475 = x;
  if (G__11475) {
    var bit__4312__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = bit__4312__auto__;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return G__11475.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__11475.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11475);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11475);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__11477 = value;
  if (G__11477) {
    var bit__4312__auto__ = G__11477.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4312__auto__ || G__11477.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__11477.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11477);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11477);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11479 = coll;
      if (G__11479) {
        var bit__4305__auto__ = G__11479.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4305__auto__ || G__11479.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11481 = coll;
      if (G__11481) {
        var bit__4305__auto__ = G__11481.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11481.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11483 = coll;
      if (G__11483) {
        var bit__4305__auto__ = G__11483.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11483.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11485 = coll;
      if (G__11485) {
        var bit__4305__auto__ = G__11485.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4305__auto__ || G__11485.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__11486__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11487 = y;
            var G__11488 = cljs.core.first.call(null, more);
            var G__11489 = cljs.core.next.call(null, more);
            x = G__11487;
            y = G__11488;
            more = G__11489;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11486 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11486__delegate.call(this, x, y, more);
    };
    G__11486.cljs$lang$maxFixedArity = 2;
    G__11486.cljs$lang$applyTo = function(arglist__11490) {
      var x = cljs.core.first(arglist__11490);
      arglist__11490 = cljs.core.next(arglist__11490);
      var y = cljs.core.first(arglist__11490);
      var more = cljs.core.rest(arglist__11490);
      return G__11486__delegate(x, y, more);
    };
    G__11486.cljs$core$IFn$_invoke$arity$variadic = G__11486__delegate;
    return G__11486;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11491 = n + 1;
      var G__11492 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11493 = cljs.core.next.call(null, coll__$1);
      n = G__11491;
      hash_code = G__11492;
      coll__$1 = G__11493;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11494 = n + 1;
      var G__11495 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11496 = cljs.core.next.call(null, coll__$1);
      n = G__11494;
      hash_code = G__11495;
      coll__$1 = G__11496;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11497 = nval;
            var G__11498 = n + 1;
            val = G__11497;
            n = G__11498;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11499 = nval;
          var G__11500 = n + 1;
          val__$1 = G__11499;
          n = G__11500;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11501 = nval;
          var G__11502 = n + 1;
          val__$1 = G__11501;
          n = G__11502;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11503 = nval;
            var G__11504 = n + 1;
            val = G__11503;
            n = G__11504;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11505 = nval;
          var G__11506 = n + 1;
          val__$1 = G__11505;
          n = G__11506;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11507 = nval;
          var G__11508 = n + 1;
          val__$1 = G__11507;
          n = G__11508;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__11510 = x;
  if (G__11510) {
    var bit__4312__auto__ = G__11510.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4312__auto__ || G__11510.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__11510.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11510);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11510);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__11512 = x;
  if (G__11512) {
    var bit__4312__auto__ = G__11512.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4312__auto__ || G__11512.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__11512.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11512);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11512);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__11513 = sn;
      s = G__11513;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__11514__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__11515 = conj.call(null, coll, x);
          var G__11516 = cljs.core.first.call(null, xs);
          var G__11517 = cljs.core.next.call(null, xs);
          coll = G__11515;
          x = G__11516;
          xs = G__11517;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__11514 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11514__delegate.call(this, coll, x, xs);
    };
    G__11514.cljs$lang$maxFixedArity = 2;
    G__11514.cljs$lang$applyTo = function(arglist__11518) {
      var coll = cljs.core.first(arglist__11518);
      arglist__11518 = cljs.core.next(arglist__11518);
      var x = cljs.core.first(arglist__11518);
      var xs = cljs.core.rest(arglist__11518);
      return G__11514__delegate(coll, x, xs);
    };
    G__11514.cljs$core$IFn$_invoke$arity$variadic = G__11514__delegate;
    return G__11514;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__11519 = cljs.core.next.call(null, s);
      var G__11520 = acc + 1;
      s = G__11519;
      acc = G__11520;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11522 = coll;
      if (G__11522) {
        var bit__4305__auto__ = G__11522.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4305__auto__ || G__11522.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11523 = cljs.core.next.call(null, coll);
              var G__11524 = n - 1;
              coll = G__11523;
              n = G__11524;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11525 = cljs.core.next.call(null, coll);
              var G__11526 = n - 1;
              var G__11527 = not_found;
              coll = G__11525;
              n = G__11526;
              not_found = G__11527;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__11532 = coll;
          if (G__11532) {
            var bit__4305__auto__ = G__11532.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11532.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11533 = coll;
                  if (G__11533) {
                    var bit__4312__auto__ = G__11533.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11533.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11533.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11533);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11533);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__11534 = coll;
          if (G__11534) {
            var bit__4305__auto__ = G__11534.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11534.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11535 = coll;
                  if (G__11535) {
                    var bit__4312__auto__ = G__11535.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11535.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11535.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11535);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11535);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__11538 = o;
        if (G__11538) {
          var bit__4305__auto__ = G__11538.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11538.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__11539 = o;
        if (G__11539) {
          var bit__4305__auto__ = G__11539.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11539.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__11540__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__11541 = ret;
          var G__11542 = cljs.core.first.call(null, kvs);
          var G__11543 = cljs.core.second.call(null, kvs);
          var G__11544 = cljs.core.nnext.call(null, kvs);
          coll = G__11541;
          k = G__11542;
          v = G__11543;
          kvs = G__11544;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__11540 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11540__delegate.call(this, coll, k, v, kvs);
    };
    G__11540.cljs$lang$maxFixedArity = 3;
    G__11540.cljs$lang$applyTo = function(arglist__11545) {
      var coll = cljs.core.first(arglist__11545);
      arglist__11545 = cljs.core.next(arglist__11545);
      var k = cljs.core.first(arglist__11545);
      arglist__11545 = cljs.core.next(arglist__11545);
      var v = cljs.core.first(arglist__11545);
      var kvs = cljs.core.rest(arglist__11545);
      return G__11540__delegate(coll, k, v, kvs);
    };
    G__11540.cljs$core$IFn$_invoke$arity$variadic = G__11540__delegate;
    return G__11540;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__11546__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11547 = ret;
            var G__11548 = cljs.core.first.call(null, ks);
            var G__11549 = cljs.core.next.call(null, ks);
            coll = G__11547;
            k = G__11548;
            ks = G__11549;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11546 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11546__delegate.call(this, coll, k, ks);
    };
    G__11546.cljs$lang$maxFixedArity = 2;
    G__11546.cljs$lang$applyTo = function(arglist__11550) {
      var coll = cljs.core.first(arglist__11550);
      arglist__11550 = cljs.core.next(arglist__11550);
      var k = cljs.core.first(arglist__11550);
      var ks = cljs.core.rest(arglist__11550);
      return G__11546__delegate(coll, k, ks);
    };
    G__11546.cljs$core$IFn$_invoke$arity$variadic = G__11546__delegate;
    return G__11546;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3648__auto__ = goog.isFunction(f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11554 = f;
    if (G__11554) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto____$1 = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto____$1)) {
          return or__3648__auto____$1;
        } else {
          return G__11554.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__11554.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11554);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11554);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__11556 = null;
  var G__11556__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__11556__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__11556__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__11556__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__11556__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__11556__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__11556__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__11556__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__11556__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__11556__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11556__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11556__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11556__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11556__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11556__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11556__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11556__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11556__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11556__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11556__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11556__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11556__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__11556 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11556__1.call(this, self__);
      case 2:
        return G__11556__2.call(this, self__, a);
      case 3:
        return G__11556__3.call(this, self__, a, b);
      case 4:
        return G__11556__4.call(this, self__, a, b, c);
      case 5:
        return G__11556__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11556__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11556__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11556__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11556__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11556__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11556__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11556__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11556__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11556__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11556__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11556__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11556__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11556__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11556__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11556__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11556__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11556__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11556.cljs$core$IFn$_invoke$arity$1 = G__11556__1;
  G__11556.cljs$core$IFn$_invoke$arity$2 = G__11556__2;
  G__11556.cljs$core$IFn$_invoke$arity$3 = G__11556__3;
  G__11556.cljs$core$IFn$_invoke$arity$4 = G__11556__4;
  G__11556.cljs$core$IFn$_invoke$arity$5 = G__11556__5;
  G__11556.cljs$core$IFn$_invoke$arity$6 = G__11556__6;
  G__11556.cljs$core$IFn$_invoke$arity$7 = G__11556__7;
  G__11556.cljs$core$IFn$_invoke$arity$8 = G__11556__8;
  G__11556.cljs$core$IFn$_invoke$arity$9 = G__11556__9;
  G__11556.cljs$core$IFn$_invoke$arity$10 = G__11556__10;
  G__11556.cljs$core$IFn$_invoke$arity$11 = G__11556__11;
  G__11556.cljs$core$IFn$_invoke$arity$12 = G__11556__12;
  G__11556.cljs$core$IFn$_invoke$arity$13 = G__11556__13;
  G__11556.cljs$core$IFn$_invoke$arity$14 = G__11556__14;
  G__11556.cljs$core$IFn$_invoke$arity$15 = G__11556__15;
  G__11556.cljs$core$IFn$_invoke$arity$16 = G__11556__16;
  G__11556.cljs$core$IFn$_invoke$arity$17 = G__11556__17;
  G__11556.cljs$core$IFn$_invoke$arity$18 = G__11556__18;
  G__11556.cljs$core$IFn$_invoke$arity$19 = G__11556__19;
  G__11556.cljs$core$IFn$_invoke$arity$20 = G__11556__20;
  G__11556.cljs$core$IFn$_invoke$arity$21 = G__11556__21;
  G__11556.cljs$core$IFn$_invoke$arity$22 = G__11556__22;
  return G__11556;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args11555) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11555)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__11560 = o;
    if (G__11560) {
      var bit__4312__auto__ = G__11560.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__11560.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11560.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11560);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11560);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3636__auto__ = !(o == null);
    if (and__3636__auto__) {
      var G__11564 = o;
      if (G__11564) {
        var bit__4312__auto__ = G__11564.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4312__auto__ || G__11564.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__11564.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11564);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11564);
      }
    } else {
      return and__3636__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__11565__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11566 = ret;
            var G__11567 = cljs.core.first.call(null, ks);
            var G__11568 = cljs.core.next.call(null, ks);
            coll = G__11566;
            k = G__11567;
            ks = G__11568;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11565 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11565__delegate.call(this, coll, k, ks);
    };
    G__11565.cljs$lang$maxFixedArity = 2;
    G__11565.cljs$lang$applyTo = function(arglist__11569) {
      var coll = cljs.core.first(arglist__11569);
      arglist__11569 = cljs.core.next(arglist__11569);
      var k = cljs.core.first(arglist__11569);
      var ks = cljs.core.rest(arglist__11569);
      return G__11565__delegate(coll, k, ks);
    };
    G__11565.cljs$core$IFn$_invoke$arity$variadic = G__11565__delegate;
    return G__11565;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11571 = x;
    if (G__11571) {
      var bit__4312__auto__ = G__11571.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4312__auto__ || G__11571.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__11571.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11571);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11571);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11573 = x;
    if (G__11573) {
      var bit__4312__auto__ = G__11573.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4312__auto__ || G__11573.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__11573.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11573);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11573);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__11575 = x;
  if (G__11575) {
    var bit__4312__auto__ = G__11575.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4312__auto__ || G__11575.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__11575.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11575);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11575);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__11577 = x;
  if (G__11577) {
    var bit__4312__auto__ = G__11577.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4312__auto__ || G__11577.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__11577.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11577);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11577);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__11579 = x;
  if (G__11579) {
    var bit__4312__auto__ = G__11579.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4312__auto__ || G__11579.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__11579.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11579);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11579);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__11581 = x;
  if (G__11581) {
    var bit__4312__auto__ = G__11581.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4312__auto__ || G__11581.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__11581.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11581);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11581);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11583 = x;
    if (G__11583) {
      var bit__4312__auto__ = G__11583.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4312__auto__ || G__11583.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__11583.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11583);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11583);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__11585 = x;
  if (G__11585) {
    var bit__4312__auto__ = G__11585.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4312__auto__ || G__11585.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__11585.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11585);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11585);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__11587 = x;
  if (G__11587) {
    var bit__4305__auto__ = G__11587.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4305__auto__ || G__11587.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj11591 = {};
    return obj11591;
  };
  var js_obj__1 = function() {
    var G__11592__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__11592 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11592__delegate.call(this, keyvals);
    };
    G__11592.cljs$lang$maxFixedArity = 0;
    G__11592.cljs$lang$applyTo = function(arglist__11593) {
      var keyvals = cljs.core.seq(arglist__11593);
      return G__11592__delegate(keyvals);
    };
    G__11592.cljs$core$IFn$_invoke$arity$variadic = G__11592__delegate;
    return G__11592;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11594 = i__$1 + 1;
      var G__11595 = j__$1 + 1;
      var G__11596 = len__$1 - 1;
      i__$1 = G__11594;
      j__$1 = G__11595;
      len__$1 = G__11596;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11597 = i__$1 - 1;
      var G__11598 = j__$1 - 1;
      var G__11599 = len__$1 - 1;
      i__$1 = G__11597;
      j__$1 = G__11598;
      len__$1 = G__11599;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj11601 = {};
  return obj11601;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__11603 = s;
    if (G__11603) {
      var bit__4312__auto__ = G__11603.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4312__auto__ || G__11603.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__11603.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11603);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11603);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__11605 = s;
  if (G__11605) {
    var bit__4312__auto__ = G__11605.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4312__auto__ || G__11605.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__11605.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11605);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11605);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3648__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11609 = f;
    if (G__11609) {
      var bit__4312__auto__ = G__11609.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4312__auto__ || G__11609.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__11609.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11609);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11609);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__11610__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__11611 = cljs.core.conj.call(null, s, x__$1);
              var G__11612 = etc;
              s = G__11611;
              xs = G__11612;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__11610 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11610__delegate.call(this, x, y, more);
    };
    G__11610.cljs$lang$maxFixedArity = 2;
    G__11610.cljs$lang$applyTo = function(arglist__11613) {
      var x = cljs.core.first(arglist__11613);
      arglist__11613 = cljs.core.next(arglist__11613);
      var y = cljs.core.first(arglist__11613);
      var more = cljs.core.rest(arglist__11613);
      return G__11610__delegate(x, y, more);
    };
    G__11610.cljs$core$IFn$_invoke$arity$variadic = G__11610__delegate;
    return G__11610;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3648__auto__ = cljs.core.seq.call(null, coll);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__11615 = x;
            if (G__11615) {
              var bit__4305__auto__ = G__11615.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4305__auto__ || G__11615.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__11616 = xs;
        var G__11617 = ys;
        var G__11618 = len;
        var G__11619 = n + 1;
        xs = G__11616;
        ys = G__11617;
        len = G__11618;
        n = G__11619;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11620 = nval;
          var G__11621 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__11620;
          coll__$1 = G__11621;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__11624 = coll;
      if (G__11624) {
        var bit__4305__auto__ = G__11624.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11624.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__11625 = coll;
      if (G__11625) {
        var bit__4305__auto__ = G__11625.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11625.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__11626 = null;
      var G__11626__0 = function() {
        return f.call(null);
      };
      var G__11626__1 = function(x) {
        return cf.call(null, x);
      };
      var G__11626__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__11626 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__11626__0.call(this);
          case 1:
            return G__11626__1.call(this, x);
          case 2:
            return G__11626__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11626.cljs$core$IFn$_invoke$arity$0 = G__11626__0;
      G__11626.cljs$core$IFn$_invoke$arity$1 = G__11626__1;
      G__11626.cljs$core$IFn$_invoke$arity$2 = G__11626__2;
      return G__11626;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__11627__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__11627 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11627__delegate.call(this, x, y, more);
    };
    G__11627.cljs$lang$maxFixedArity = 2;
    G__11627.cljs$lang$applyTo = function(arglist__11628) {
      var x = cljs.core.first(arglist__11628);
      arglist__11628 = cljs.core.next(arglist__11628);
      var y = cljs.core.first(arglist__11628);
      var more = cljs.core.rest(arglist__11628);
      return G__11627__delegate(x, y, more);
    };
    G__11627.cljs$core$IFn$_invoke$arity$variadic = G__11627__delegate;
    return G__11627;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__11629__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__11629 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11629__delegate.call(this, x, y, more);
    };
    G__11629.cljs$lang$maxFixedArity = 2;
    G__11629.cljs$lang$applyTo = function(arglist__11630) {
      var x = cljs.core.first(arglist__11630);
      arglist__11630 = cljs.core.next(arglist__11630);
      var y = cljs.core.first(arglist__11630);
      var more = cljs.core.rest(arglist__11630);
      return G__11629__delegate(x, y, more);
    };
    G__11629.cljs$core$IFn$_invoke$arity$variadic = G__11629__delegate;
    return G__11629;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__11631__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__11631 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11631__delegate.call(this, x, y, more);
    };
    G__11631.cljs$lang$maxFixedArity = 2;
    G__11631.cljs$lang$applyTo = function(arglist__11632) {
      var x = cljs.core.first(arglist__11632);
      arglist__11632 = cljs.core.next(arglist__11632);
      var y = cljs.core.first(arglist__11632);
      var more = cljs.core.rest(arglist__11632);
      return G__11631__delegate(x, y, more);
    };
    G__11631.cljs$core$IFn$_invoke$arity$variadic = G__11631__delegate;
    return G__11631;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__11633__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__11633 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11633__delegate.call(this, x, y, more);
    };
    G__11633.cljs$lang$maxFixedArity = 2;
    G__11633.cljs$lang$applyTo = function(arglist__11634) {
      var x = cljs.core.first(arglist__11634);
      arglist__11634 = cljs.core.next(arglist__11634);
      var y = cljs.core.first(arglist__11634);
      var more = cljs.core.rest(arglist__11634);
      return G__11633__delegate(x, y, more);
    };
    G__11633.cljs$core$IFn$_invoke$arity$variadic = G__11633__delegate;
    return G__11633;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__11635__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__11636 = y;
            var G__11637 = cljs.core.first.call(null, more);
            var G__11638 = cljs.core.next.call(null, more);
            x = G__11636;
            y = G__11637;
            more = G__11638;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11635 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11635__delegate.call(this, x, y, more);
    };
    G__11635.cljs$lang$maxFixedArity = 2;
    G__11635.cljs$lang$applyTo = function(arglist__11639) {
      var x = cljs.core.first(arglist__11639);
      arglist__11639 = cljs.core.next(arglist__11639);
      var y = cljs.core.first(arglist__11639);
      var more = cljs.core.rest(arglist__11639);
      return G__11635__delegate(x, y, more);
    };
    G__11635.cljs$core$IFn$_invoke$arity$variadic = G__11635__delegate;
    return G__11635;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__11640__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11641 = y;
            var G__11642 = cljs.core.first.call(null, more);
            var G__11643 = cljs.core.next.call(null, more);
            x = G__11641;
            y = G__11642;
            more = G__11643;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11640 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11640__delegate.call(this, x, y, more);
    };
    G__11640.cljs$lang$maxFixedArity = 2;
    G__11640.cljs$lang$applyTo = function(arglist__11644) {
      var x = cljs.core.first(arglist__11644);
      arglist__11644 = cljs.core.next(arglist__11644);
      var y = cljs.core.first(arglist__11644);
      var more = cljs.core.rest(arglist__11644);
      return G__11640__delegate(x, y, more);
    };
    G__11640.cljs$core$IFn$_invoke$arity$variadic = G__11640__delegate;
    return G__11640;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__11645__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__11646 = y;
            var G__11647 = cljs.core.first.call(null, more);
            var G__11648 = cljs.core.next.call(null, more);
            x = G__11646;
            y = G__11647;
            more = G__11648;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11645 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11645__delegate.call(this, x, y, more);
    };
    G__11645.cljs$lang$maxFixedArity = 2;
    G__11645.cljs$lang$applyTo = function(arglist__11649) {
      var x = cljs.core.first(arglist__11649);
      arglist__11649 = cljs.core.next(arglist__11649);
      var y = cljs.core.first(arglist__11649);
      var more = cljs.core.rest(arglist__11649);
      return G__11645__delegate(x, y, more);
    };
    G__11645.cljs$core$IFn$_invoke$arity$variadic = G__11645__delegate;
    return G__11645;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__11650__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11651 = y;
            var G__11652 = cljs.core.first.call(null, more);
            var G__11653 = cljs.core.next.call(null, more);
            x = G__11651;
            y = G__11652;
            more = G__11653;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11650 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11650__delegate.call(this, x, y, more);
    };
    G__11650.cljs$lang$maxFixedArity = 2;
    G__11650.cljs$lang$applyTo = function(arglist__11654) {
      var x = cljs.core.first(arglist__11654);
      arglist__11654 = cljs.core.next(arglist__11654);
      var y = cljs.core.first(arglist__11654);
      var more = cljs.core.rest(arglist__11654);
      return G__11650__delegate(x, y, more);
    };
    G__11650.cljs$core$IFn$_invoke$arity$variadic = G__11650__delegate;
    return G__11650;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3955__auto__ = x;
    var y__3956__auto__ = y;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  };
  var max__3 = function() {
    var G__11655__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3955__auto__ = x;
        var y__3956__auto__ = y;
        return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
      }(), more);
    };
    var G__11655 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11655__delegate.call(this, x, y, more);
    };
    G__11655.cljs$lang$maxFixedArity = 2;
    G__11655.cljs$lang$applyTo = function(arglist__11656) {
      var x = cljs.core.first(arglist__11656);
      arglist__11656 = cljs.core.next(arglist__11656);
      var y = cljs.core.first(arglist__11656);
      var more = cljs.core.rest(arglist__11656);
      return G__11655__delegate(x, y, more);
    };
    G__11655.cljs$core$IFn$_invoke$arity$variadic = G__11655__delegate;
    return G__11655;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3962__auto__ = x;
    var y__3963__auto__ = y;
    return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
  };
  var min__3 = function() {
    var G__11657__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3962__auto__ = x;
        var y__3963__auto__ = y;
        return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
      }(), more);
    };
    var G__11657 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11657__delegate.call(this, x, y, more);
    };
    G__11657.cljs$lang$maxFixedArity = 2;
    G__11657.cljs$lang$applyTo = function(arglist__11658) {
      var x = cljs.core.first(arglist__11658);
      arglist__11658 = cljs.core.next(arglist__11658);
      var y = cljs.core.first(arglist__11658);
      var more = cljs.core.rest(arglist__11658);
      return G__11657__delegate(x, y, more);
    };
    G__11657.cljs$core$IFn$_invoke$arity$variadic = G__11657__delegate;
    return G__11657;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__11659__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__11659 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11659__delegate.call(this, x, y, more);
    };
    G__11659.cljs$lang$maxFixedArity = 2;
    G__11659.cljs$lang$applyTo = function(arglist__11660) {
      var x = cljs.core.first(arglist__11660);
      arglist__11660 = cljs.core.next(arglist__11660);
      var y = cljs.core.first(arglist__11660);
      var more = cljs.core.rest(arglist__11660);
      return G__11659__delegate(x, y, more);
    };
    G__11659.cljs$core$IFn$_invoke$arity$variadic = G__11659__delegate;
    return G__11659;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__11661__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__11661 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11661__delegate.call(this, x, y, more);
    };
    G__11661.cljs$lang$maxFixedArity = 2;
    G__11661.cljs$lang$applyTo = function(arglist__11662) {
      var x = cljs.core.first(arglist__11662);
      arglist__11662 = cljs.core.next(arglist__11662);
      var y = cljs.core.first(arglist__11662);
      var more = cljs.core.rest(arglist__11662);
      return G__11661__delegate(x, y, more);
    };
    G__11661.cljs$core$IFn$_invoke$arity$variadic = G__11661__delegate;
    return G__11661;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__11663__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__11663 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11663__delegate.call(this, x, y, more);
    };
    G__11663.cljs$lang$maxFixedArity = 2;
    G__11663.cljs$lang$applyTo = function(arglist__11664) {
      var x = cljs.core.first(arglist__11664);
      arglist__11664 = cljs.core.next(arglist__11664);
      var y = cljs.core.first(arglist__11664);
      var more = cljs.core.rest(arglist__11664);
      return G__11663__delegate(x, y, more);
    };
    G__11663.cljs$core$IFn$_invoke$arity$variadic = G__11663__delegate;
    return G__11663;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__11665__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__11665 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11665__delegate.call(this, x, y, more);
    };
    G__11665.cljs$lang$maxFixedArity = 2;
    G__11665.cljs$lang$applyTo = function(arglist__11666) {
      var x = cljs.core.first(arglist__11666);
      arglist__11666 = cljs.core.next(arglist__11666);
      var y = cljs.core.first(arglist__11666);
      var more = cljs.core.rest(arglist__11666);
      return G__11665__delegate(x, y, more);
    };
    G__11665.cljs$core$IFn$_invoke$arity$variadic = G__11665__delegate;
    return G__11665;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__11667__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__11667 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11667__delegate.call(this, x, y, more);
    };
    G__11667.cljs$lang$maxFixedArity = 2;
    G__11667.cljs$lang$applyTo = function(arglist__11668) {
      var x = cljs.core.first(arglist__11668);
      arglist__11668 = cljs.core.next(arglist__11668);
      var y = cljs.core.first(arglist__11668);
      var more = cljs.core.rest(arglist__11668);
      return G__11667__delegate(x, y, more);
    };
    G__11667.cljs$core$IFn$_invoke$arity$variadic = G__11667__delegate;
    return G__11667;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__11669__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__11669 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11669__delegate.call(this, x, y, more);
    };
    G__11669.cljs$lang$maxFixedArity = 2;
    G__11669.cljs$lang$applyTo = function(arglist__11670) {
      var x = cljs.core.first(arglist__11670);
      arglist__11670 = cljs.core.next(arglist__11670);
      var y = cljs.core.first(arglist__11670);
      var more = cljs.core.rest(arglist__11670);
      return G__11669__delegate(x, y, more);
    };
    G__11669.cljs$core$IFn$_invoke$arity$variadic = G__11669__delegate;
    return G__11669;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__11671__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__11671 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11671__delegate.call(this, x, y, more);
    };
    G__11671.cljs$lang$maxFixedArity = 2;
    G__11671.cljs$lang$applyTo = function(arglist__11672) {
      var x = cljs.core.first(arglist__11672);
      arglist__11672 = cljs.core.next(arglist__11672);
      var y = cljs.core.first(arglist__11672);
      var more = cljs.core.rest(arglist__11672);
      return G__11671__delegate(x, y, more);
    };
    G__11671.cljs$core$IFn$_invoke$arity$variadic = G__11671__delegate;
    return G__11671;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__11673__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11674 = y;
            var G__11675 = cljs.core.first.call(null, more);
            var G__11676 = cljs.core.next.call(null, more);
            x = G__11674;
            y = G__11675;
            more = G__11676;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11673 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11673__delegate.call(this, x, y, more);
    };
    G__11673.cljs$lang$maxFixedArity = 2;
    G__11673.cljs$lang$applyTo = function(arglist__11677) {
      var x = cljs.core.first(arglist__11677);
      arglist__11677 = cljs.core.next(arglist__11677);
      var y = cljs.core.first(arglist__11677);
      var more = cljs.core.rest(arglist__11677);
      return G__11673__delegate(x, y, more);
    };
    G__11673.cljs$core$IFn$_invoke$arity$variadic = G__11673__delegate;
    return G__11673;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__11678 = n__$1 - 1;
      var G__11679 = cljs.core.next.call(null, xs);
      n__$1 = G__11678;
      xs = G__11679;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__11680__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__11681 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__11682 = cljs.core.next.call(null, more);
          sb = G__11681;
          more = G__11682;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__11680 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11680__delegate.call(this, x, ys);
    };
    G__11680.cljs$lang$maxFixedArity = 1;
    G__11680.cljs$lang$applyTo = function(arglist__11683) {
      var x = cljs.core.first(arglist__11683);
      var ys = cljs.core.rest(arglist__11683);
      return G__11680__delegate(x, ys);
    };
    G__11680.cljs$core$IFn$_invoke$arity$variadic = G__11680__delegate;
    return G__11680;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__11684 = cljs.core.next.call(null, xs);
            var G__11685 = cljs.core.next.call(null, ys);
            xs = G__11684;
            ys = G__11685;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__11686 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__11687 = cljs.core.next.call(null, s);
        res = G__11686;
        s = G__11687;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__11688 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__11689 = cljs.core.next.call(null, s);
      h = G__11688;
      s = G__11689;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__11690 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__11691 = cljs.core.next.call(null, s__$1);
      h = G__11690;
      s__$1 = G__11691;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__11698_11704 = cljs.core.seq.call(null, fn_map);
  var chunk__11699_11705 = null;
  var count__11700_11706 = 0;
  var i__11701_11707 = 0;
  while (true) {
    if (i__11701_11707 < count__11700_11706) {
      var vec__11702_11708 = cljs.core._nth.call(null, chunk__11699_11705, i__11701_11707);
      var key_name_11709 = cljs.core.nth.call(null, vec__11702_11708, 0, null);
      var f_11710 = cljs.core.nth.call(null, vec__11702_11708, 1, null);
      var str_name_11711 = cljs.core.name.call(null, key_name_11709);
      obj[str_name_11711] = f_11710;
      var G__11712 = seq__11698_11704;
      var G__11713 = chunk__11699_11705;
      var G__11714 = count__11700_11706;
      var G__11715 = i__11701_11707 + 1;
      seq__11698_11704 = G__11712;
      chunk__11699_11705 = G__11713;
      count__11700_11706 = G__11714;
      i__11701_11707 = G__11715;
      continue;
    } else {
      var temp__4126__auto___11716 = cljs.core.seq.call(null, seq__11698_11704);
      if (temp__4126__auto___11716) {
        var seq__11698_11717__$1 = temp__4126__auto___11716;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11698_11717__$1)) {
          var c__4418__auto___11718 = cljs.core.chunk_first.call(null, seq__11698_11717__$1);
          var G__11719 = cljs.core.chunk_rest.call(null, seq__11698_11717__$1);
          var G__11720 = c__4418__auto___11718;
          var G__11721 = cljs.core.count.call(null, c__4418__auto___11718);
          var G__11722 = 0;
          seq__11698_11704 = G__11719;
          chunk__11699_11705 = G__11720;
          count__11700_11706 = G__11721;
          i__11701_11707 = G__11722;
          continue;
        } else {
          var vec__11703_11723 = cljs.core.first.call(null, seq__11698_11717__$1);
          var key_name_11724 = cljs.core.nth.call(null, vec__11703_11723, 0, null);
          var f_11725 = cljs.core.nth.call(null, vec__11703_11723, 1, null);
          var str_name_11726 = cljs.core.name.call(null, key_name_11724);
          obj[str_name_11726] = f_11725;
          var G__11727 = cljs.core.next.call(null, seq__11698_11717__$1);
          var G__11728 = null;
          var G__11729 = 0;
          var G__11730 = 0;
          seq__11698_11704 = G__11727;
          chunk__11699_11705 = G__11728;
          count__11700_11706 = G__11729;
          i__11701_11707 = G__11730;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__11732 = coll;
  if (G__11732) {
    var bit__4312__auto__ = G__11732.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4312__auto__ || G__11732.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__11732.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11732);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11732);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__11733 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__11733;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__11734 = i - 1;
        var G__11735 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__11734;
        r = G__11735;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__11736) {
    var xs = cljs.core.seq(arglist__11736);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3648__auto__ = coll == null;
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var G__11740 = coll;
      if (G__11740) {
        var bit__4305__auto__ = G__11740.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11740.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__11742 = x;
  if (G__11742) {
    var bit__4312__auto__ = G__11742.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4312__auto__ || G__11742.cljs$core$IList$) {
      return true;
    } else {
      if (!G__11742.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11742);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11742);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__11744 = null;
  var G__11744__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__11744__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__11744 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11744__2.call(this, self__, coll);
      case 3:
        return G__11744__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11744.cljs$core$IFn$_invoke$arity$2 = G__11744__2;
  G__11744.cljs$core$IFn$_invoke$arity$3 = G__11744__3;
  return G__11744;
}();
cljs.core.Keyword.prototype.apply = function(self__, args11743) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11743)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__11746 = x;
    if (G__11746) {
      var bit__4305__auto__ = G__11746.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__11746.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__11747 = ls.sval();
        ls = G__11747;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__11749 = s;
    if (G__11749) {
      var bit__4305__auto__ = G__11749.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4305__auto__ || G__11749.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__11750 = cljs.core.next.call(null, s__$1);
      s__$1 = G__11750;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_11751 = 0;
  var xs_11752 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_11752) {
      ret[i_11751] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_11752));
      var G__11753 = i_11751 + 1;
      var G__11754 = cljs.core.next.call(null, xs_11752);
      i_11751 = G__11753;
      xs_11752 = G__11754;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11755 = i + 1;
          var G__11756 = cljs.core.next.call(null, s__$1);
          i = G__11755;
          s__$1 = G__11756;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11757 = size;
      var i_11758 = 0;
      while (true) {
        if (i_11758 < n__4518__auto___11757) {
          a[i_11758] = init_val_or_seq;
          var G__11759 = i_11758 + 1;
          i_11758 = G__11759;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11760 = i + 1;
          var G__11761 = cljs.core.next.call(null, s__$1);
          i = G__11760;
          s__$1 = G__11761;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11762 = size;
      var i_11763 = 0;
      while (true) {
        if (i_11763 < n__4518__auto___11762) {
          a[i_11763] = init_val_or_seq;
          var G__11764 = i_11763 + 1;
          i_11763 = G__11764;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11765 = i + 1;
          var G__11766 = cljs.core.next.call(null, s__$1);
          i = G__11765;
          s__$1 = G__11766;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11767 = size;
      var i_11768 = 0;
      while (true) {
        if (i_11768 < n__4518__auto___11767) {
          a[i_11768] = init_val_or_seq;
          var G__11769 = i_11768 + 1;
          i_11768 = G__11769;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11770 = i + 1;
          var G__11771 = cljs.core.next.call(null, s__$1);
          i = G__11770;
          s__$1 = G__11771;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11772 = size;
      var i_11773 = 0;
      while (true) {
        if (i_11773 < n__4518__auto___11772) {
          a[i_11773] = init_val_or_seq;
          var G__11774 = i_11773 + 1;
          i_11773 = G__11774;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__11775 = cljs.core.next.call(null, s__$1);
        var G__11776 = i - 1;
        var G__11777 = sum + 1;
        s__$1 = G__11775;
        i = G__11776;
        sum = G__11777;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__11778__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__11778 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11778__delegate.call(this, x, y, zs);
    };
    G__11778.cljs$lang$maxFixedArity = 2;
    G__11778.cljs$lang$applyTo = function(arglist__11779) {
      var x = cljs.core.first(arglist__11779);
      arglist__11779 = cljs.core.next(arglist__11779);
      var y = cljs.core.first(arglist__11779);
      var zs = cljs.core.rest(arglist__11779);
      return G__11778__delegate(x, y, zs);
    };
    G__11778.cljs$core$IFn$_invoke$arity$variadic = G__11778__delegate;
    return G__11778;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__11780__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__11780 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11780__delegate.call(this, a, b, c, d, more);
    };
    G__11780.cljs$lang$maxFixedArity = 4;
    G__11780.cljs$lang$applyTo = function(arglist__11781) {
      var a = cljs.core.first(arglist__11781);
      arglist__11781 = cljs.core.next(arglist__11781);
      var b = cljs.core.first(arglist__11781);
      arglist__11781 = cljs.core.next(arglist__11781);
      var c = cljs.core.first(arglist__11781);
      arglist__11781 = cljs.core.next(arglist__11781);
      var d = cljs.core.first(arglist__11781);
      var more = cljs.core.rest(arglist__11781);
      return G__11780__delegate(a, b, c, d, more);
    };
    G__11780.cljs$core$IFn$_invoke$arity$variadic = G__11780__delegate;
    return G__11780;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__11782__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11783 = ntcoll;
          var G__11784 = cljs.core.first.call(null, vals);
          var G__11785 = cljs.core.next.call(null, vals);
          tcoll = G__11783;
          val = G__11784;
          vals = G__11785;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11782 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11782__delegate.call(this, tcoll, val, vals);
    };
    G__11782.cljs$lang$maxFixedArity = 2;
    G__11782.cljs$lang$applyTo = function(arglist__11786) {
      var tcoll = cljs.core.first(arglist__11786);
      arglist__11786 = cljs.core.next(arglist__11786);
      var val = cljs.core.first(arglist__11786);
      var vals = cljs.core.rest(arglist__11786);
      return G__11782__delegate(tcoll, val, vals);
    };
    G__11782.cljs$core$IFn$_invoke$arity$variadic = G__11782__delegate;
    return G__11782;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__11787__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__11788 = ntcoll;
          var G__11789 = cljs.core.first.call(null, kvs);
          var G__11790 = cljs.core.second.call(null, kvs);
          var G__11791 = cljs.core.nnext.call(null, kvs);
          tcoll = G__11788;
          key = G__11789;
          val = G__11790;
          kvs = G__11791;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11787 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11787__delegate.call(this, tcoll, key, val, kvs);
    };
    G__11787.cljs$lang$maxFixedArity = 3;
    G__11787.cljs$lang$applyTo = function(arglist__11792) {
      var tcoll = cljs.core.first(arglist__11792);
      arglist__11792 = cljs.core.next(arglist__11792);
      var key = cljs.core.first(arglist__11792);
      arglist__11792 = cljs.core.next(arglist__11792);
      var val = cljs.core.first(arglist__11792);
      var kvs = cljs.core.rest(arglist__11792);
      return G__11787__delegate(tcoll, key, val, kvs);
    };
    G__11787.cljs$core$IFn$_invoke$arity$variadic = G__11787__delegate;
    return G__11787;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__11793__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__11794 = ntcoll;
          var G__11795 = cljs.core.first.call(null, ks);
          var G__11796 = cljs.core.next.call(null, ks);
          tcoll = G__11794;
          key = G__11795;
          ks = G__11796;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11793 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11793__delegate.call(this, tcoll, key, ks);
    };
    G__11793.cljs$lang$maxFixedArity = 2;
    G__11793.cljs$lang$applyTo = function(arglist__11797) {
      var tcoll = cljs.core.first(arglist__11797);
      arglist__11797 = cljs.core.next(arglist__11797);
      var key = cljs.core.first(arglist__11797);
      var ks = cljs.core.rest(arglist__11797);
      return G__11793__delegate(tcoll, key, ks);
    };
    G__11793.cljs$core$IFn$_invoke$arity$variadic = G__11793__delegate;
    return G__11793;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__11798__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11799 = ntcoll;
          var G__11800 = cljs.core.first.call(null, vals);
          var G__11801 = cljs.core.next.call(null, vals);
          tcoll = G__11799;
          val = G__11800;
          vals = G__11801;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11798 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11798__delegate.call(this, tcoll, val, vals);
    };
    G__11798.cljs$lang$maxFixedArity = 2;
    G__11798.cljs$lang$applyTo = function(arglist__11802) {
      var tcoll = cljs.core.first(arglist__11802);
      arglist__11802 = cljs.core.next(arglist__11802);
      var val = cljs.core.first(arglist__11802);
      var vals = cljs.core.rest(arglist__11802);
      return G__11798__delegate(tcoll, val, vals);
    };
    G__11798.cljs$core$IFn$_invoke$arity$variadic = G__11798__delegate;
    return G__11798;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4562 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4562);
      } else {
        return f.call(null, a4562);
      }
    } else {
      var b4563 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4562, b4563);
        } else {
          return f.call(null, a4562, b4563);
        }
      } else {
        var c4564 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4562, b4563, c4564);
          } else {
            return f.call(null, a4562, b4563, c4564);
          }
        } else {
          var d4565 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4562, b4563, c4564, d4565);
            } else {
              return f.call(null, a4562, b4563, c4564, d4565);
            }
          } else {
            var e4566 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4562, b4563, c4564, d4565, e4566);
              } else {
                return f.call(null, a4562, b4563, c4564, d4565, e4566);
              }
            } else {
              var f4567 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4562, b4563, c4564, d4565, e4566, f4567);
                } else {
                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567);
                }
              } else {
                var g4568 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  } else {
                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  }
                } else {
                  var h4569 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    } else {
                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    }
                  } else {
                    var i4570 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      } else {
                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      }
                    } else {
                      var j4571 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        } else {
                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        }
                      } else {
                        var k4572 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          } else {
                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          }
                        } else {
                          var l4573 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            } else {
                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            }
                          } else {
                            var m4574 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              } else {
                                return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              }
                            } else {
                              var n4575 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                } else {
                                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                }
                              } else {
                                var o4576 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  } else {
                                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  }
                                } else {
                                  var p4577 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    } else {
                                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    }
                                  } else {
                                    var q4578 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      } else {
                                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      }
                                    } else {
                                      var r4579 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        } else {
                                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        }
                                      } else {
                                        var s4580 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          } else {
                                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          }
                                        } else {
                                          var t4581 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            } else {
                                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__11803__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__11803 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__11803__delegate.call(this, f, a, b, c, d, args);
    };
    G__11803.cljs$lang$maxFixedArity = 5;
    G__11803.cljs$lang$applyTo = function(arglist__11804) {
      var f = cljs.core.first(arglist__11804);
      arglist__11804 = cljs.core.next(arglist__11804);
      var a = cljs.core.first(arglist__11804);
      arglist__11804 = cljs.core.next(arglist__11804);
      var b = cljs.core.first(arglist__11804);
      arglist__11804 = cljs.core.next(arglist__11804);
      var c = cljs.core.first(arglist__11804);
      arglist__11804 = cljs.core.next(arglist__11804);
      var d = cljs.core.first(arglist__11804);
      var args = cljs.core.rest(arglist__11804);
      return G__11803__delegate(f, a, b, c, d, args);
    };
    G__11803.cljs$core$IFn$_invoke$arity$variadic = G__11803__delegate;
    return G__11803;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__11805__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__11805 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__11805__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__11805.cljs$lang$maxFixedArity = 6;
    G__11805.cljs$lang$applyTo = function(arglist__11806) {
      var obj = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var f = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var a = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var b = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var c = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var d = cljs.core.first(arglist__11806);
      var args = cljs.core.rest(arglist__11806);
      return G__11805__delegate(obj, f, a, b, c, d, args);
    };
    G__11805.cljs$core$IFn$_invoke$arity$variadic = G__11805__delegate;
    return G__11805;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__11807__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__11807 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11807__delegate.call(this, x, y, more);
    };
    G__11807.cljs$lang$maxFixedArity = 2;
    G__11807.cljs$lang$applyTo = function(arglist__11808) {
      var x = cljs.core.first(arglist__11808);
      arglist__11808 = cljs.core.next(arglist__11808);
      var y = cljs.core.first(arglist__11808);
      var more = cljs.core.rest(arglist__11808);
      return G__11807__delegate(x, y, more);
    };
    G__11807.cljs$core$IFn$_invoke$arity$variadic = G__11807__delegate;
    return G__11807;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t11812 !== "undefined") {
  } else {
    cljs.core.t11812 = function(nil_iter, meta11813) {
      this.nil_iter = nil_iter;
      this.meta11813 = meta11813;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t11812.cljs$lang$type = true;
    cljs.core.t11812.cljs$lang$ctorStr = "cljs.core/t11812";
    cljs.core.t11812.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/t11812");
    };
    cljs.core.t11812.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t11812.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t11812.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t11812.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11814) {
      var self__ = this;
      var _11814__$1 = this;
      return self__.meta11813;
    };
    cljs.core.t11812.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11814, meta11813__$1) {
      var self__ = this;
      var _11814__$1 = this;
      return new cljs.core.t11812(self__.nil_iter, meta11813__$1);
    };
    cljs.core.__GT_t11812 = function __GT_t11812(nil_iter__$1, meta11813) {
      return new cljs.core.t11812(nil_iter__$1, meta11813);
    };
  }
  return new cljs.core.t11812(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__11815 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__11815;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4518__auto___11816 = self__.iters.length;
  var i_11817 = 0;
  while (true) {
    if (i_11817 < n__4518__auto___11816) {
      self__.nexts[i_11817] = self__.iters[i_11817].next();
      var G__11818 = i_11817 + 1;
      i_11817 = G__11818;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return this$.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__11819_11823 = cljs.core.seq.call(null, colls);
  var chunk__11820_11824 = null;
  var count__11821_11825 = 0;
  var i__11822_11826 = 0;
  while (true) {
    if (i__11822_11826 < count__11821_11825) {
      var coll_11827 = cljs.core._nth.call(null, chunk__11820_11824, i__11822_11826);
      iters.push(cljs.core.iter.call(null, coll_11827));
      var G__11828 = seq__11819_11823;
      var G__11829 = chunk__11820_11824;
      var G__11830 = count__11821_11825;
      var G__11831 = i__11822_11826 + 1;
      seq__11819_11823 = G__11828;
      chunk__11820_11824 = G__11829;
      count__11821_11825 = G__11830;
      i__11822_11826 = G__11831;
      continue;
    } else {
      var temp__4126__auto___11832 = cljs.core.seq.call(null, seq__11819_11823);
      if (temp__4126__auto___11832) {
        var seq__11819_11833__$1 = temp__4126__auto___11832;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11819_11833__$1)) {
          var c__4418__auto___11834 = cljs.core.chunk_first.call(null, seq__11819_11833__$1);
          var G__11835 = cljs.core.chunk_rest.call(null, seq__11819_11833__$1);
          var G__11836 = c__4418__auto___11834;
          var G__11837 = cljs.core.count.call(null, c__4418__auto___11834);
          var G__11838 = 0;
          seq__11819_11823 = G__11835;
          chunk__11820_11824 = G__11836;
          count__11821_11825 = G__11837;
          i__11822_11826 = G__11838;
          continue;
        } else {
          var coll_11839 = cljs.core.first.call(null, seq__11819_11833__$1);
          iters.push(cljs.core.iter.call(null, coll_11839));
          var G__11840 = cljs.core.next.call(null, seq__11819_11833__$1);
          var G__11841 = null;
          var G__11842 = 0;
          var G__11843 = 0;
          seq__11819_11823 = G__11840;
          chunk__11820_11824 = G__11841;
          count__11821_11825 = G__11842;
          i__11822_11826 = G__11843;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3648__auto__ = cljs.core.seq.call(null, coll);
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__11844__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__11844 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11844__delegate.call(this, xform, coll, colls);
    };
    G__11844.cljs$lang$maxFixedArity = 2;
    G__11844.cljs$lang$applyTo = function(arglist__11845) {
      var xform = cljs.core.first(arglist__11845);
      arglist__11845 = cljs.core.next(arglist__11845);
      var coll = cljs.core.first(arglist__11845);
      var colls = cljs.core.rest(arglist__11845);
      return G__11844__delegate(xform, coll, colls);
    };
    G__11844.cljs$core$IFn$_invoke$arity$variadic = G__11844__delegate;
    return G__11844;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__11846 = pred;
        var G__11847 = cljs.core.next.call(null, coll);
        pred = G__11846;
        coll = G__11847;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3648__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        var G__11848 = pred;
        var G__11849 = cljs.core.next.call(null, coll);
        pred = G__11848;
        coll = G__11849;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__11850 = null;
    var G__11850__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__11850__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__11850__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__11850__3 = function() {
      var G__11851__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__11851 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__11851__delegate.call(this, x, y, zs);
      };
      G__11851.cljs$lang$maxFixedArity = 2;
      G__11851.cljs$lang$applyTo = function(arglist__11852) {
        var x = cljs.core.first(arglist__11852);
        arglist__11852 = cljs.core.next(arglist__11852);
        var y = cljs.core.first(arglist__11852);
        var zs = cljs.core.rest(arglist__11852);
        return G__11851__delegate(x, y, zs);
      };
      G__11851.cljs$core$IFn$_invoke$arity$variadic = G__11851__delegate;
      return G__11851;
    }();
    G__11850 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__11850__0.call(this);
        case 1:
          return G__11850__1.call(this, x);
        case 2:
          return G__11850__2.call(this, x, y);
        default:
          return G__11850__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__11850.cljs$lang$maxFixedArity = 2;
    G__11850.cljs$lang$applyTo = G__11850__3.cljs$lang$applyTo;
    G__11850.cljs$core$IFn$_invoke$arity$0 = G__11850__0;
    G__11850.cljs$core$IFn$_invoke$arity$1 = G__11850__1;
    G__11850.cljs$core$IFn$_invoke$arity$2 = G__11850__2;
    G__11850.cljs$core$IFn$_invoke$arity$variadic = G__11850__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__11850;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__11853__delegate = function(args) {
      return x;
    };
    var G__11853 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11853__delegate.call(this, args);
    };
    G__11853.cljs$lang$maxFixedArity = 0;
    G__11853.cljs$lang$applyTo = function(arglist__11854) {
      var args = cljs.core.seq(arglist__11854);
      return G__11853__delegate(args);
    };
    G__11853.cljs$core$IFn$_invoke$arity$variadic = G__11853__delegate;
    return G__11853;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__11855 = null;
      var G__11855__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__11855__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__11855__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__11855__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__11855__4 = function() {
        var G__11856__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__11856 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11856__delegate.call(this, x, y, z, args);
        };
        G__11856.cljs$lang$maxFixedArity = 3;
        G__11856.cljs$lang$applyTo = function(arglist__11857) {
          var x = cljs.core.first(arglist__11857);
          arglist__11857 = cljs.core.next(arglist__11857);
          var y = cljs.core.first(arglist__11857);
          arglist__11857 = cljs.core.next(arglist__11857);
          var z = cljs.core.first(arglist__11857);
          var args = cljs.core.rest(arglist__11857);
          return G__11856__delegate(x, y, z, args);
        };
        G__11856.cljs$core$IFn$_invoke$arity$variadic = G__11856__delegate;
        return G__11856;
      }();
      G__11855 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__11855__0.call(this);
          case 1:
            return G__11855__1.call(this, x);
          case 2:
            return G__11855__2.call(this, x, y);
          case 3:
            return G__11855__3.call(this, x, y, z);
          default:
            return G__11855__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11855.cljs$lang$maxFixedArity = 3;
      G__11855.cljs$lang$applyTo = G__11855__4.cljs$lang$applyTo;
      G__11855.cljs$core$IFn$_invoke$arity$0 = G__11855__0;
      G__11855.cljs$core$IFn$_invoke$arity$1 = G__11855__1;
      G__11855.cljs$core$IFn$_invoke$arity$2 = G__11855__2;
      G__11855.cljs$core$IFn$_invoke$arity$3 = G__11855__3;
      G__11855.cljs$core$IFn$_invoke$arity$variadic = G__11855__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11855;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__11858 = null;
      var G__11858__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__11858__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__11858__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__11858__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__11858__4 = function() {
        var G__11859__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__11859 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11859__delegate.call(this, x, y, z, args);
        };
        G__11859.cljs$lang$maxFixedArity = 3;
        G__11859.cljs$lang$applyTo = function(arglist__11860) {
          var x = cljs.core.first(arglist__11860);
          arglist__11860 = cljs.core.next(arglist__11860);
          var y = cljs.core.first(arglist__11860);
          arglist__11860 = cljs.core.next(arglist__11860);
          var z = cljs.core.first(arglist__11860);
          var args = cljs.core.rest(arglist__11860);
          return G__11859__delegate(x, y, z, args);
        };
        G__11859.cljs$core$IFn$_invoke$arity$variadic = G__11859__delegate;
        return G__11859;
      }();
      G__11858 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__11858__0.call(this);
          case 1:
            return G__11858__1.call(this, x);
          case 2:
            return G__11858__2.call(this, x, y);
          case 3:
            return G__11858__3.call(this, x, y, z);
          default:
            return G__11858__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11858.cljs$lang$maxFixedArity = 3;
      G__11858.cljs$lang$applyTo = G__11858__4.cljs$lang$applyTo;
      G__11858.cljs$core$IFn$_invoke$arity$0 = G__11858__0;
      G__11858.cljs$core$IFn$_invoke$arity$1 = G__11858__1;
      G__11858.cljs$core$IFn$_invoke$arity$2 = G__11858__2;
      G__11858.cljs$core$IFn$_invoke$arity$3 = G__11858__3;
      G__11858.cljs$core$IFn$_invoke$arity$variadic = G__11858__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11858;
    }();
  };
  var comp__4 = function() {
    var G__11861__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__11862__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__11863 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__11864 = cljs.core.next.call(null, fs__$2);
                ret = G__11863;
                fs__$2 = G__11864;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__11862 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__11862__delegate.call(this, args);
          };
          G__11862.cljs$lang$maxFixedArity = 0;
          G__11862.cljs$lang$applyTo = function(arglist__11865) {
            var args = cljs.core.seq(arglist__11865);
            return G__11862__delegate(args);
          };
          G__11862.cljs$core$IFn$_invoke$arity$variadic = G__11862__delegate;
          return G__11862;
        }();
      }(fs__$1);
    };
    var G__11861 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11861__delegate.call(this, f1, f2, f3, fs);
    };
    G__11861.cljs$lang$maxFixedArity = 3;
    G__11861.cljs$lang$applyTo = function(arglist__11866) {
      var f1 = cljs.core.first(arglist__11866);
      arglist__11866 = cljs.core.next(arglist__11866);
      var f2 = cljs.core.first(arglist__11866);
      arglist__11866 = cljs.core.next(arglist__11866);
      var f3 = cljs.core.first(arglist__11866);
      var fs = cljs.core.rest(arglist__11866);
      return G__11861__delegate(f1, f2, f3, fs);
    };
    G__11861.cljs$core$IFn$_invoke$arity$variadic = G__11861__delegate;
    return G__11861;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__11867__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__11867 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11867__delegate.call(this, args);
      };
      G__11867.cljs$lang$maxFixedArity = 0;
      G__11867.cljs$lang$applyTo = function(arglist__11868) {
        var args = cljs.core.seq(arglist__11868);
        return G__11867__delegate(args);
      };
      G__11867.cljs$core$IFn$_invoke$arity$variadic = G__11867__delegate;
      return G__11867;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__11869__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__11869 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11869__delegate.call(this, args);
      };
      G__11869.cljs$lang$maxFixedArity = 0;
      G__11869.cljs$lang$applyTo = function(arglist__11870) {
        var args = cljs.core.seq(arglist__11870);
        return G__11869__delegate(args);
      };
      G__11869.cljs$core$IFn$_invoke$arity$variadic = G__11869__delegate;
      return G__11869;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__11871__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__11871 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__11871__delegate.call(this, args);
      };
      G__11871.cljs$lang$maxFixedArity = 0;
      G__11871.cljs$lang$applyTo = function(arglist__11872) {
        var args = cljs.core.seq(arglist__11872);
        return G__11871__delegate(args);
      };
      G__11871.cljs$core$IFn$_invoke$arity$variadic = G__11871__delegate;
      return G__11871;
    }();
  };
  var partial__5 = function() {
    var G__11873__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__11874__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__11874 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__11874__delegate.call(this, args);
        };
        G__11874.cljs$lang$maxFixedArity = 0;
        G__11874.cljs$lang$applyTo = function(arglist__11875) {
          var args = cljs.core.seq(arglist__11875);
          return G__11874__delegate(args);
        };
        G__11874.cljs$core$IFn$_invoke$arity$variadic = G__11874__delegate;
        return G__11874;
      }();
    };
    var G__11873 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11873__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__11873.cljs$lang$maxFixedArity = 4;
    G__11873.cljs$lang$applyTo = function(arglist__11876) {
      var f = cljs.core.first(arglist__11876);
      arglist__11876 = cljs.core.next(arglist__11876);
      var arg1 = cljs.core.first(arglist__11876);
      arglist__11876 = cljs.core.next(arglist__11876);
      var arg2 = cljs.core.first(arglist__11876);
      arglist__11876 = cljs.core.next(arglist__11876);
      var arg3 = cljs.core.first(arglist__11876);
      var more = cljs.core.rest(arglist__11876);
      return G__11873__delegate(f, arg1, arg2, arg3, more);
    };
    G__11873.cljs$core$IFn$_invoke$arity$variadic = G__11873__delegate;
    return G__11873;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__11877 = null;
      var G__11877__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__11877__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__11877__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__11877__4 = function() {
        var G__11878__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__11878 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11878__delegate.call(this, a, b, c, ds);
        };
        G__11878.cljs$lang$maxFixedArity = 3;
        G__11878.cljs$lang$applyTo = function(arglist__11879) {
          var a = cljs.core.first(arglist__11879);
          arglist__11879 = cljs.core.next(arglist__11879);
          var b = cljs.core.first(arglist__11879);
          arglist__11879 = cljs.core.next(arglist__11879);
          var c = cljs.core.first(arglist__11879);
          var ds = cljs.core.rest(arglist__11879);
          return G__11878__delegate(a, b, c, ds);
        };
        G__11878.cljs$core$IFn$_invoke$arity$variadic = G__11878__delegate;
        return G__11878;
      }();
      G__11877 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__11877__1.call(this, a);
          case 2:
            return G__11877__2.call(this, a, b);
          case 3:
            return G__11877__3.call(this, a, b, c);
          default:
            return G__11877__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11877.cljs$lang$maxFixedArity = 3;
      G__11877.cljs$lang$applyTo = G__11877__4.cljs$lang$applyTo;
      G__11877.cljs$core$IFn$_invoke$arity$1 = G__11877__1;
      G__11877.cljs$core$IFn$_invoke$arity$2 = G__11877__2;
      G__11877.cljs$core$IFn$_invoke$arity$3 = G__11877__3;
      G__11877.cljs$core$IFn$_invoke$arity$variadic = G__11877__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11877;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__11880 = null;
      var G__11880__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__11880__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__11880__4 = function() {
        var G__11881__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__11881 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11881__delegate.call(this, a, b, c, ds);
        };
        G__11881.cljs$lang$maxFixedArity = 3;
        G__11881.cljs$lang$applyTo = function(arglist__11882) {
          var a = cljs.core.first(arglist__11882);
          arglist__11882 = cljs.core.next(arglist__11882);
          var b = cljs.core.first(arglist__11882);
          arglist__11882 = cljs.core.next(arglist__11882);
          var c = cljs.core.first(arglist__11882);
          var ds = cljs.core.rest(arglist__11882);
          return G__11881__delegate(a, b, c, ds);
        };
        G__11881.cljs$core$IFn$_invoke$arity$variadic = G__11881__delegate;
        return G__11881;
      }();
      G__11880 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__11880__2.call(this, a, b);
          case 3:
            return G__11880__3.call(this, a, b, c);
          default:
            return G__11880__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11880.cljs$lang$maxFixedArity = 3;
      G__11880.cljs$lang$applyTo = G__11880__4.cljs$lang$applyTo;
      G__11880.cljs$core$IFn$_invoke$arity$2 = G__11880__2;
      G__11880.cljs$core$IFn$_invoke$arity$3 = G__11880__3;
      G__11880.cljs$core$IFn$_invoke$arity$variadic = G__11880__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11880;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__11883 = null;
      var G__11883__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__11883__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__11883__4 = function() {
        var G__11884__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__11884 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11884__delegate.call(this, a, b, c, ds);
        };
        G__11884.cljs$lang$maxFixedArity = 3;
        G__11884.cljs$lang$applyTo = function(arglist__11885) {
          var a = cljs.core.first(arglist__11885);
          arglist__11885 = cljs.core.next(arglist__11885);
          var b = cljs.core.first(arglist__11885);
          arglist__11885 = cljs.core.next(arglist__11885);
          var c = cljs.core.first(arglist__11885);
          var ds = cljs.core.rest(arglist__11885);
          return G__11884__delegate(a, b, c, ds);
        };
        G__11884.cljs$core$IFn$_invoke$arity$variadic = G__11884__delegate;
        return G__11884;
      }();
      G__11883 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__11883__2.call(this, a, b);
          case 3:
            return G__11883__3.call(this, a, b, c);
          default:
            return G__11883__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11883.cljs$lang$maxFixedArity = 3;
      G__11883.cljs$lang$applyTo = G__11883__4.cljs$lang$applyTo;
      G__11883.cljs$core$IFn$_invoke$arity$2 = G__11883__2;
      G__11883.cljs$core$IFn$_invoke$arity$3 = G__11883__3;
      G__11883.cljs$core$IFn$_invoke$arity$variadic = G__11883__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__11883;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11886 = size;
          var i_11887 = 0;
          while (true) {
            if (i_11887 < n__4518__auto___11886) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_11887, cljs.core._nth.call(null, c, i_11887)));
              var G__11888 = i_11887 + 1;
              i_11887 = G__11888;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__11889 = null;
        var G__11889__0 = function() {
          return rf.call(null);
        };
        var G__11889__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11889__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__11889 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11889__0.call(this);
            case 1:
              return G__11889__1.call(this, result);
            case 2:
              return G__11889__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11889.cljs$core$IFn$_invoke$arity$0 = G__11889__0;
        G__11889.cljs$core$IFn$_invoke$arity$1 = G__11889__1;
        G__11889.cljs$core$IFn$_invoke$arity$2 = G__11889__2;
        return G__11889;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11890 = size;
          var i_11891 = 0;
          while (true) {
            if (i_11891 < n__4518__auto___11890) {
              var x_11892 = f.call(null, cljs.core._nth.call(null, c, i_11891));
              if (x_11892 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_11892);
              }
              var G__11893 = i_11891 + 1;
              i_11891 = G__11893;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11894 = cljs.core.seq.call(null, self__.watches);
  var chunk__11895 = null;
  var count__11896 = 0;
  var i__11897 = 0;
  while (true) {
    if (i__11897 < count__11896) {
      var vec__11898 = cljs.core._nth.call(null, chunk__11895, i__11897);
      var key = cljs.core.nth.call(null, vec__11898, 0, null);
      var f = cljs.core.nth.call(null, vec__11898, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__11900 = seq__11894;
      var G__11901 = chunk__11895;
      var G__11902 = count__11896;
      var G__11903 = i__11897 + 1;
      seq__11894 = G__11900;
      chunk__11895 = G__11901;
      count__11896 = G__11902;
      i__11897 = G__11903;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11894);
      if (temp__4126__auto__) {
        var seq__11894__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11894__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__11894__$1);
          var G__11904 = cljs.core.chunk_rest.call(null, seq__11894__$1);
          var G__11905 = c__4418__auto__;
          var G__11906 = cljs.core.count.call(null, c__4418__auto__);
          var G__11907 = 0;
          seq__11894 = G__11904;
          chunk__11895 = G__11905;
          count__11896 = G__11906;
          i__11897 = G__11907;
          continue;
        } else {
          var vec__11899 = cljs.core.first.call(null, seq__11894__$1);
          var key = cljs.core.nth.call(null, vec__11899, 0, null);
          var f = cljs.core.nth.call(null, vec__11899, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__11908 = cljs.core.next.call(null, seq__11894__$1);
          var G__11909 = null;
          var G__11910 = 0;
          var G__11911 = 0;
          seq__11894 = G__11908;
          chunk__11895 = G__11909;
          count__11896 = G__11910;
          i__11897 = G__11911;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__11915__delegate = function(x, p__11912) {
      var map__11914 = p__11912;
      var map__11914__$1 = cljs.core.seq_QMARK_.call(null, map__11914) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11914) : map__11914;
      var validator = cljs.core.get.call(null, map__11914__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__11914__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__11915 = function(x, var_args) {
      var p__11912 = null;
      if (arguments.length > 1) {
        p__11912 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11915__delegate.call(this, x, p__11912);
    };
    G__11915.cljs$lang$maxFixedArity = 1;
    G__11915.cljs$lang$applyTo = function(arglist__11916) {
      var x = cljs.core.first(arglist__11916);
      var p__11912 = cljs.core.rest(arglist__11916);
      return G__11915__delegate(x, p__11912);
    };
    G__11915.cljs$core$IFn$_invoke$arity$variadic = G__11915__delegate;
    return G__11915;
  }();
  atom = function(x, var_args) {
    var p__11912 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__11917__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__11917 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11917__delegate.call(this, a, f, x, y, more);
    };
    G__11917.cljs$lang$maxFixedArity = 4;
    G__11917.cljs$lang$applyTo = function(arglist__11918) {
      var a = cljs.core.first(arglist__11918);
      arglist__11918 = cljs.core.next(arglist__11918);
      var f = cljs.core.first(arglist__11918);
      arglist__11918 = cljs.core.next(arglist__11918);
      var x = cljs.core.first(arglist__11918);
      arglist__11918 = cljs.core.next(arglist__11918);
      var y = cljs.core.first(arglist__11918);
      var more = cljs.core.rest(arglist__11918);
      return G__11917__delegate(a, f, x, y, more);
    };
    G__11917.cljs$core$IFn$_invoke$arity$variadic = G__11917__delegate;
    return G__11917;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__11919 = null;
          var G__11919__0 = function() {
            return rf.call(null);
          };
          var G__11919__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11919__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__11919 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11919__0.call(this);
              case 1:
                return G__11919__1.call(this, result);
              case 2:
                return G__11919__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11919.cljs$core$IFn$_invoke$arity$0 = G__11919__0;
          G__11919.cljs$core$IFn$_invoke$arity$1 = G__11919__1;
          G__11919.cljs$core$IFn$_invoke$arity$2 = G__11919__2;
          return G__11919;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4518__auto___11920 = size;
            var i_11921 = 0;
            while (true) {
              if (i_11921 < n__4518__auto___11920) {
                var x_11922 = f.call(null, idx + i_11921, cljs.core._nth.call(null, c, i_11921));
                if (x_11922 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_11922);
                }
                var G__11923 = i_11921 + 1;
                i_11921 = G__11923;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p.call(null, y);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__11930__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__11930 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11930__delegate.call(this, x, y, z, args);
        };
        G__11930.cljs$lang$maxFixedArity = 3;
        G__11930.cljs$lang$applyTo = function(arglist__11931) {
          var x = cljs.core.first(arglist__11931);
          arglist__11931 = cljs.core.next(arglist__11931);
          var y = cljs.core.first(arglist__11931);
          arglist__11931 = cljs.core.next(arglist__11931);
          var z = cljs.core.first(arglist__11931);
          var args = cljs.core.rest(arglist__11931);
          return G__11930__delegate(x, y, z, args);
        };
        G__11930.cljs$core$IFn$_invoke$arity$variadic = G__11930__delegate;
        return G__11930;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__11932__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__11924_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__11924_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              return p2.call(null, p1__11924_SHARP_);
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__11932 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11932__delegate.call(this, x, y, z, args);
        };
        G__11932.cljs$lang$maxFixedArity = 3;
        G__11932.cljs$lang$applyTo = function(arglist__11933) {
          var x = cljs.core.first(arglist__11933);
          arglist__11933 = cljs.core.next(arglist__11933);
          var y = cljs.core.first(arglist__11933);
          arglist__11933 = cljs.core.next(arglist__11933);
          var z = cljs.core.first(arglist__11933);
          var args = cljs.core.rest(arglist__11933);
          return G__11932__delegate(x, y, z, args);
        };
        G__11932.cljs$core$IFn$_invoke$arity$variadic = G__11932__delegate;
        return G__11932;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    var and__3636__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3636__auto____$5)) {
                      var and__3636__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3636__auto____$6)) {
                        var and__3636__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3636__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3636__auto____$7;
                        }
                      } else {
                        return and__3636__auto____$6;
                      }
                    } else {
                      return and__3636__auto____$5;
                    }
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__11934__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__11925_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__11925_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              var and__3636__auto____$1 = p2.call(null, p1__11925_SHARP_);
              if (cljs.core.truth_(and__3636__auto____$1)) {
                return p3.call(null, p1__11925_SHARP_);
              } else {
                return and__3636__auto____$1;
              }
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__11934 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11934__delegate.call(this, x, y, z, args);
        };
        G__11934.cljs$lang$maxFixedArity = 3;
        G__11934.cljs$lang$applyTo = function(arglist__11935) {
          var x = cljs.core.first(arglist__11935);
          arglist__11935 = cljs.core.next(arglist__11935);
          var y = cljs.core.first(arglist__11935);
          arglist__11935 = cljs.core.next(arglist__11935);
          var z = cljs.core.first(arglist__11935);
          var args = cljs.core.rest(arglist__11935);
          return G__11934__delegate(x, y, z, args);
        };
        G__11934.cljs$core$IFn$_invoke$arity$variadic = G__11934__delegate;
        return G__11934;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__11936__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11926_SHARP_) {
                return p1__11926_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11927_SHARP_) {
                var and__3636__auto__ = p1__11927_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  return p1__11927_SHARP_.call(null, y);
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__11928_SHARP_) {
                var and__3636__auto__ = p1__11928_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  var and__3636__auto____$1 = p1__11928_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$1)) {
                    return p1__11928_SHARP_.call(null, z);
                  } else {
                    return and__3636__auto____$1;
                  }
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__11937__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__11929_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__11929_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__11937 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__11937__delegate.call(this, x, y, z, args);
            };
            G__11937.cljs$lang$maxFixedArity = 3;
            G__11937.cljs$lang$applyTo = function(arglist__11938) {
              var x = cljs.core.first(arglist__11938);
              arglist__11938 = cljs.core.next(arglist__11938);
              var y = cljs.core.first(arglist__11938);
              arglist__11938 = cljs.core.next(arglist__11938);
              var z = cljs.core.first(arglist__11938);
              var args = cljs.core.rest(arglist__11938);
              return G__11937__delegate(x, y, z, args);
            };
            G__11937.cljs$core$IFn$_invoke$arity$variadic = G__11937__delegate;
            return G__11937;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__11936 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11936__delegate.call(this, p1, p2, p3, ps);
    };
    G__11936.cljs$lang$maxFixedArity = 3;
    G__11936.cljs$lang$applyTo = function(arglist__11939) {
      var p1 = cljs.core.first(arglist__11939);
      arglist__11939 = cljs.core.next(arglist__11939);
      var p2 = cljs.core.first(arglist__11939);
      arglist__11939 = cljs.core.next(arglist__11939);
      var p3 = cljs.core.first(arglist__11939);
      var ps = cljs.core.rest(arglist__11939);
      return G__11936__delegate(p1, p2, p3, ps);
    };
    G__11936.cljs$core$IFn$_invoke$arity$variadic = G__11936__delegate;
    return G__11936;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__11946__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__11946 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11946__delegate.call(this, x, y, z, args);
        };
        G__11946.cljs$lang$maxFixedArity = 3;
        G__11946.cljs$lang$applyTo = function(arglist__11947) {
          var x = cljs.core.first(arglist__11947);
          arglist__11947 = cljs.core.next(arglist__11947);
          var y = cljs.core.first(arglist__11947);
          arglist__11947 = cljs.core.next(arglist__11947);
          var z = cljs.core.first(arglist__11947);
          var args = cljs.core.rest(arglist__11947);
          return G__11946__delegate(x, y, z, args);
        };
        G__11946.cljs$core$IFn$_invoke$arity$variadic = G__11946__delegate;
        return G__11946;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__11948__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__11940_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__11940_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  return p2.call(null, p1__11940_SHARP_);
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__11948 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11948__delegate.call(this, x, y, z, args);
        };
        G__11948.cljs$lang$maxFixedArity = 3;
        G__11948.cljs$lang$applyTo = function(arglist__11949) {
          var x = cljs.core.first(arglist__11949);
          arglist__11949 = cljs.core.next(arglist__11949);
          var y = cljs.core.first(arglist__11949);
          arglist__11949 = cljs.core.next(arglist__11949);
          var z = cljs.core.first(arglist__11949);
          var args = cljs.core.rest(arglist__11949);
          return G__11948__delegate(x, y, z, args);
        };
        G__11948.cljs$core$IFn$_invoke$arity$variadic = G__11948__delegate;
        return G__11948;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  var or__3648__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$5)) {
                    return or__3648__auto____$5;
                  } else {
                    var or__3648__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3648__auto____$6)) {
                      return or__3648__auto____$6;
                    } else {
                      var or__3648__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3648__auto____$7)) {
                        return or__3648__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__11950__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__11941_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__11941_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  var or__3648__auto____$2 = p2.call(null, p1__11941_SHARP_);
                  if (cljs.core.truth_(or__3648__auto____$2)) {
                    return or__3648__auto____$2;
                  } else {
                    return p3.call(null, p1__11941_SHARP_);
                  }
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__11950 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__11950__delegate.call(this, x, y, z, args);
        };
        G__11950.cljs$lang$maxFixedArity = 3;
        G__11950.cljs$lang$applyTo = function(arglist__11951) {
          var x = cljs.core.first(arglist__11951);
          arglist__11951 = cljs.core.next(arglist__11951);
          var y = cljs.core.first(arglist__11951);
          arglist__11951 = cljs.core.next(arglist__11951);
          var z = cljs.core.first(arglist__11951);
          var args = cljs.core.rest(arglist__11951);
          return G__11950__delegate(x, y, z, args);
        };
        G__11950.cljs$core$IFn$_invoke$arity$variadic = G__11950__delegate;
        return G__11950;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__11952__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11942_SHARP_) {
                return p1__11942_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11943_SHARP_) {
                var or__3648__auto__ = p1__11943_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  return p1__11943_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__11944_SHARP_) {
                var or__3648__auto__ = p1__11944_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  var or__3648__auto____$1 = p1__11944_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$1)) {
                    return or__3648__auto____$1;
                  } else {
                    return p1__11944_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__11953__delegate = function(x, y, z, args) {
              var or__3648__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3648__auto__, ps__$1) {
                  return function(p1__11945_SHARP_) {
                    return cljs.core.some.call(null, p1__11945_SHARP_, args);
                  };
                }(or__3648__auto__, ps__$1), ps__$1);
              }
            };
            var G__11953 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__11953__delegate.call(this, x, y, z, args);
            };
            G__11953.cljs$lang$maxFixedArity = 3;
            G__11953.cljs$lang$applyTo = function(arglist__11954) {
              var x = cljs.core.first(arglist__11954);
              arglist__11954 = cljs.core.next(arglist__11954);
              var y = cljs.core.first(arglist__11954);
              arglist__11954 = cljs.core.next(arglist__11954);
              var z = cljs.core.first(arglist__11954);
              var args = cljs.core.rest(arglist__11954);
              return G__11953__delegate(x, y, z, args);
            };
            G__11953.cljs$core$IFn$_invoke$arity$variadic = G__11953__delegate;
            return G__11953;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__11952 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11952__delegate.call(this, p1, p2, p3, ps);
    };
    G__11952.cljs$lang$maxFixedArity = 3;
    G__11952.cljs$lang$applyTo = function(arglist__11955) {
      var p1 = cljs.core.first(arglist__11955);
      arglist__11955 = cljs.core.next(arglist__11955);
      var p2 = cljs.core.first(arglist__11955);
      arglist__11955 = cljs.core.next(arglist__11955);
      var p3 = cljs.core.first(arglist__11955);
      var ps = cljs.core.rest(arglist__11955);
      return G__11952__delegate(p1, p2, p3, ps);
    };
    G__11952.cljs$core$IFn$_invoke$arity$variadic = G__11952__delegate;
    return G__11952;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__11957 = null;
        var G__11957__0 = function() {
          return rf.call(null);
        };
        var G__11957__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11957__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__11957__3 = function() {
          var G__11958__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__11958 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__11958__delegate.call(this, result, input, inputs);
          };
          G__11958.cljs$lang$maxFixedArity = 2;
          G__11958.cljs$lang$applyTo = function(arglist__11959) {
            var result = cljs.core.first(arglist__11959);
            arglist__11959 = cljs.core.next(arglist__11959);
            var input = cljs.core.first(arglist__11959);
            var inputs = cljs.core.rest(arglist__11959);
            return G__11958__delegate(result, input, inputs);
          };
          G__11958.cljs$core$IFn$_invoke$arity$variadic = G__11958__delegate;
          return G__11958;
        }();
        G__11957 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__11957__0.call(this);
            case 1:
              return G__11957__1.call(this, result);
            case 2:
              return G__11957__2.call(this, result, input);
            default:
              return G__11957__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11957.cljs$lang$maxFixedArity = 2;
        G__11957.cljs$lang$applyTo = G__11957__3.cljs$lang$applyTo;
        G__11957.cljs$core$IFn$_invoke$arity$0 = G__11957__0;
        G__11957.cljs$core$IFn$_invoke$arity$1 = G__11957__1;
        G__11957.cljs$core$IFn$_invoke$arity$2 = G__11957__2;
        G__11957.cljs$core$IFn$_invoke$arity$variadic = G__11957__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__11957;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11960 = size;
          var i_11961 = 0;
          while (true) {
            if (i_11961 < n__4518__auto___11960) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_11961)));
              var G__11962 = i_11961 + 1;
              i_11961 = G__11962;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__11963__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__11956_SHARP_) {
          return cljs.core.apply.call(null, f, p1__11956_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__11963 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11963__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__11963.cljs$lang$maxFixedArity = 4;
    G__11963.cljs$lang$applyTo = function(arglist__11964) {
      var f = cljs.core.first(arglist__11964);
      arglist__11964 = cljs.core.next(arglist__11964);
      var c1 = cljs.core.first(arglist__11964);
      arglist__11964 = cljs.core.next(arglist__11964);
      var c2 = cljs.core.first(arglist__11964);
      arglist__11964 = cljs.core.next(arglist__11964);
      var c3 = cljs.core.first(arglist__11964);
      var colls = cljs.core.rest(arglist__11964);
      return G__11963__delegate(f, c1, c2, c3, colls);
    };
    G__11963.cljs$core$IFn$_invoke$arity$variadic = G__11963__delegate;
    return G__11963;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__11965 = null;
          var G__11965__0 = function() {
            return rf.call(null);
          };
          var G__11965__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11965__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__11965 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11965__0.call(this);
              case 1:
                return G__11965__1.call(this, result);
              case 2:
                return G__11965__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11965.cljs$core$IFn$_invoke$arity$0 = G__11965__0;
          G__11965.cljs$core$IFn$_invoke$arity$1 = G__11965__1;
          G__11965.cljs$core$IFn$_invoke$arity$2 = G__11965__2;
          return G__11965;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__11966 = null;
          var G__11966__0 = function() {
            return rf.call(null);
          };
          var G__11966__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11966__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__11966 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11966__0.call(this);
              case 1:
                return G__11966__1.call(this, result);
              case 2:
                return G__11966__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11966.cljs$core$IFn$_invoke$arity$0 = G__11966__0;
          G__11966.cljs$core$IFn$_invoke$arity$1 = G__11966__1;
          G__11966.cljs$core$IFn$_invoke$arity$2 = G__11966__2;
          return G__11966;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__11967 = n__$1 - 1;
          var G__11968 = cljs.core.rest.call(null, s);
          n__$1 = G__11967;
          coll__$1 = G__11968;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__11969 = cljs.core.next.call(null, s);
      var G__11970 = cljs.core.next.call(null, lead);
      s = G__11969;
      lead = G__11970;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__11971 = null;
          var G__11971__0 = function() {
            return rf.call(null);
          };
          var G__11971__1 = function(result) {
            return rf.call(null, result);
          };
          var G__11971__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3636__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3636__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3636__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__11971 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11971__0.call(this);
              case 1:
                return G__11971__1.call(this, result);
              case 2:
                return G__11971__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11971.cljs$core$IFn$_invoke$arity$0 = G__11971__0;
          G__11971.cljs$core$IFn$_invoke$arity$1 = G__11971__1;
          G__11971.cljs$core$IFn$_invoke$arity$2 = G__11971__2;
          return G__11971;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3636__auto__ = s;
          if (and__3636__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3636__auto__;
          }
        }())) {
          var G__11972 = pred__$1;
          var G__11973 = cljs.core.rest.call(null, s);
          pred__$1 = G__11972;
          coll__$1 = G__11973;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__11974__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__11974 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11974__delegate.call(this, c1, c2, colls);
    };
    G__11974.cljs$lang$maxFixedArity = 2;
    G__11974.cljs$lang$applyTo = function(arglist__11975) {
      var c1 = cljs.core.first(arglist__11975);
      arglist__11975 = cljs.core.next(arglist__11975);
      var c2 = cljs.core.first(arglist__11975);
      var colls = cljs.core.rest(arglist__11975);
      return G__11974__delegate(c1, c2, colls);
    };
    G__11974.cljs$core$IFn$_invoke$arity$variadic = G__11974__delegate;
    return G__11974;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__11976__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__11976 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11976__delegate.call(this, f, colls);
    };
    G__11976.cljs$lang$maxFixedArity = 1;
    G__11976.cljs$lang$applyTo = function(arglist__11977) {
      var f = cljs.core.first(arglist__11977);
      var colls = cljs.core.rest(arglist__11977);
      return G__11976__delegate(f, colls);
    };
    G__11976.cljs$core$IFn$_invoke$arity$variadic = G__11976__delegate;
    return G__11976;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__11978 = null;
        var G__11978__0 = function() {
          return rf.call(null);
        };
        var G__11978__1 = function(result) {
          return rf.call(null, result);
        };
        var G__11978__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__11978 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11978__0.call(this);
            case 1:
              return G__11978__1.call(this, result);
            case 2:
              return G__11978__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11978.cljs$core$IFn$_invoke$arity$0 = G__11978__0;
        G__11978.cljs$core$IFn$_invoke$arity$1 = G__11978__1;
        G__11978.cljs$core$IFn$_invoke$arity$2 = G__11978__2;
        return G__11978;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___11979 = size;
          var i_11980 = 0;
          while (true) {
            if (i_11980 < n__4518__auto___11979) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_11980)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_11980));
              } else {
              }
              var G__11981 = i_11980 + 1;
              i_11980 = G__11981;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__11982_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__11982_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__11985 = to;
        if (G__11985) {
          var bit__4305__auto__ = G__11985.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4305__auto__ || G__11985.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__11986 = to;
      if (G__11986) {
        var bit__4305__auto__ = G__11986.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4305__auto__ || G__11986.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__11987__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__11987 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11987__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__11987.cljs$lang$maxFixedArity = 4;
    G__11987.cljs$lang$applyTo = function(arglist__11988) {
      var f = cljs.core.first(arglist__11988);
      arglist__11988 = cljs.core.next(arglist__11988);
      var c1 = cljs.core.first(arglist__11988);
      arglist__11988 = cljs.core.next(arglist__11988);
      var c2 = cljs.core.first(arglist__11988);
      arglist__11988 = cljs.core.next(arglist__11988);
      var c3 = cljs.core.first(arglist__11988);
      var colls = cljs.core.rest(arglist__11988);
      return G__11987__delegate(f, c1, c2, c3, colls);
    };
    G__11987.cljs$core$IFn$_invoke$arity$variadic = G__11987__delegate;
    return G__11987;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__11990 = m__$1;
          if (G__11990) {
            var bit__4312__auto__ = G__11990.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4312__auto__ || G__11990.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__11990.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__11990);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__11990);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__11991 = sentinel;
            var G__11992 = m__$2;
            var G__11993 = cljs.core.next.call(null, ks__$1);
            sentinel = G__11991;
            m__$1 = G__11992;
            ks__$1 = G__11993;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__11994, v) {
  var vec__11996 = p__11994;
  var k = cljs.core.nth.call(null, vec__11996, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__11996, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__11997, f) {
    var vec__12007 = p__11997;
    var k = cljs.core.nth.call(null, vec__12007, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12007, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__11998, f, a) {
    var vec__12008 = p__11998;
    var k = cljs.core.nth.call(null, vec__12008, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12008, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__11999, f, a, b) {
    var vec__12009 = p__11999;
    var k = cljs.core.nth.call(null, vec__12009, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12009, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__12000, f, a, b, c) {
    var vec__12010 = p__12000;
    var k = cljs.core.nth.call(null, vec__12010, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12010, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__12012__delegate = function(m, p__12001, f, a, b, c, args) {
      var vec__12011 = p__12001;
      var k = cljs.core.nth.call(null, vec__12011, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__12011, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__12012 = function(m, p__12001, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__12012__delegate.call(this, m, p__12001, f, a, b, c, args);
    };
    G__12012.cljs$lang$maxFixedArity = 6;
    G__12012.cljs$lang$applyTo = function(arglist__12013) {
      var m = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var p__12001 = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var f = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var a = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var b = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var c = cljs.core.first(arglist__12013);
      var args = cljs.core.rest(arglist__12013);
      return G__12012__delegate(m, p__12001, f, a, b, c, args);
    };
    G__12012.cljs$core$IFn$_invoke$arity$variadic = G__12012__delegate;
    return G__12012;
  }();
  update_in = function(m, p__12001, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__12001, f);
      case 4:
        return update_in__4.call(this, m, p__12001, f, a);
      case 5:
        return update_in__5.call(this, m, p__12001, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__12001, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__12001, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__12014 = ll - 5;
      var G__12015 = r;
      ll = G__12014;
      ret = G__12015;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__12016 = cljs.core.pv_aget.call(null, node, 0);
      var G__12017 = level - 5;
      node = G__12016;
      level = G__12017;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__12018 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__12019 = level - 5;
        node = G__12018;
        level = G__12019;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__12021 = j + 1;
              var G__12022 = init__$3;
              j = G__12021;
              init__$2 = G__12022;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12023 = i + len;
        var G__12024 = init__$2;
        i = G__12023;
        init__$1 = G__12024;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__12025 = j + 1;
              var G__12026 = init__$3;
              j = G__12025;
              init__$2 = G__12026;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12027 = i + len;
        var G__12028 = init__$2;
        i = G__12027;
        init__$1 = G__12028;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4518__auto___12029 = len;
    var i_12030 = 0;
    while (true) {
      if (i_12030 < n__4518__auto___12029) {
        new_tail[i_12030] = self__.tail[i_12030];
        var G__12031 = i_12030 + 1;
        i_12030 = G__12031;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__12032 = null;
  var G__12032__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12032__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12032 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12032__2.call(this, self__, k);
      case 3:
        return G__12032__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12032.cljs$core$IFn$_invoke$arity$2 = G__12032__2;
  G__12032.cljs$core$IFn$_invoke$arity$3 = G__12032__3;
  return G__12032;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args12020) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12020)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__12033 = i + 1;
        var G__12034 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__12033;
        out = G__12034;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__12035) {
    var args = cljs.core.seq(arglist__12035);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3955__auto__ = self__.end;
    var y__3956__auto__ = v_pos + 1;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__12037 = null;
  var G__12037__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12037__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12037 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12037__2.call(this, self__, k);
      case 3:
        return G__12037__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12037.cljs$core$IFn$_invoke$arity$2 = G__12037__2;
  G__12037.cljs$core$IFn$_invoke$arity$3 = G__12037__3;
  return G__12037;
}();
cljs.core.Subvec.prototype.apply = function(self__, args12036) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12036)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__12038 = meta;
      var G__12039 = v.v;
      var G__12040 = v.start + start;
      var G__12041 = v.start + end;
      var G__12042 = __hash;
      meta = G__12038;
      v = G__12039;
      start = G__12040;
      end = G__12041;
      __hash = G__12042;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj12046 = {};
    return obj12046;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__12047 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__12048 = level - 5;
        node = G__12047;
        level = G__12048;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__12050 = null;
  var G__12050__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12050__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12050 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12050__2.call(this, self__, k);
      case 3:
        return G__12050__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12050.cljs$core$IFn$_invoke$arity$2 = G__12050__2;
  G__12050.cljs$core$IFn$_invoke$arity$3 = G__12050__3;
  return G__12050;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args12049) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12049)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = self__.front;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3648__auto__ = self__.rear;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__12051 = i + incr;
        i = G__12051;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__12052 = i + 1;
      var G__12053 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__12052;
      out = G__12053;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj12057 = {};
    return obj12057;
  }();
  var l = ks.length;
  var i_12058 = 0;
  while (true) {
    if (i_12058 < l) {
      var k_12059 = ks[i_12058];
      new_obj[k_12059] = obj[k_12059];
      var G__12060 = i_12058 + 1;
      i_12058 = G__12060;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12063 = cljs.core.rest.call(null, keys__$1);
        var G__12064 = init__$2;
        keys__$1 = G__12063;
        init__$1 = G__12064;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__12061_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12061_SHARP_, self__.strobj[p1__12061_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__12065 = null;
  var G__12065__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12065__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12065 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12065__2.call(this, self__, k);
      case 3:
        return G__12065__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12065.cljs$core$IFn$_invoke$arity$2 = G__12065__2;
  G__12065.cljs$core$IFn$_invoke$arity$3 = G__12065__3;
  return G__12065;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args12062) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12062)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj12067 = {};
  return obj12067;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__12068 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__12068, 0, null);
    var v = cljs.core.nth.call(null, vec__12068, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__12069 = i + 2;
        i = G__12069;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__12070 = i + 2;
        i = G__12070;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__12071 = i + 2;
        i = G__12071;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__12072 = i + 2;
        i = G__12072;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__12073 = i + 2;
        i = G__12073;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_12074 = 0;
  while (true) {
    if (i_12074 < l) {
      narr[i_12074] = arr[i_12074];
      var G__12075 = i_12074 + 1;
      i_12074 = G__12075;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12077 = cljs.core.seq.call(null, coll);
  var chunk__12078 = null;
  var count__12079 = 0;
  var i__12080 = 0;
  while (true) {
    if (i__12080 < count__12079) {
      var vec__12081 = cljs.core._nth.call(null, chunk__12078, i__12080);
      var k = cljs.core.nth.call(null, vec__12081, 0, null);
      var v = cljs.core.nth.call(null, vec__12081, 1, null);
      f.call(null, v, k);
      var G__12087 = seq__12077;
      var G__12088 = chunk__12078;
      var G__12089 = count__12079;
      var G__12090 = i__12080 + 1;
      seq__12077 = G__12087;
      chunk__12078 = G__12088;
      count__12079 = G__12089;
      i__12080 = G__12090;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12077);
      if (temp__4126__auto__) {
        var seq__12077__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12077__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12077__$1);
          var G__12091 = cljs.core.chunk_rest.call(null, seq__12077__$1);
          var G__12092 = c__4418__auto__;
          var G__12093 = cljs.core.count.call(null, c__4418__auto__);
          var G__12094 = 0;
          seq__12077 = G__12091;
          chunk__12078 = G__12092;
          count__12079 = G__12093;
          i__12080 = G__12094;
          continue;
        } else {
          var vec__12082 = cljs.core.first.call(null, seq__12077__$1);
          var k = cljs.core.nth.call(null, vec__12082, 0, null);
          var v = cljs.core.nth.call(null, vec__12082, 1, null);
          f.call(null, v, k);
          var G__12095 = cljs.core.next.call(null, seq__12077__$1);
          var G__12096 = null;
          var G__12097 = 0;
          var G__12098 = 0;
          seq__12077 = G__12095;
          chunk__12078 = G__12096;
          count__12079 = G__12097;
          i__12080 = G__12098;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12099 = i + 2;
        var G__12100 = init__$2;
        i = G__12099;
        init__$1 = G__12100;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__12083 = other;
    if (G__12083) {
      var bit__4305__auto__ = G__12083.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4305__auto__ || G__12083.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__12101 = i + 2;
              i = G__12101;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj12085 = {};
    return obj12085;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__12102 = s + 2;
            var G__12103 = d;
            s = G__12102;
            d = G__12103;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__12104 = s + 2;
            var G__12105 = d + 2;
            s = G__12104;
            d = G__12105;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__12086 = cljs.core.aclone.call(null, self__.arr);
        G__12086[idx + 1] = v;
        return G__12086;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12106 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12107 = cljs.core.next.call(null, es);
          ret = G__12106;
          es = G__12107;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__12108 = null;
  var G__12108__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12108__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12108 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12108__2.call(this, self__, k);
      case 3:
        return G__12108__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12108.cljs$core$IFn$_invoke$arity$2 = G__12108__2;
  G__12108.cljs$core$IFn$_invoke$arity$3 = G__12108__3;
  return G__12108;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args12076) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12076)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12109 = i + 2;
        var G__12110 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__12109;
        ret = G__12110;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__12111_12113 = self__.arr;
      G__12111_12113.pop();
      G__12111_12113.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__12112 = o;
      if (G__12112) {
        var bit__4312__auto__ = G__12112.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__12112.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12112.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12112);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12112);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__12114 = cljs.core.next.call(null, es);
          var G__12115 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12114;
          tcoll__$2 = G__12115;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__12116 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__12117 = i + 2;
      out = G__12116;
      i = G__12117;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__12120 = cljs.core.aclone.call(null, arr);
    G__12120[i] = a;
    return G__12120;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__12121 = cljs.core.aclone.call(null, arr);
    G__12121[i] = a;
    G__12121[j] = b;
    return G__12121;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12122 = i + 2;
        var G__12123 = init__$2;
        i = G__12122;
        init__$1 = G__12123;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_12124 = 0;
        var j_12125 = 0;
        while (true) {
          if (i_12124 < 32) {
            if ((self__.bitmap >>> i_12124 & 1) === 0) {
              var G__12126 = i_12124 + 1;
              var G__12127 = j_12125;
              i_12124 = G__12126;
              j_12125 = G__12127;
              continue;
            } else {
              nodes[i_12124] = !(self__.arr[j_12125] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_12125]), self__.arr[j_12125], self__.arr[j_12125 + 1], added_leaf_QMARK_) : self__.arr[j_12125 + 1];
              var G__12128 = i_12124 + 1;
              var G__12129 = j_12125 + 2;
              i_12124 = G__12128;
              j_12125 = G__12129;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_12130 = 0;
      var j_12131 = 0;
      while (true) {
        if (i_12130 < 32) {
          if ((self__.bitmap >>> i_12130 & 1) === 0) {
            var G__12132 = i_12130 + 1;
            var G__12133 = j_12131;
            i_12130 = G__12132;
            j_12131 = G__12133;
            continue;
          } else {
            nodes[i_12130] = !(self__.arr[j_12131] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_12131]), self__.arr[j_12131], self__.arr[j_12131 + 1], added_leaf_QMARK_) : self__.arr[j_12131 + 1];
            var G__12134 = i_12130 + 1;
            var G__12135 = j_12131 + 2;
            i_12130 = G__12134;
            j_12131 = G__12135;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__12136 = i + 1;
        var G__12137 = j + 2;
        var G__12138 = bitmap | 1 << i;
        i = G__12136;
        j = G__12137;
        bitmap = G__12138;
        continue;
      } else {
        var G__12139 = i + 1;
        var G__12140 = j;
        var G__12141 = bitmap;
        i = G__12139;
        j = G__12140;
        bitmap = G__12141;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__12142 = i + 1;
          var G__12143 = init__$2;
          i = G__12142;
          init__$1 = G__12143;
          continue;
        }
      } else {
        var G__12144 = i + 1;
        var G__12145 = init__$1;
        i = G__12144;
        init__$1 = G__12145;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__12146 = i + 2;
        i = G__12146;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__12147 = j + 2;
                j = G__12147;
                continue;
              }
            } else {
              var G__12148 = j + 2;
              j = G__12148;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__12149 = j + 1;
              j = G__12149;
              continue;
            }
          } else {
            var G__12150 = j + 1;
            j = G__12150;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12152 = cljs.core.seq.call(null, coll);
  var chunk__12153 = null;
  var count__12154 = 0;
  var i__12155 = 0;
  while (true) {
    if (i__12155 < count__12154) {
      var vec__12156 = cljs.core._nth.call(null, chunk__12153, i__12155);
      var k = cljs.core.nth.call(null, vec__12156, 0, null);
      var v = cljs.core.nth.call(null, vec__12156, 1, null);
      f.call(null, v, k);
      var G__12160 = seq__12152;
      var G__12161 = chunk__12153;
      var G__12162 = count__12154;
      var G__12163 = i__12155 + 1;
      seq__12152 = G__12160;
      chunk__12153 = G__12161;
      count__12154 = G__12162;
      i__12155 = G__12163;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12152);
      if (temp__4126__auto__) {
        var seq__12152__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12152__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12152__$1);
          var G__12164 = cljs.core.chunk_rest.call(null, seq__12152__$1);
          var G__12165 = c__4418__auto__;
          var G__12166 = cljs.core.count.call(null, c__4418__auto__);
          var G__12167 = 0;
          seq__12152 = G__12164;
          chunk__12153 = G__12165;
          count__12154 = G__12166;
          i__12155 = G__12167;
          continue;
        } else {
          var vec__12157 = cljs.core.first.call(null, seq__12152__$1);
          var k = cljs.core.nth.call(null, vec__12157, 0, null);
          var v = cljs.core.nth.call(null, vec__12157, 1, null);
          f.call(null, v, k);
          var G__12168 = cljs.core.next.call(null, seq__12152__$1);
          var G__12169 = null;
          var G__12170 = 0;
          var G__12171 = 0;
          seq__12152 = G__12168;
          chunk__12153 = G__12169;
          count__12154 = G__12170;
          i__12155 = G__12171;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj12159 = {};
    return obj12159;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12172 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12173 = cljs.core.next.call(null, es);
          ret = G__12172;
          es = G__12173;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__12174 = null;
  var G__12174__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12174__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12174 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12174__2.call(this, self__, k);
      case 3:
        return G__12174__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12174.cljs$core$IFn$_invoke$arity$2 = G__12174__2;
  G__12174.cljs$core$IFn$_invoke$arity$3 = G__12174__3;
  return G__12174;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args12151) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12151)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__12175 = i + 1;
      var G__12176 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__12175;
      out = G__12176;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__12177 = o;
      if (G__12177) {
        var bit__4312__auto__ = G__12177.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__12177.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12177.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12177);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12177);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__12178 = cljs.core.next.call(null, es);
          var G__12179 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12178;
          tcoll__$1 = G__12179;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__12180 = ascending_QMARK_ ? t.left : t.right;
      var G__12181 = cljs.core.conj.call(null, stack__$1, t);
      t = G__12180;
      stack__$1 = G__12181;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__12183 = null;
  var G__12183__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12183__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12183 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12183__2.call(this, self__, k);
      case 3:
        return G__12183__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12183.cljs$core$IFn$_invoke$arity$2 = G__12183__2;
  G__12183.cljs$core$IFn$_invoke$arity$3 = G__12183__3;
  return G__12183;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args12182) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12182)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__12185 = null;
  var G__12185__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12185__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12185 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12185__2.call(this, self__, k);
      case 3:
        return G__12185__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12185.cljs$core$IFn$_invoke$arity$2 = G__12185__2;
  G__12185.cljs$core$IFn$_invoke$arity$3 = G__12185__3;
  return G__12185;
}();
cljs.core.RedNode.prototype.apply = function(self__, args12184) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12184)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12187 = cljs.core.seq.call(null, coll);
  var chunk__12188 = null;
  var count__12189 = 0;
  var i__12190 = 0;
  while (true) {
    if (i__12190 < count__12189) {
      var vec__12191 = cljs.core._nth.call(null, chunk__12188, i__12190);
      var k = cljs.core.nth.call(null, vec__12191, 0, null);
      var v = cljs.core.nth.call(null, vec__12191, 1, null);
      f.call(null, v, k);
      var G__12193 = seq__12187;
      var G__12194 = chunk__12188;
      var G__12195 = count__12189;
      var G__12196 = i__12190 + 1;
      seq__12187 = G__12193;
      chunk__12188 = G__12194;
      count__12189 = G__12195;
      i__12190 = G__12196;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12187);
      if (temp__4126__auto__) {
        var seq__12187__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12187__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12187__$1);
          var G__12197 = cljs.core.chunk_rest.call(null, seq__12187__$1);
          var G__12198 = c__4418__auto__;
          var G__12199 = cljs.core.count.call(null, c__4418__auto__);
          var G__12200 = 0;
          seq__12187 = G__12197;
          chunk__12188 = G__12198;
          count__12189 = G__12199;
          i__12190 = G__12200;
          continue;
        } else {
          var vec__12192 = cljs.core.first.call(null, seq__12187__$1);
          var k = cljs.core.nth.call(null, vec__12192, 0, null);
          var v = cljs.core.nth.call(null, vec__12192, 1, null);
          f.call(null, v, k);
          var G__12201 = cljs.core.next.call(null, seq__12187__$1);
          var G__12202 = null;
          var G__12203 = 0;
          var G__12204 = 0;
          seq__12187 = G__12201;
          chunk__12188 = G__12202;
          count__12189 = G__12203;
          i__12190 = G__12204;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__12205 = t.left;
          t = G__12205;
          continue;
        } else {
          var G__12206 = t.right;
          t = G__12206;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12207 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12208 = cljs.core.next.call(null, es);
          ret = G__12207;
          es = G__12208;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__12209 = null;
  var G__12209__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12209__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12209 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12209__2.call(this, self__, k);
      case 3:
        return G__12209__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12209.cljs$core$IFn$_invoke$arity$2 = G__12209__2;
  G__12209.cljs$core$IFn$_invoke$arity$3 = G__12209__3;
  return G__12209;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args12186) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12186)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__12210 = cljs.core.conj.call(null, stack, t);
              var G__12211 = t.left;
              stack = G__12210;
              t = G__12211;
              continue;
            } else {
              var G__12212 = stack;
              var G__12213 = t.right;
              stack = G__12212;
              t = G__12213;
              continue;
            }
          } else {
            if (c > 0) {
              var G__12214 = cljs.core.conj.call(null, stack, t);
              var G__12215 = t.right;
              stack = G__12214;
              t = G__12215;
              continue;
            } else {
              var G__12216 = stack;
              var G__12217 = t.left;
              stack = G__12216;
              t = G__12217;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__12218 = cljs.core.nnext.call(null, in$);
        var G__12219 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12218;
        out = G__12219;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__12220) {
    var keyvals = cljs.core.seq(arglist__12220);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__12221) {
    var keyvals = cljs.core.seq(arglist__12221);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj12225 = {};
      return obj12225;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__12226 = cljs.core.nnext.call(null, kvs);
        kvs = G__12226;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__12227) {
    var keyvals = cljs.core.seq(arglist__12227);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__12228 = cljs.core.nnext.call(null, in$);
        var G__12229 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12228;
        out = G__12229;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__12230) {
    var keyvals = cljs.core.seq(arglist__12230);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__12231 = cljs.core.nnext.call(null, in$);
        var G__12232 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12231;
        out = G__12232;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__12233) {
    var comparator = cljs.core.first(arglist__12233);
    var keyvals = cljs.core.rest(arglist__12233);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12234 = self__.mseq;
    if (G__12234) {
      var bit__4312__auto__ = G__12234.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12234.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12234.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12234);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12234);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12235 = self__.mseq;
    if (G__12235) {
      var bit__4312__auto__ = G__12235.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12235.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12235.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12235);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12235);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12236 = self__.mseq;
    if (G__12236) {
      var bit__4312__auto__ = G__12236.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12236.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12236.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12236);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12236);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12237 = self__.mseq;
    if (G__12237) {
      var bit__4312__auto__ = G__12237.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12237.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12237.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12237);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12237);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__12238_SHARP_, p2__12239_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3648__auto__ = p1__12238_SHARP_;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__12239_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__12240) {
    var maps = cljs.core.seq(arglist__12240);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3648__auto__ = m1;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__12241) {
    var f = cljs.core.first(arglist__12241);
    var maps = cljs.core.rest(arglist__12241);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__12242 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__12243 = cljs.core.next.call(null, keys);
      ret = G__12242;
      keys = G__12243;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12246 = cljs.core.seq.call(null, coll);
  var chunk__12247 = null;
  var count__12248 = 0;
  var i__12249 = 0;
  while (true) {
    if (i__12249 < count__12248) {
      var vec__12250 = cljs.core._nth.call(null, chunk__12247, i__12249);
      var k = cljs.core.nth.call(null, vec__12250, 0, null);
      var v = cljs.core.nth.call(null, vec__12250, 1, null);
      f.call(null, v, k);
      var G__12252 = seq__12246;
      var G__12253 = chunk__12247;
      var G__12254 = count__12248;
      var G__12255 = i__12249 + 1;
      seq__12246 = G__12252;
      chunk__12247 = G__12253;
      count__12248 = G__12254;
      i__12249 = G__12255;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12246);
      if (temp__4126__auto__) {
        var seq__12246__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12246__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12246__$1);
          var G__12256 = cljs.core.chunk_rest.call(null, seq__12246__$1);
          var G__12257 = c__4418__auto__;
          var G__12258 = cljs.core.count.call(null, c__4418__auto__);
          var G__12259 = 0;
          seq__12246 = G__12256;
          chunk__12247 = G__12257;
          count__12248 = G__12258;
          i__12249 = G__12259;
          continue;
        } else {
          var vec__12251 = cljs.core.first.call(null, seq__12246__$1);
          var k = cljs.core.nth.call(null, vec__12251, 0, null);
          var v = cljs.core.nth.call(null, vec__12251, 1, null);
          f.call(null, v, k);
          var G__12260 = cljs.core.next.call(null, seq__12246__$1);
          var G__12261 = null;
          var G__12262 = 0;
          var G__12263 = 0;
          seq__12246 = G__12260;
          chunk__12247 = G__12261;
          count__12248 = G__12262;
          i__12249 = G__12263;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12244_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12244_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__12264 = null;
  var G__12264__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12264__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12264 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12264__2.call(this, self__, k);
      case 3:
        return G__12264__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12264.cljs$core$IFn$_invoke$arity$2 = G__12264__2;
  G__12264.cljs$core$IFn$_invoke$arity$3 = G__12264__3;
  return G__12264;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args12245) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12245)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12265 = i + 1;
        var G__12266 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__12265;
        out = G__12266;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__12267 = i + 1;
        var G__12268 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__12267;
        out = G__12268;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__12270 = null;
  var G__12270__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__12270__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__12270 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12270__2.call(this, self__, k);
      case 3:
        return G__12270__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12270.cljs$core$IFn$_invoke$arity$2 = G__12270__2;
  G__12270.cljs$core$IFn$_invoke$arity$3 = G__12270__3;
  return G__12270;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args12269) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12269)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12273 = cljs.core.seq.call(null, coll);
  var chunk__12274 = null;
  var count__12275 = 0;
  var i__12276 = 0;
  while (true) {
    if (i__12276 < count__12275) {
      var vec__12277 = cljs.core._nth.call(null, chunk__12274, i__12276);
      var k = cljs.core.nth.call(null, vec__12277, 0, null);
      var v = cljs.core.nth.call(null, vec__12277, 1, null);
      f.call(null, v, k);
      var G__12279 = seq__12273;
      var G__12280 = chunk__12274;
      var G__12281 = count__12275;
      var G__12282 = i__12276 + 1;
      seq__12273 = G__12279;
      chunk__12274 = G__12280;
      count__12275 = G__12281;
      i__12276 = G__12282;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12273);
      if (temp__4126__auto__) {
        var seq__12273__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12273__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12273__$1);
          var G__12283 = cljs.core.chunk_rest.call(null, seq__12273__$1);
          var G__12284 = c__4418__auto__;
          var G__12285 = cljs.core.count.call(null, c__4418__auto__);
          var G__12286 = 0;
          seq__12273 = G__12283;
          chunk__12274 = G__12284;
          count__12275 = G__12285;
          i__12276 = G__12286;
          continue;
        } else {
          var vec__12278 = cljs.core.first.call(null, seq__12273__$1);
          var k = cljs.core.nth.call(null, vec__12278, 0, null);
          var v = cljs.core.nth.call(null, vec__12278, 1, null);
          f.call(null, v, k);
          var G__12287 = cljs.core.next.call(null, seq__12273__$1);
          var G__12288 = null;
          var G__12289 = 0;
          var G__12290 = 0;
          seq__12273 = G__12287;
          chunk__12274 = G__12288;
          count__12275 = G__12289;
          i__12276 = G__12290;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12271_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12271_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__12291 = null;
  var G__12291__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12291__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12291 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12291__2.call(this, self__, k);
      case 3:
        return G__12291__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12291.cljs$core$IFn$_invoke$arity$2 = G__12291__2;
  G__12291.cljs$core$IFn$_invoke$arity$3 = G__12291__3;
  return G__12291;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args12272) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12272)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4512__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4512__auto__.length) {
        var G__12292 = i + 1;
        var G__12293 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__12292;
        res = G__12293;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__12294 = cljs.core._next.call(null, in$__$1);
          var G__12295 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__12294;
          out = G__12295;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__12296__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__12296 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12296__delegate.call(this, keys);
    };
    G__12296.cljs$lang$maxFixedArity = 0;
    G__12296.cljs$lang$applyTo = function(arglist__12297) {
      var keys = cljs.core.seq(arglist__12297);
      return G__12296__delegate(keys);
    };
    G__12296.cljs$core$IFn$_invoke$arity$variadic = G__12296__delegate;
    return G__12296;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__12298) {
    var keys = cljs.core.seq(arglist__12298);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__12299) {
    var comparator = cljs.core.first(arglist__12299);
    var keys = cljs.core.rest(arglist__12299);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__12300_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12300_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__12300_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__12301_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12301_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__12301_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12308, seen__$1) {
        while (true) {
          var vec__12309 = p__12308;
          var f = cljs.core.nth.call(null, vec__12309, 0, null);
          var xs__$1 = vec__12309;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__12310 = cljs.core.rest.call(null, s);
              var G__12311 = seen__$1;
              p__12308 = G__12310;
              seen__$1 = G__12311;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__12312 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__12313 = cljs.core.next.call(null, s__$1);
      ret = G__12312;
      s__$1 = G__12313;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__12315 = x;
    if (G__12315) {
      var bit__4305__auto__ = G__12315.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__12315.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__12316 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__12317 = cljs.core.next.call(null, ks);
      var G__12318 = cljs.core.next.call(null, vs);
      map = G__12316;
      ks = G__12317;
      vs = G__12318;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__12321__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12319_SHARP_, p2__12320_SHARP_) {
        return max_key.call(null, k, p1__12319_SHARP_, p2__12320_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__12321 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12321__delegate.call(this, k, x, y, more);
    };
    G__12321.cljs$lang$maxFixedArity = 3;
    G__12321.cljs$lang$applyTo = function(arglist__12322) {
      var k = cljs.core.first(arglist__12322);
      arglist__12322 = cljs.core.next(arglist__12322);
      var x = cljs.core.first(arglist__12322);
      arglist__12322 = cljs.core.next(arglist__12322);
      var y = cljs.core.first(arglist__12322);
      var more = cljs.core.rest(arglist__12322);
      return G__12321__delegate(k, x, y, more);
    };
    G__12321.cljs$core$IFn$_invoke$arity$variadic = G__12321__delegate;
    return G__12321;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__12325__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12323_SHARP_, p2__12324_SHARP_) {
        return min_key.call(null, k, p1__12323_SHARP_, p2__12324_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__12325 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12325__delegate.call(this, k, x, y, more);
    };
    G__12325.cljs$lang$maxFixedArity = 3;
    G__12325.cljs$lang$applyTo = function(arglist__12326) {
      var k = cljs.core.first(arglist__12326);
      arglist__12326 = cljs.core.next(arglist__12326);
      var x = cljs.core.first(arglist__12326);
      arglist__12326 = cljs.core.next(arglist__12326);
      var y = cljs.core.first(arglist__12326);
      var more = cljs.core.rest(arglist__12326);
      return G__12325__delegate(k, x, y, more);
    };
    G__12325.cljs$core$IFn$_invoke$arity$variadic = G__12325__delegate;
    return G__12325;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__12327 = null;
          var G__12327__0 = function() {
            return rf.call(null);
          };
          var G__12327__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12327__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__12327 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12327__0.call(this);
              case 1:
                return G__12327__1.call(this, result);
              case 2:
                return G__12327__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12327.cljs$core$IFn$_invoke$arity$0 = G__12327__0;
          G__12327.cljs$core$IFn$_invoke$arity$1 = G__12327__1;
          G__12327.cljs$core$IFn$_invoke$arity$2 = G__12327__2;
          return G__12327;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__12328 = null;
        var G__12328__0 = function() {
          return rf.call(null);
        };
        var G__12328__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12328__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__12328 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12328__0.call(this);
            case 1:
              return G__12328__1.call(this, result);
            case 2:
              return G__12328__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12328.cljs$core$IFn$_invoke$arity$0 = G__12328__0;
        G__12328.cljs$core$IFn$_invoke$arity$1 = G__12328__1;
        G__12328.cljs$core$IFn$_invoke$arity$2 = G__12328__2;
        return G__12328;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test__$1, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test__$1.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test__$1, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test__$1, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test__$1))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12331 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12331, 0, null);
        var s = vec__12331;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12332 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12332, 0, null);
      var s = vec__12332;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test__$1, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test__$1, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test__$1))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12335 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12335, 0, null);
        var s = vec__12335;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12336 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12336, 0, null);
      var s = vec__12336;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__12337 = i + self__.step;
        var G__12338 = ret__$1;
        i = G__12337;
        ret = G__12338;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__12339 = null;
          var G__12339__0 = function() {
            return rf.call(null);
          };
          var G__12339__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12339__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__12339 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12339__0.call(this);
              case 1:
                return G__12339__1.call(this, result);
              case 2:
                return G__12339__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12339.cljs$core$IFn$_invoke$arity$0 = G__12339__0;
          G__12339.cljs$core$IFn$_invoke$arity$1 = G__12339__1;
          G__12339.cljs$core$IFn$_invoke$arity$2 = G__12339__2;
          return G__12339;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__12341 = null;
          var G__12341__0 = function() {
            return rf.call(null);
          };
          var G__12341__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12341__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__12341 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12341__0.call(this);
              case 1:
                return G__12341__1.call(this, result);
              case 2:
                return G__12341__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12341.cljs$core$IFn$_invoke$arity$0 = G__12341__0;
          G__12341.cljs$core$IFn$_invoke$arity$1 = G__12341__1;
          G__12341.cljs$core$IFn$_invoke$arity$2 = G__12341__2;
          return G__12341;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__12340_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__12340_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__12352 = null;
      var G__12352__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__12352__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__12352__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__12352__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__12352__4 = function() {
        var G__12353__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__12353 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12353__delegate.call(this, x, y, z, args);
        };
        G__12353.cljs$lang$maxFixedArity = 3;
        G__12353.cljs$lang$applyTo = function(arglist__12354) {
          var x = cljs.core.first(arglist__12354);
          arglist__12354 = cljs.core.next(arglist__12354);
          var y = cljs.core.first(arglist__12354);
          arglist__12354 = cljs.core.next(arglist__12354);
          var z = cljs.core.first(arglist__12354);
          var args = cljs.core.rest(arglist__12354);
          return G__12353__delegate(x, y, z, args);
        };
        G__12353.cljs$core$IFn$_invoke$arity$variadic = G__12353__delegate;
        return G__12353;
      }();
      G__12352 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12352__0.call(this);
          case 1:
            return G__12352__1.call(this, x);
          case 2:
            return G__12352__2.call(this, x, y);
          case 3:
            return G__12352__3.call(this, x, y, z);
          default:
            return G__12352__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12352.cljs$lang$maxFixedArity = 3;
      G__12352.cljs$lang$applyTo = G__12352__4.cljs$lang$applyTo;
      G__12352.cljs$core$IFn$_invoke$arity$0 = G__12352__0;
      G__12352.cljs$core$IFn$_invoke$arity$1 = G__12352__1;
      G__12352.cljs$core$IFn$_invoke$arity$2 = G__12352__2;
      G__12352.cljs$core$IFn$_invoke$arity$3 = G__12352__3;
      G__12352.cljs$core$IFn$_invoke$arity$variadic = G__12352__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12352;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__12355 = null;
      var G__12355__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__12355__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__12355__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__12355__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__12355__4 = function() {
        var G__12356__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__12356 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12356__delegate.call(this, x, y, z, args);
        };
        G__12356.cljs$lang$maxFixedArity = 3;
        G__12356.cljs$lang$applyTo = function(arglist__12357) {
          var x = cljs.core.first(arglist__12357);
          arglist__12357 = cljs.core.next(arglist__12357);
          var y = cljs.core.first(arglist__12357);
          arglist__12357 = cljs.core.next(arglist__12357);
          var z = cljs.core.first(arglist__12357);
          var args = cljs.core.rest(arglist__12357);
          return G__12356__delegate(x, y, z, args);
        };
        G__12356.cljs$core$IFn$_invoke$arity$variadic = G__12356__delegate;
        return G__12356;
      }();
      G__12355 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12355__0.call(this);
          case 1:
            return G__12355__1.call(this, x);
          case 2:
            return G__12355__2.call(this, x, y);
          case 3:
            return G__12355__3.call(this, x, y, z);
          default:
            return G__12355__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12355.cljs$lang$maxFixedArity = 3;
      G__12355.cljs$lang$applyTo = G__12355__4.cljs$lang$applyTo;
      G__12355.cljs$core$IFn$_invoke$arity$0 = G__12355__0;
      G__12355.cljs$core$IFn$_invoke$arity$1 = G__12355__1;
      G__12355.cljs$core$IFn$_invoke$arity$2 = G__12355__2;
      G__12355.cljs$core$IFn$_invoke$arity$3 = G__12355__3;
      G__12355.cljs$core$IFn$_invoke$arity$variadic = G__12355__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12355;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__12358 = null;
      var G__12358__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__12358__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__12358__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__12358__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__12358__4 = function() {
        var G__12359__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__12359 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12359__delegate.call(this, x, y, z, args);
        };
        G__12359.cljs$lang$maxFixedArity = 3;
        G__12359.cljs$lang$applyTo = function(arglist__12360) {
          var x = cljs.core.first(arglist__12360);
          arglist__12360 = cljs.core.next(arglist__12360);
          var y = cljs.core.first(arglist__12360);
          arglist__12360 = cljs.core.next(arglist__12360);
          var z = cljs.core.first(arglist__12360);
          var args = cljs.core.rest(arglist__12360);
          return G__12359__delegate(x, y, z, args);
        };
        G__12359.cljs$core$IFn$_invoke$arity$variadic = G__12359__delegate;
        return G__12359;
      }();
      G__12358 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12358__0.call(this);
          case 1:
            return G__12358__1.call(this, x);
          case 2:
            return G__12358__2.call(this, x, y);
          case 3:
            return G__12358__3.call(this, x, y, z);
          default:
            return G__12358__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12358.cljs$lang$maxFixedArity = 3;
      G__12358.cljs$lang$applyTo = G__12358__4.cljs$lang$applyTo;
      G__12358.cljs$core$IFn$_invoke$arity$0 = G__12358__0;
      G__12358.cljs$core$IFn$_invoke$arity$1 = G__12358__1;
      G__12358.cljs$core$IFn$_invoke$arity$2 = G__12358__2;
      G__12358.cljs$core$IFn$_invoke$arity$3 = G__12358__3;
      G__12358.cljs$core$IFn$_invoke$arity$variadic = G__12358__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12358;
    }();
  };
  var juxt__4 = function() {
    var G__12361__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__12362 = null;
          var G__12362__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12342_SHARP_, p2__12343_SHARP_) {
                return cljs.core.conj.call(null, p1__12342_SHARP_, p2__12343_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12362__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12344_SHARP_, p2__12345_SHARP_) {
                return cljs.core.conj.call(null, p1__12344_SHARP_, p2__12345_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12362__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12346_SHARP_, p2__12347_SHARP_) {
                return cljs.core.conj.call(null, p1__12346_SHARP_, p2__12347_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12362__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12348_SHARP_, p2__12349_SHARP_) {
                return cljs.core.conj.call(null, p1__12348_SHARP_, p2__12349_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12362__4 = function() {
            var G__12363__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__12350_SHARP_, p2__12351_SHARP_) {
                  return cljs.core.conj.call(null, p1__12350_SHARP_, cljs.core.apply.call(null, p2__12351_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__12363 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__12363__delegate.call(this, x, y, z, args);
            };
            G__12363.cljs$lang$maxFixedArity = 3;
            G__12363.cljs$lang$applyTo = function(arglist__12364) {
              var x = cljs.core.first(arglist__12364);
              arglist__12364 = cljs.core.next(arglist__12364);
              var y = cljs.core.first(arglist__12364);
              arglist__12364 = cljs.core.next(arglist__12364);
              var z = cljs.core.first(arglist__12364);
              var args = cljs.core.rest(arglist__12364);
              return G__12363__delegate(x, y, z, args);
            };
            G__12363.cljs$core$IFn$_invoke$arity$variadic = G__12363__delegate;
            return G__12363;
          }();
          G__12362 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__12362__0.call(this);
              case 1:
                return G__12362__1.call(this, x);
              case 2:
                return G__12362__2.call(this, x, y);
              case 3:
                return G__12362__3.call(this, x, y, z);
              default:
                return G__12362__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12362.cljs$lang$maxFixedArity = 3;
          G__12362.cljs$lang$applyTo = G__12362__4.cljs$lang$applyTo;
          G__12362.cljs$core$IFn$_invoke$arity$0 = G__12362__0;
          G__12362.cljs$core$IFn$_invoke$arity$1 = G__12362__1;
          G__12362.cljs$core$IFn$_invoke$arity$2 = G__12362__2;
          G__12362.cljs$core$IFn$_invoke$arity$3 = G__12362__3;
          G__12362.cljs$core$IFn$_invoke$arity$variadic = G__12362__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__12362;
        }();
      }(fs__$1);
    };
    var G__12361 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12361__delegate.call(this, f, g, h, fs);
    };
    G__12361.cljs$lang$maxFixedArity = 3;
    G__12361.cljs$lang$applyTo = function(arglist__12365) {
      var f = cljs.core.first(arglist__12365);
      arglist__12365 = cljs.core.next(arglist__12365);
      var g = cljs.core.first(arglist__12365);
      arglist__12365 = cljs.core.next(arglist__12365);
      var h = cljs.core.first(arglist__12365);
      var fs = cljs.core.rest(arglist__12365);
      return G__12361__delegate(f, g, h, fs);
    };
    G__12361.cljs$core$IFn$_invoke$arity$variadic = G__12361__delegate;
    return G__12361;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__12366 = cljs.core.next.call(null, coll);
        coll = G__12366;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__12367 = n - 1;
        var G__12368 = cljs.core.next.call(null, coll);
        n = G__12367;
        coll = G__12368;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__12370 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__12370, 0, null);
    var flags = cljs.core.nth.call(null, vec__12370, 1, null);
    var pattern = cljs.core.nth.call(null, vec__12370, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12372 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_12373__$1 = cljs.core.next.call(null, coll);
      var n_12374 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_12373__$1 && (n_12374 == null || !(n_12374 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_12373__$1), writer, opts);
          var G__12375 = cljs.core.next.call(null, coll_12373__$1);
          var G__12376 = n_12374 - 1;
          coll_12373__$1 = G__12375;
          n_12374 = G__12376;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_12373__$1) && n_12374 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12372;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__12381 = cljs.core.seq.call(null, ss);
    var chunk__12382 = null;
    var count__12383 = 0;
    var i__12384 = 0;
    while (true) {
      if (i__12384 < count__12383) {
        var s = cljs.core._nth.call(null, chunk__12382, i__12384);
        cljs.core._write.call(null, writer, s);
        var G__12385 = seq__12381;
        var G__12386 = chunk__12382;
        var G__12387 = count__12383;
        var G__12388 = i__12384 + 1;
        seq__12381 = G__12385;
        chunk__12382 = G__12386;
        count__12383 = G__12387;
        i__12384 = G__12388;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__12381);
        if (temp__4126__auto__) {
          var seq__12381__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12381__$1)) {
            var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12381__$1);
            var G__12389 = cljs.core.chunk_rest.call(null, seq__12381__$1);
            var G__12390 = c__4418__auto__;
            var G__12391 = cljs.core.count.call(null, c__4418__auto__);
            var G__12392 = 0;
            seq__12381 = G__12389;
            chunk__12382 = G__12390;
            count__12383 = G__12391;
            i__12384 = G__12392;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__12381__$1);
            cljs.core._write.call(null, writer, s);
            var G__12393 = cljs.core.next.call(null, seq__12381__$1);
            var G__12394 = null;
            var G__12395 = 0;
            var G__12396 = 0;
            seq__12381 = G__12393;
            chunk__12382 = G__12394;
            count__12383 = G__12395;
            i__12384 = G__12396;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__12397) {
    var writer = cljs.core.first(arglist__12397);
    var ss = cljs.core.rest(arglist__12397);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12399 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12399;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3636__auto__)) {
          var and__3636__auto____$1 = function() {
            var G__12405 = obj;
            if (G__12405) {
              var bit__4312__auto__ = G__12405.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4312__auto__ || G__12405.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__12405.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12405);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12405);
            }
          }();
          if (and__3636__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__12406 = obj;
            if (G__12406) {
              var bit__4305__auto__ = G__12406.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4305__auto__ || G__12406.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__12408 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__12408;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__12407 = obj;
                            if (G__12407) {
                              var bit__4312__auto__ = G__12407.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4312__auto__ || G__12407.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__12407.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12407);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12407);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__12413 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__12414 = null;
  var count__12415 = 0;
  var i__12416 = 0;
  while (true) {
    if (i__12416 < count__12415) {
      var obj = cljs.core._nth.call(null, chunk__12414, i__12416);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__12417 = seq__12413;
      var G__12418 = chunk__12414;
      var G__12419 = count__12415;
      var G__12420 = i__12416 + 1;
      seq__12413 = G__12417;
      chunk__12414 = G__12418;
      count__12415 = G__12419;
      i__12416 = G__12420;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12413);
      if (temp__4126__auto__) {
        var seq__12413__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12413__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12413__$1);
          var G__12421 = cljs.core.chunk_rest.call(null, seq__12413__$1);
          var G__12422 = c__4418__auto__;
          var G__12423 = cljs.core.count.call(null, c__4418__auto__);
          var G__12424 = 0;
          seq__12413 = G__12421;
          chunk__12414 = G__12422;
          count__12415 = G__12423;
          i__12416 = G__12424;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__12413__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__12425 = cljs.core.next.call(null, seq__12413__$1);
          var G__12426 = null;
          var G__12427 = 0;
          var G__12428 = 0;
          seq__12413 = G__12425;
          chunk__12414 = G__12426;
          count__12415 = G__12427;
          i__12416 = G__12428;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__12429) {
    var objs = cljs.core.seq(arglist__12429);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__12430) {
    var objs = cljs.core.seq(arglist__12430);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__12431) {
    var objs = cljs.core.seq(arglist__12431);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__12432) {
    var objs = cljs.core.seq(arglist__12432);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__12433) {
    var objs = cljs.core.seq(arglist__12433);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__12434) {
    var objs = cljs.core.seq(arglist__12434);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__12435) {
    var objs = cljs.core.seq(arglist__12435);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__12436) {
    var objs = cljs.core.seq(arglist__12436);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__12437) {
    var iref = cljs.core.first(arglist__12437);
    arglist__12437 = cljs.core.next(arglist__12437);
    var f = cljs.core.first(arglist__12437);
    var args = cljs.core.rest(arglist__12437);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__12438_SHARP_, p2__12439_SHARP_) {
    var ret = rf.call(null, p1__12438_SHARP_, p2__12439_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__12440 = null;
      var G__12440__0 = function() {
        return rf.call(null);
      };
      var G__12440__1 = function(result) {
        return rf.call(null, result);
      };
      var G__12440__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__12440 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12440__0.call(this);
          case 1:
            return G__12440__1.call(this, result);
          case 2:
            return G__12440__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12440.cljs$core$IFn$_invoke$arity$0 = G__12440__0;
      G__12440.cljs$core$IFn$_invoke$arity$1 = G__12440__1;
      G__12440.cljs$core$IFn$_invoke$arity$2 = G__12440__2;
      return G__12440;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__12441 = null;
          var G__12441__0 = function() {
            return rf.call(null);
          };
          var G__12441__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12441__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__12441 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12441__0.call(this);
              case 1:
                return G__12441__1.call(this, result);
              case 2:
                return G__12441__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12441.cljs$core$IFn$_invoke$arity$0 = G__12441__0;
          G__12441.cljs$core$IFn$_invoke$arity$1 = G__12441__1;
          G__12441.cljs$core$IFn$_invoke$arity$2 = G__12441__2;
          return G__12441;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__12443_SHARP_, p2__12442_SHARP_) {
    return proc.call(null, p2__12442_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj12445 = {};
  return obj12445;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__12447 = k;
    if (G__12447) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return G__12447.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__12447.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12447);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12447);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__12461 = x;
      if (G__12461) {
        var bit__4312__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3648__auto__ = bit__4312__auto__;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return G__12461.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__12461.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12461);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12461);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj12463 = {};
              return obj12463;
            }();
            var seq__12464_12474 = cljs.core.seq.call(null, x);
            var chunk__12465_12475 = null;
            var count__12466_12476 = 0;
            var i__12467_12477 = 0;
            while (true) {
              if (i__12467_12477 < count__12466_12476) {
                var vec__12468_12478 = cljs.core._nth.call(null, chunk__12465_12475, i__12467_12477);
                var k_12479 = cljs.core.nth.call(null, vec__12468_12478, 0, null);
                var v_12480 = cljs.core.nth.call(null, vec__12468_12478, 1, null);
                m[cljs.core.key__GT_js.call(null, k_12479)] = clj__GT_js.call(null, v_12480);
                var G__12481 = seq__12464_12474;
                var G__12482 = chunk__12465_12475;
                var G__12483 = count__12466_12476;
                var G__12484 = i__12467_12477 + 1;
                seq__12464_12474 = G__12481;
                chunk__12465_12475 = G__12482;
                count__12466_12476 = G__12483;
                i__12467_12477 = G__12484;
                continue;
              } else {
                var temp__4126__auto___12485 = cljs.core.seq.call(null, seq__12464_12474);
                if (temp__4126__auto___12485) {
                  var seq__12464_12486__$1 = temp__4126__auto___12485;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__12464_12486__$1)) {
                    var c__4418__auto___12487 = cljs.core.chunk_first.call(null, seq__12464_12486__$1);
                    var G__12488 = cljs.core.chunk_rest.call(null, seq__12464_12486__$1);
                    var G__12489 = c__4418__auto___12487;
                    var G__12490 = cljs.core.count.call(null, c__4418__auto___12487);
                    var G__12491 = 0;
                    seq__12464_12474 = G__12488;
                    chunk__12465_12475 = G__12489;
                    count__12466_12476 = G__12490;
                    i__12467_12477 = G__12491;
                    continue;
                  } else {
                    var vec__12469_12492 = cljs.core.first.call(null, seq__12464_12486__$1);
                    var k_12493 = cljs.core.nth.call(null, vec__12469_12492, 0, null);
                    var v_12494 = cljs.core.nth.call(null, vec__12469_12492, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_12493)] = clj__GT_js.call(null, v_12494);
                    var G__12495 = cljs.core.next.call(null, seq__12464_12486__$1);
                    var G__12496 = null;
                    var G__12497 = 0;
                    var G__12498 = 0;
                    seq__12464_12474 = G__12495;
                    chunk__12465_12475 = G__12496;
                    count__12466_12476 = G__12497;
                    i__12467_12477 = G__12498;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__12470_12499 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__12471_12500 = null;
              var count__12472_12501 = 0;
              var i__12473_12502 = 0;
              while (true) {
                if (i__12473_12502 < count__12472_12501) {
                  var x_12503__$1 = cljs.core._nth.call(null, chunk__12471_12500, i__12473_12502);
                  arr.push(x_12503__$1);
                  var G__12504 = seq__12470_12499;
                  var G__12505 = chunk__12471_12500;
                  var G__12506 = count__12472_12501;
                  var G__12507 = i__12473_12502 + 1;
                  seq__12470_12499 = G__12504;
                  chunk__12471_12500 = G__12505;
                  count__12472_12501 = G__12506;
                  i__12473_12502 = G__12507;
                  continue;
                } else {
                  var temp__4126__auto___12508 = cljs.core.seq.call(null, seq__12470_12499);
                  if (temp__4126__auto___12508) {
                    var seq__12470_12509__$1 = temp__4126__auto___12508;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__12470_12509__$1)) {
                      var c__4418__auto___12510 = cljs.core.chunk_first.call(null, seq__12470_12509__$1);
                      var G__12511 = cljs.core.chunk_rest.call(null, seq__12470_12509__$1);
                      var G__12512 = c__4418__auto___12510;
                      var G__12513 = cljs.core.count.call(null, c__4418__auto___12510);
                      var G__12514 = 0;
                      seq__12470_12499 = G__12511;
                      chunk__12471_12500 = G__12512;
                      count__12472_12501 = G__12513;
                      i__12473_12502 = G__12514;
                      continue;
                    } else {
                      var x_12515__$1 = cljs.core.first.call(null, seq__12470_12509__$1);
                      arr.push(x_12515__$1);
                      var G__12516 = cljs.core.next.call(null, seq__12470_12509__$1);
                      var G__12517 = null;
                      var G__12518 = 0;
                      var G__12519 = 0;
                      seq__12470_12499 = G__12516;
                      chunk__12471_12500 = G__12517;
                      count__12472_12501 = G__12518;
                      i__12473_12502 = G__12519;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj12521 = {};
  return obj12521;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__12542__delegate = function(x, opts) {
      if (function() {
        var G__12532 = x;
        if (G__12532) {
          var bit__4312__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3648__auto__ = bit__4312__auto__;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return G__12532.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__12532.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12532);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12532);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__12533 = opts;
          var map__12533__$1 = cljs.core.seq_QMARK_.call(null, map__12533) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12533) : map__12533;
          var keywordize_keys = cljs.core.get.call(null, map__12533__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__12533, map__12533__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4387__auto__ = function(map__12533, map__12533__$1, keywordize_keys, keyfn) {
                          return function iter__12538(s__12539) {
                            return new cljs.core.LazySeq(null, function(map__12533, map__12533__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__12539__$1 = s__12539;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__12539__$1);
                                  if (temp__4126__auto__) {
                                    var s__12539__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__12539__$2)) {
                                      var c__4385__auto__ = cljs.core.chunk_first.call(null, s__12539__$2);
                                      var size__4386__auto__ = cljs.core.count.call(null, c__4385__auto__);
                                      var b__12541 = cljs.core.chunk_buffer.call(null, size__4386__auto__);
                                      if (function() {
                                        var i__12540 = 0;
                                        while (true) {
                                          if (i__12540 < size__4386__auto__) {
                                            var k = cljs.core._nth.call(null, c__4385__auto__, i__12540);
                                            cljs.core.chunk_append.call(null, b__12541, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__12543 = i__12540 + 1;
                                            i__12540 = G__12543;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12541), iter__12538.call(null, cljs.core.chunk_rest.call(null, s__12539__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12541), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__12539__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__12538.call(null, cljs.core.rest.call(null, s__12539__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__12533, map__12533__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__12533, map__12533__$1, keywordize_keys, keyfn);
                        return iter__4387__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__12533, map__12533__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__12542 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12542__delegate.call(this, x, opts);
    };
    G__12542.cljs$lang$maxFixedArity = 1;
    G__12542.cljs$lang$applyTo = function(arglist__12544) {
      var x = cljs.core.first(arglist__12544);
      var opts = cljs.core.rest(arglist__12544);
      return G__12542__delegate(x, opts);
    };
    G__12542.cljs$core$IFn$_invoke$arity$variadic = G__12542__delegate;
    return G__12542;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__12545__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__12545 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12545__delegate.call(this, args);
      };
      G__12545.cljs$lang$maxFixedArity = 0;
      G__12545.cljs$lang$applyTo = function(arglist__12546) {
        var args = cljs.core.seq(arglist__12546);
        return G__12545__delegate(args);
      };
      G__12545.cljs$core$IFn$_invoke$arity$variadic = G__12545__delegate;
      return G__12545;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__12547 = ret;
        f = G__12547;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__12548__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__12548 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12548__delegate.call(this, f, args);
    };
    G__12548.cljs$lang$maxFixedArity = 1;
    G__12548.cljs$lang$applyTo = function(arglist__12549) {
      var f = cljs.core.first(arglist__12549);
      var args = cljs.core.rest(arglist__12549);
      return G__12548__delegate(f, args);
    };
    G__12548.cljs$core$IFn$_invoke$arity$variadic = G__12548__delegate;
    return G__12548;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__12550) {
    var f = cljs.core.first(arglist__12550);
    var args = cljs.core.rest(arglist__12550);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3648__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var or__3648__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3648__auto____$1) {
        return or__3648__auto____$1;
      } else {
        var and__3636__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3636__auto__) {
          var and__3636__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3636__auto____$1) {
            var and__3636__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3636__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__12551 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__12552 = i + 1;
                  ret = G__12551;
                  i = G__12552;
                  continue;
                }
                break;
              }
            } else {
              return and__3636__auto____$2;
            }
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3648__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__12553_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__12553_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__12553_SHARP_), cljs.core.second.call(null, p1__12553_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__12554_SHARP_, p2__12555_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__12554_SHARP_, p2__12555_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = xprefs;
    if (cljs.core.truth_(and__3636__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3636__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var or__3648__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__12556 = cljs.core.rest.call(null, ps);
          ps = G__12556;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3648__auto____$1)) {
      return or__3648__auto____$1;
    } else {
      var or__3648__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__12557 = cljs.core.rest.call(null, ps);
            ps = G__12557;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3648__auto____$2)) {
        return or__3648__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3648__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__12560) {
    var vec__12561 = p__12560;
    var k = cljs.core.nth.call(null, vec__12561, 0, null);
    var _ = cljs.core.nth.call(null, vec__12561, 1, null);
    var e = vec__12561;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3648__auto__ = be == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj12563 = {};
  return obj12563;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._reset[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._add_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._remove_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefer_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._get_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._get_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._methods[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._methods["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefers[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefers["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12565 = null;
  var G__12565__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__12565__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__12565__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__12565__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__12565__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__12565__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__12565__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__12565__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__12565__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12565__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12565__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12565__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12565__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12565__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12565__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12565__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12565__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12565__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12565__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12565__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12565__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__12565 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__12565__2.call(this, self__, a);
      case 3:
        return G__12565__3.call(this, self__, a, b);
      case 4:
        return G__12565__4.call(this, self__, a, b, c);
      case 5:
        return G__12565__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12565__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12565__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12565__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12565__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12565__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12565__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12565__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12565__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12565__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12565__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12565__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12565__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12565__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12565__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12565__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12565__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12565__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12565.cljs$core$IFn$_invoke$arity$2 = G__12565__2;
  G__12565.cljs$core$IFn$_invoke$arity$3 = G__12565__3;
  G__12565.cljs$core$IFn$_invoke$arity$4 = G__12565__4;
  G__12565.cljs$core$IFn$_invoke$arity$5 = G__12565__5;
  G__12565.cljs$core$IFn$_invoke$arity$6 = G__12565__6;
  G__12565.cljs$core$IFn$_invoke$arity$7 = G__12565__7;
  G__12565.cljs$core$IFn$_invoke$arity$8 = G__12565__8;
  G__12565.cljs$core$IFn$_invoke$arity$9 = G__12565__9;
  G__12565.cljs$core$IFn$_invoke$arity$10 = G__12565__10;
  G__12565.cljs$core$IFn$_invoke$arity$11 = G__12565__11;
  G__12565.cljs$core$IFn$_invoke$arity$12 = G__12565__12;
  G__12565.cljs$core$IFn$_invoke$arity$13 = G__12565__13;
  G__12565.cljs$core$IFn$_invoke$arity$14 = G__12565__14;
  G__12565.cljs$core$IFn$_invoke$arity$15 = G__12565__15;
  G__12565.cljs$core$IFn$_invoke$arity$16 = G__12565__16;
  G__12565.cljs$core$IFn$_invoke$arity$17 = G__12565__17;
  G__12565.cljs$core$IFn$_invoke$arity$18 = G__12565__18;
  G__12565.cljs$core$IFn$_invoke$arity$19 = G__12565__19;
  G__12565.cljs$core$IFn$_invoke$arity$20 = G__12565__20;
  G__12565.cljs$core$IFn$_invoke$arity$21 = G__12565__21;
  G__12565.cljs$core$IFn$_invoke$arity$22 = G__12565__22;
  return G__12565;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args12564) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12564)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__15235 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__15235;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__15239 = cljs.core._EQ_;
    var expr__15240 = limit;
    if (cljs.core.truth_(pred__15239.call(null, 1, expr__15240))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__15239.call(null, 2, expr__15240))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__15242 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__15243 = limit__$1 - 1;
            var G__15244 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__15242;
            limit__$1 = G__15243;
            parts = G__15244;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__15245 = index - 1;
        index = G__15245;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___15246 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___15246)) {
        var replacement_15247 = temp__4124__auto___15246;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_15247));
      } else {
        buffer.append(ch);
      }
      var G__15248 = index + 1;
      index = G__15248;
      continue;
    }
    break;
  }
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__15081 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__15081, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1050769601), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__15081;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4244__auto__, k__4245__auto__) {
  var self__ = this;
  var this__4244__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4244__auto____$1, k__4245__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4246__auto__, k15083, else__4247__auto__) {
  var self__ = this;
  var this__4246__auto____$1 = this;
  var G__15085 = k15083 instanceof cljs.core.Keyword ? k15083.fqn : null;
  switch(G__15085) {
    case "test-name":
      return self__.test_name;
      break;
    case "test-env":
      return self__.test_env;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15083, else__4247__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4258__auto__, writer__4259__auto__, opts__4260__auto__) {
  var self__ = this;
  var this__4258__auto____$1 = this;
  var pr_pair__4261__auto__ = function(this__4258__auto____$1) {
    return function(keyval__4262__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, cljs.core.pr_writer, "", " ", "", opts__4260__auto__, keyval__4262__auto__);
    };
  }(this__4258__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, pr_pair__4261__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__4260__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4242__auto__) {
  var self__ = this;
  var this__4242__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4238__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4239__auto__) {
  var self__ = this;
  var this__4239__auto____$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_imap.call(null, this__4239__auto____$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4240__auto__, other__4241__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = other__4241__auto__;
    if (cljs.core.truth_(and__3636__auto__)) {
      return this__4240__auto____$1.constructor === other__4241__auto__.constructor && cljs.core.equiv_map.call(null, this__4240__auto____$1, other__4241__auto__);
    } else {
      return and__3636__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4253__auto__, k__4254__auto__) {
  var self__ = this;
  var this__4253__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), null], null), null), k__4254__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4253__auto____$1), self__.__meta), k__4254__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4254__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4251__auto__, k__4252__auto__, G__15082) {
  var self__ = this;
  var this__4251__auto____$1 = this;
  var pred__15086 = cljs.core.keyword_identical_QMARK_;
  var expr__15087 = k__4252__auto__;
  if (cljs.core.truth_(pred__15086.call(null, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), expr__15087))) {
    return new cemerick.cljs.test.TestContext(G__15082, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15086.call(null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), expr__15087))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__15082, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4252__auto__, G__15082), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4256__auto__) {
  var self__ = this;
  var this__4256__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4243__auto__, G__15082) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__15082, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4249__auto__, entry__4250__auto__) {
  var self__ = this;
  var this__4249__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4250__auto__)) {
    return cljs.core._assoc.call(null, this__4249__auto____$1, cljs.core._nth.call(null, entry__4250__auto__, 0), cljs.core._nth.call(null, entry__4250__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4249__auto____$1, entry__4250__auto__);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__4278__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__4278__auto__, writer__4279__auto__) {
  return cljs.core._write.call(null, writer__4279__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__15084) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(G__15084), (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(G__15084), null, cljs.core.dissoc.call(null, G__15084, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), new cljs.core.Keyword(null, "test-name", "test-name", -675595913)));
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__15091 = x;
    if (G__15091) {
      var bit__4312__auto__ = G__15091.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4312__auto__ || G__15091.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__15091.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__15091);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__15091);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__15093 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__15093__$1 = cljs.core.seq_QMARK_.call(null, map__15093) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15093) : map__15093;
  var remaining = cljs.core.get.call(null, map__15093__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312));
  var running = cljs.core.get.call(null, map__15093__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558));
  var async = cljs.core.get.call(null, map__15093__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var and__3636__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__3636__auto__) {
    var and__3636__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__3636__auto____$1) {
      var or__3648__auto__ = async == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__15096 = cljs.core.map.call(null, function(p1__15094_SHARP_) {
        return cljs.core.select_keys.call(null, p1__15094_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 577538877), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "error", "error", -978969032)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__15096, 0, null);
      var newv = cljs.core.nth.call(null, vec__15096, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__15097) {
  var map__15099 = p__15097;
  var map__15099__$1 = cljs.core.seq_QMARK_.call(null, map__15099) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15099) : map__15099;
  var m = map__15099__$1;
  var test_name = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
  var test_env = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var line = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, function() {
    var or__3648__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())) + " (" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(file) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(line) + ")";
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__4528__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4529__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4530__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4531__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4532__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("report", new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4532__auto__, method_table__4528__auto__, prefer_table__4529__auto__, method_cache__4530__auto__, cached_hierarchy__4531__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), error.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__15104 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
      switch(G__15104) {
        case "error":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)), m);
          break;
        case "fail":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
          break;
        default:
          return m;
      }
    }());
  };
  var do_report__2 = function(p__15100, m) {
    var map__15103 = p__15100;
    var map__15103__$1 = cljs.core.seq_QMARK_.call(null, map__15103) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15103) : map__15103;
    var test_ctx = map__15103__$1;
    var test_name = cljs.core.get.call(null, map__15103__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__15103__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__15100, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__15100);
      case 2:
        return do_report__2.call(this, p__15100, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__15106) {
  var map__15107 = p__15106;
  var map__15107__$1 = cljs.core.seq_QMARK_.call(null, map__15107) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15107) : map__15107;
  var m = map__15107__$1;
  var test_env = cljs.core.get.call(null, map__15107__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15108 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15108;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__15109) {
  var map__15110 = p__15109;
  var map__15110__$1 = cljs.core.seq_QMARK_.call(null, map__15110) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15110) : map__15110;
  var m = map__15110__$1;
  var test_env = cljs.core.get.call(null, map__15110__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15111 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15111;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1706214930), function(p__15112) {
  var map__15113 = p__15112;
  var map__15113__$1 = cljs.core.seq_QMARK_.call(null, map__15113) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15113) : map__15113;
  var m = map__15113__$1;
  var test_env = cljs.core.get.call(null, map__15113__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15114 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___15115 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___15115)) {
      var message_15116 = temp__4126__auto___15115;
      cljs.core.println.call(null, message_15116);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15114;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", -978969032), function(p__15117) {
  var map__15118 = p__15117;
  var map__15118__$1 = cljs.core.seq_QMARK_.call(null, map__15118) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15118) : map__15118;
  var m = map__15118__$1;
  var test_env = cljs.core.get.call(null, map__15118__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15119 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", -978969032));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___15120 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___15120)) {
      var message_15121 = temp__4126__auto___15120;
      cljs.core.println.call(null, message_15121);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15119;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), function(p__15122) {
  var map__15123 = p__15122;
  var map__15123__$1 = cljs.core.seq_QMARK_.call(null, map__15123) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15123) : map__15123;
  var m = map__15123__$1;
  var test_env = cljs.core.get.call(null, map__15123__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15124 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var message = temp__4126__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15124;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 380847952), function(p__15125) {
  var map__15126 = p__15125;
  var map__15126__$1 = cljs.core.seq_QMARK_.call(null, map__15126) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15126) : map__15126;
  var test_env = map__15126__$1;
  var async = cljs.core.get.call(null, map__15126__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__15126__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__15126__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var pass = cljs.core.get.call(null, map__15126__$1, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  var test__$1 = cljs.core.get.call(null, map__15126__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var _STAR_print_fn_STAR_15127 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    var pending_count = function() {
      var and__3636__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__3636__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).call(null, cljs.core.deref.call(null, async))));
      } else {
        return and__3636__auto__;
      }
    }();
    cljs.core.println.call(null, "\nRan", test__$1, cljs.core.truth_(pending_count) ? "synchronous" : "", "tests containing", pass + fail + error, "assertions.");
    cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    if (cljs.core.truth_(pending_count)) {
      return cljs.core.println.call(null, "Waiting on", pending_count, "asynchronous test" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pending_count > 1 ? "s" : null) + " to complete.");
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15127;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), function(p__15128) {
  var map__15129 = p__15128;
  var map__15129__$1 = cljs.core.seq_QMARK_.call(null, map__15129) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15129) : map__15129;
  var m = map__15129__$1;
  var async = cljs.core.get.call(null, map__15129__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var test_env = cljs.core.get.call(null, map__15129__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var ns = cljs.core.get.call(null, map__15129__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var _STAR_print_fn_STAR_15130 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15130;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), function(p__15131) {
  var map__15132 = p__15131;
  var map__15132__$1 = cljs.core.seq_QMARK_.call(null, map__15132) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15132) : map__15132;
  var m = map__15132__$1;
  var test_env = cljs.core.get.call(null, map__15132__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), function(p__15133) {
  var map__15134 = p__15133;
  var map__15134__$1 = cljs.core.seq_QMARK_.call(null, map__15134) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15134) : map__15134;
  var m = map__15134__$1;
  var test_env = cljs.core.get.call(null, map__15134__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), function(p__15135) {
  var map__15136 = p__15135;
  var map__15136__$1 = cljs.core.seq_QMARK_.call(null, map__15136) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15136) : map__15136;
  var m = map__15136__$1;
  var test_env = cljs.core.get.call(null, map__15136__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__15137) {
    var ns_sym = cljs.core.first(arglist__15137);
    arglist__15137 = cljs.core.next(arglist__15137);
    var fixture_type = cljs.core.first(arglist__15137);
    var fixture_fns = cljs.core.rest(arglist__15137);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(next_test) {
    return function(env) {
      var temp__4124__auto__ = function() {
        var and__3636__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(env));
        if (and__3636__auto__) {
          return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(env));
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__15139 = temp__4124__auto__;
        var name = cljs.core.nth.call(null, vec__15139, 0, null);
        var testfn = cljs.core.nth.call(null, vec__15139, 1, null);
        cljs.core.reset_BANG_.call(null, next_test, testfn);
        var ns_15140 = cljs.core.namespace.call(null, name);
        if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_15140)) {
        } else {
          cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_15140, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "async", "async", 1050769601), true], null));
          cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_15140);
        }
        return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.assoc, 
        name, new Date);
      } else {
        return env;
      }
    };
  }(next_test));
  setTimeout(function(next_test) {
    return function() {
      return cljs.core.deref.call(null, next_test).call(null);
    };
  }(next_test), 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__15145 = test_env;
  cljs.core.swap_BANG_.call(null, G__15145, function(G__15145) {
    return function(p1__15141_SHARP_) {
      return cljs.core.reduce.call(null, function(G__15145) {
        return function(env, p__15146) {
          var vec__15147 = p__15146;
          var k = cljs.core.nth.call(null, vec__15147, 0, null);
          var v = cljs.core.nth.call(null, vec__15147, 1, null);
          if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", -1669146357)))) {
            return env;
          } else {
            return cljs.core.assoc.call(null, env, k, v);
          }
        };
      }(G__15145), cljs.core.PersistentArrayMap.EMPTY, p1__15141_SHARP_);
    };
  }(G__15145));
  return G__15145;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1050769601));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__15149) {
    var map__15153 = p__15149;
    var map__15153__$1 = cljs.core.seq_QMARK_.call(null, map__15153) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15153) : map__15153;
    var test_ctx = map__15153__$1;
    var test_name = cljs.core.get.call(null, map__15153__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var async_test_env = cljs.core.get.call(null, map__15153__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(first_call_QMARK_, map__15153, map__15153__$1, test_ctx, test_name, async_test_env) {
      return function(env) {
        cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).cljs$core$IFn$_invoke$arity$1(env), test_name));
        return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.dissoc, test_name);
      };
    }(first_call_QMARK_, map__15153, map__15153__$1, test_ctx, test_name, async_test_env));
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), new cljs.core.Keyword(null, "message", "message", -406056002), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__15148, error) {
    var map__15152 = p__15148;
    var map__15152__$1 = cljs.core.seq_QMARK_.call(null, map__15152) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15152) : map__15152;
    var test_ctx = map__15152__$1;
    var test_name = cljs.core.get.call(null, map__15152__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__15152__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__15148, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__15148);
      case 2:
        return done_STAR___2.call(this, p__15148, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", -2140911342), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___11188__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15157 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error("Assert failed: test-var must be passed the function to be tested (not a symbol naming it)\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))));
      }
      var map__15158_15160 = cljs.core.meta.call(null, v);
      var map__15158_15161__$1 = cljs.core.seq_QMARK_.call(null, map__15158_15160) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15158_15160) : map__15158_15160;
      var t_15162 = cljs.core.get.call(null, map__15158_15161__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
      var test_name_15163 = cljs.core.get.call(null, map__15158_15161__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var async_QMARK__15164 = cljs.core.get.call(null, map__15158_15161__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
      if (cljs.core.truth_(t_15162)) {
        if (cljs.core.truth_(async_QMARK__15164)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_15163, t_15162);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.conj, function() {
              var or__3648__auto__ = test_name_15163;
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15163], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
            try {
              t_15162.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_15163));
            } catch (e15159) {
              if (e15159 instanceof Error) {
                var e_15165 = e15159;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15163, new cljs.core.Keyword(null, 
                "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e_15165], null));
              } else {
                throw e15159;
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15163], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11188__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15157;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11188__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15174 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var tests_15179 = cljs.core.filter.call(null, function(_STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__) {
        return function(p1__15166_SHARP_) {
          return(new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__15166_SHARP_));
        };
      }(_STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__), cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_15180 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_15181 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 940016129)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_15180.call(null, function(once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__) {
        return function() {
          var seq__15175 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_15179));
          var chunk__15176 = null;
          var count__15177 = 0;
          var i__15178 = 0;
          while (true) {
            if (i__15178 < count__15177) {
              var v = cljs.core._nth.call(null, chunk__15176, i__15178);
              each_fixture_fn_15181.call(null, function(seq__15175, chunk__15176, count__15177, i__15178, v, once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__) {
                return function() {
                  return cemerick.cljs.test.test_function.call(null, test_env, v);
                };
              }(seq__15175, chunk__15176, count__15177, i__15178, v, once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__));
              var G__15182 = seq__15175;
              var G__15183 = chunk__15176;
              var G__15184 = count__15177;
              var G__15185 = i__15178 + 1;
              seq__15175 = G__15182;
              chunk__15176 = G__15183;
              count__15177 = G__15184;
              i__15178 = G__15185;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__15175);
              if (temp__4126__auto__) {
                var seq__15175__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__15175__$1)) {
                  var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__15175__$1);
                  var G__15186 = cljs.core.chunk_rest.call(null, seq__15175__$1);
                  var G__15187 = c__4418__auto__;
                  var G__15188 = cljs.core.count.call(null, c__4418__auto__);
                  var G__15189 = 0;
                  seq__15175 = G__15186;
                  chunk__15176 = G__15187;
                  count__15177 = G__15188;
                  i__15178 = G__15189;
                  continue;
                } else {
                  var v = cljs.core.first.call(null, seq__15175__$1);
                  each_fixture_fn_15181.call(null, function(seq__15175, chunk__15176, count__15177, i__15178, v, seq__15175__$1, temp__4126__auto__, once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__) {
                    return function() {
                      return cemerick.cljs.test.test_function.call(null, test_env, v);
                    };
                  }(seq__15175, chunk__15176, count__15177, i__15178, v, seq__15175__$1, temp__4126__auto__, once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__));
                  var G__15190 = cljs.core.next.call(null, seq__15175__$1);
                  var G__15191 = null;
                  var G__15192 = 0;
                  var G__15193 = 0;
                  seq__15175 = G__15190;
                  chunk__15176 = G__15191;
                  count__15177 = G__15192;
                  i__15178 = G__15193;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(once_fixture_fn_15180, each_fixture_fn_15181, tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__));
      cljs.core.reduce.call(null, function(tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__) {
        return function(p1__15167_SHARP_, p2__15168_SHARP_) {
          return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__15167_SHARP_, p2__15168_SHARP_);
        };
      }(tests_15179, _STAR_entry_point_STAR_15174, entry_point_QMARK___11188__auto__), (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "test", "test", 577538877)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_15179)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11188__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15174;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11188__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15195 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      var temp__4124__auto___15196 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4124__auto___15196)) {
        var test_hook_15197 = temp__4124__auto___15196;
        test_hook_15197.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11188__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15195;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.print_summary = function print_summary(env) {
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952)));
};
cemerick.cljs.test.async_test_summary = function async_test_summary(test_env) {
  var async_test_env = cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env));
  var tests = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(async_test_env);
  if (tests > 0) {
    return cemerick.cljs.test.print_summary.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env, async_test_env));
  } else {
    return null;
  }
};
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  cemerick.cljs.test.print_summary.call(null, test_env__$1);
  return cemerick.cljs.test.on_testing_complete.call(null, test_env__$1, cemerick.cljs.test.async_test_summary);
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__15204 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__15204, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__15204, 1);
    var entry_point_QMARK___11188__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15205 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var seq__15206_15210 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__15207_15211 = null;
      var count__15208_15212 = 0;
      var i__15209_15213 = 0;
      while (true) {
        if (i__15209_15213 < count__15208_15212) {
          var ns_15214 = cljs.core._nth.call(null, chunk__15207_15211, i__15209_15213);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_15214);
          var G__15215 = seq__15206_15210;
          var G__15216 = chunk__15207_15211;
          var G__15217 = count__15208_15212;
          var G__15218 = i__15209_15213 + 1;
          seq__15206_15210 = G__15215;
          chunk__15207_15211 = G__15216;
          count__15208_15212 = G__15217;
          i__15209_15213 = G__15218;
          continue;
        } else {
          var temp__4126__auto___15219 = cljs.core.seq.call(null, seq__15206_15210);
          if (temp__4126__auto___15219) {
            var seq__15206_15220__$1 = temp__4126__auto___15219;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15206_15220__$1)) {
              var c__4418__auto___15221 = cljs.core.chunk_first.call(null, seq__15206_15220__$1);
              var G__15222 = cljs.core.chunk_rest.call(null, seq__15206_15220__$1);
              var G__15223 = c__4418__auto___15221;
              var G__15224 = cljs.core.count.call(null, c__4418__auto___15221);
              var G__15225 = 0;
              seq__15206_15210 = G__15222;
              chunk__15207_15211 = G__15223;
              count__15208_15212 = G__15224;
              i__15209_15213 = G__15225;
              continue;
            } else {
              var ns_15226 = cljs.core.first.call(null, seq__15206_15220__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_15226);
              var G__15227 = cljs.core.next.call(null, seq__15206_15220__$1);
              var G__15228 = null;
              var G__15229 = 0;
              var G__15230 = 0;
              seq__15206_15210 = G__15227;
              chunk__15207_15211 = G__15228;
              count__15208_15212 = G__15229;
              i__15209_15213 = G__15230;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11188__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15205;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__15231) {
    var namespaces = cljs.core.seq(arglist__15231);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__15232_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__15232_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__15234 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__15234__$1 = cljs.core.seq_QMARK_.call(null, map__15234) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15234) : map__15234;
  var async = cljs.core.get.call(null, map__15234__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__15234__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__15234__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var and__3636__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__3636__auto__)) {
    var and__3636__auto____$1 = function() {
      var or__3648__auto__ = fail;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = function() {
        var or__3648__auto__ = error;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__3636__auto____$2) {
        var or__3648__auto__ = async == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("testt");
goog.require("cljs.core");
goog.require("cemerick.cljs.test");
testt.somewhat_less_wat = function somewhat_less_wat() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.somewhat_less_wat);
};
testt.somewhat_less_wat = cljs.core.with_meta.call(null, testt.somewhat_less_wat, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 9, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 9, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 9, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 9, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function somewhat_less_wat_test(test_ctx__11151__auto__) {
  var _test_ctx = test_ctx__11151__auto__;
  var async_QMARK___11066__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11323 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___11066__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_11325 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__11086__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.PersistentArrayMap.EMPTY + cljs.core.PersistentVector.EMPTY), "{}[]");
            var result__11087__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11086__auto__);
            if (result__11087__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__11087__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11086__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11086__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__11087__auto__;
          } catch (e11327) {
            if (e11327 instanceof Error) {
              var t__11123__auto__ = e11327;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11123__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e11327;
            }
          }
        } catch (e11326) {
          if (e11326 instanceof Error) {
            var e__11067__auto__ = e11326;
            if (cljs.core.truth_(async_QMARK___11066__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11067__auto__);
            } else {
              throw e__11067__auto__;
            }
          } else {
            throw e11326;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11325;
      }
    } catch (e11324) {
      if (e11324 instanceof Error) {
        var e__11067__auto__ = e11324;
        if (cljs.core.truth_(async_QMARK___11066__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11067__auto__);
        } else {
          throw e__11067__auto__;
        }
      } else {
        throw e11324;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11323;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), testt.somewhat_less_wat);
testt.javascript_allows_div0 = function javascript_allows_div0() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.javascript_allows_div0);
};
testt.javascript_allows_div0 = cljs.core.with_meta.call(null, testt.javascript_allows_div0, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 12, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 12, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 12, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 12, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function javascript_allows_div0_test(test_ctx__11151__auto__) {
  var _test_ctx = test_ctx__11151__auto__;
  var async_QMARK___11066__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11333 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___11066__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_11335 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__11086__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (1 | 0) / (0 | 0)), 1 / 0), Infinity);
            var result__11087__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11086__auto__);
            if (result__11087__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__11087__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11086__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11086__auto__)), 
              new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__11087__auto__;
          } catch (e11337) {
            if (e11337 instanceof Error) {
              var t__11123__auto__ = e11337;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", 
              -1371932971, null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11123__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e11337;
            }
          }
        } catch (e11336) {
          if (e11336 instanceof Error) {
            var e__11067__auto__ = e11336;
            if (cljs.core.truth_(async_QMARK___11066__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11067__auto__);
            } else {
              throw e__11067__auto__;
            }
          } else {
            throw e11336;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11335;
      }
    } catch (e11334) {
      if (e11334 instanceof Error) {
        var e__11067__auto__ = e11334;
        if (cljs.core.truth_(async_QMARK___11066__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11067__auto__);
        } else {
          throw e__11067__auto__;
        }
      } else {
        throw e11334;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11333;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), testt.javascript_allows_div0);
testt.pennies__GT_dollar_string = function pennies__GT_dollar_string(pennies) {
  if (cljs.core.integer_QMARK_.call(null, pennies)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "integer?", "integer?", 1303791671, null), new cljs.core.Symbol(null, "pennies", "pennies", -807392060, null)))));
  }
  return "$" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pennies / 100 | 0) + "." + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.mod.call(null, pennies, 100));
};
testt.pennies__GT_dollar_string = cljs.core.with_meta.call(null, testt.pennies__GT_dollar_string, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 16, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 16, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 16, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, 
new cljs.core.Keyword(null, "line", "line", 212345235), 16, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function pennies__GT_dollar_string_test(test_ctx__11151__auto__) {
  var _test_ctx = test_ctx__11151__auto__;
  var async_QMARK___11066__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11344 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto__) ? null : _test_ctx;
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "assertions are nice");
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___11066__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_11346 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        try {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11066__auto____$1) ? null : _test_ctx__$1;
          try {
            try {
              try {
                testt.pennies__GT_dollar_string.call(null, 564.2);
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), null, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } catch (e11349) {
                if (e11349 instanceof Error) {
                  var e__11117__auto__ = e11349;
                  var m__11118__auto___11350 = e__11117__auto__.message;
                  if (cljs.core.truth_(cljs.core.re_find.call(null, /integer?/, m__11118__auto___11350))) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__11117__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__11117__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                  return e__11117__auto__;
                } else {
                  throw e11349;
                }
              }
            } catch (e11348) {
              if (e11348 instanceof Error) {
                var t__11123__auto__ = e11348;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11123__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e11348;
              }
            }
          } catch (e11347) {
            if (e11347 instanceof Error) {
              var e__11067__auto__ = e11347;
              if (cljs.core.truth_(async_QMARK___11066__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11067__auto__);
              } else {
                throw e__11067__auto__;
              }
            } else {
              throw e11347;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11346;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e11345) {
      if (e11345 instanceof Error) {
        var e__11067__auto__ = e11345;
        if (cljs.core.truth_(async_QMARK___11066__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11067__auto__);
        } else {
          throw e__11067__auto__;
        }
      } else {
        throw e11345;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11344;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), testt.pennies__GT_dollar_string);
goog.provide("renderStrategy");
goog.require("cljs.core");
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj14537 = {};
  return obj14537;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj14539 = {};
  return obj14539;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj14541 = {};
  return obj14541;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3636__auto__ = chan;
    if (and__3636__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4285__auto__ = chan == null ? null : chan;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj14543 = {};
  return obj14543;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj14545 = {};
  return obj14545;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t14506 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t14506 = function(f, fn_handler, meta14507) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta14507 = meta14507;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t14506.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t14506.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t14506";
    cljs.core.async.impl.ioc_helpers.t14506.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.ioc-helpers/t14506");
    };
    cljs.core.async.impl.ioc_helpers.t14506.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t14506.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t14506.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t14506.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14508) {
      var self__ = this;
      var _14508__$1 = this;
      return self__.meta14507;
    };
    cljs.core.async.impl.ioc_helpers.t14506.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14508, meta14507__$1) {
      var self__ = this;
      var _14508__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t14506(self__.f, self__.fn_handler, meta14507__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t14506 = function __GT_t14506(f__$1, fn_handler__$1, meta14507) {
      return new cljs.core.async.impl.ioc_helpers.t14506(f__$1, fn_handler__$1, meta14507);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t14506(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e14510) {
    if (e14510 instanceof Object) {
      var ex = e14510;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e14510;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_14513_14515 = state;
    statearr_14513_14515[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_14513_14515[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14514_14516 = state;
    statearr_14514_14516[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14514_14516[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_14519_14521 = state;
    statearr_14519_14521[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_14519_14521[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14520_14522 = state;
    statearr_14520_14522[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14520_14522[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__14523) {
    var map__14528 = p__14523;
    var map__14528__$1 = cljs.core.seq_QMARK_.call(null, map__14528) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14528) : map__14528;
    var opts = map__14528__$1;
    var statearr_14529_14532 = state;
    statearr_14529_14532[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__14528, map__14528__$1, opts) {
      return function(val) {
        var statearr_14530_14533 = state;
        statearr_14530_14533[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__14528, map__14528__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_14531_14534 = state;
      statearr_14531_14534[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__14523 = null;
    if (arguments.length > 3) {
      p__14523 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__14523);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__14535) {
    var state = cljs.core.first(arglist__14535);
    arglist__14535 = cljs.core.next(arglist__14535);
    var cont_block = cljs.core.first(arglist__14535);
    arglist__14535 = cljs.core.next(arglist__14535);
    var ports = cljs.core.first(arglist__14535);
    var p__14523 = cljs.core.rest(arglist__14535);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__14523);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__14546 = cnt + 1;
      cnt = G__14546;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4518__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4518__auto__) {
      var v_14547 = this$.pop();
      if (keep_QMARK_.call(null, v_14547)) {
        this$.unshift(v_14547);
      } else {
      }
      var G__14548 = x + 1;
      x = G__14548;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_14549 = 0;
  while (true) {
    var m_14550 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_14550 == null) {
    } else {
      m_14550.call(null);
      if (count_14549 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__14551 = count_14549 + 1;
        count_14549 = G__14551;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3636__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3636__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t14555 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t14555 = function(val, box, meta14556) {
      this.val = val;
      this.box = box;
      this.meta14556 = meta14556;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t14555.cljs$lang$type = true;
    cljs.core.async.impl.channels.t14555.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t14555";
    cljs.core.async.impl.channels.t14555.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/t14555");
    };
    cljs.core.async.impl.channels.t14555.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t14555.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14557) {
      var self__ = this;
      var _14557__$1 = this;
      return self__.meta14556;
    };
    cljs.core.async.impl.channels.t14555.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14557, meta14556__$1) {
      var self__ = this;
      var _14557__$1 = this;
      return new cljs.core.async.impl.channels.t14555(self__.val, self__.box, meta14556__$1);
    };
    cljs.core.async.impl.channels.__GT_t14555 = function __GT_t14555(val__$1, box__$1, meta14556) {
      return new cljs.core.async.impl.channels.t14555(val__$1, box__$1, meta14556);
    };
  }
  return new cljs.core.async.impl.channels.t14555(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_14558 = self__.takes.pop();
      if (taker_14558 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_14558)) {
          var take_cb_14559 = cljs.core.async.impl.protocols.commit.call(null, taker_14558);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_14559, taker_14558, this$__$1) {
            return function() {
              return take_cb_14559.call(null, null);
            };
          }(take_cb_14559, taker_14558, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__14479 = level + 1;
        level = G__14479;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_14480 = 0;
    while (true) {
      if (i_14480 < arr.length) {
        arr[i_14480] = null;
        var G__14481 = i_14480 + 1;
        i_14480 = G__14481;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__14482 = x_SINGLEQUOTE_;
                x__$1 = G__14482;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__14483 = x__$1;
        var G__14484 = k;
        var G__14485 = level - 1;
        var G__14486 = update;
        x = G__14483;
        k = G__14484;
        level = G__14485;
        update = G__14486;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_14487 = self__.level + 1;
      while (true) {
        if (i_14487 <= new_level + 1) {
          update[i_14487] = self__.header;
          var G__14488 = i_14487 + 1;
          i_14487 = G__14488;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_14489 = 0;
    while (true) {
      if (i_14489 <= self__.level) {
        var links_14490 = update[i_14489].forward;
        if (links_14490[i_14489] === x__$1) {
          links_14490[i_14489] = x__$1.forward[i_14489];
          var G__14491 = i_14489 + 1;
          i_14489 = G__14491;
          continue;
        } else {
          var G__14492 = i_14489 + 1;
          i_14489 = G__14492;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__14493 = x_SINGLEQUOTE_;
              x__$1 = G__14493;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__14494 = nx;
        var G__14495 = level__$1 - 1;
        x = G__14494;
        level__$1 = G__14495;
        continue;
      } else {
        var G__14496 = x;
        var G__14497 = level__$1 - 1;
        x = G__14496;
        level__$1 = G__14497;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__14498 = x_SINGLEQUOTE_;
              x__$1 = G__14498;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__14499 = nx;
        var G__14500 = level__$1 - 1;
        x = G__14499;
        level__$1 = G__14500;
        continue;
      } else {
        var G__14501 = x;
        var G__14502 = level__$1 - 1;
        x = G__14501;
        level__$1 = G__14502;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = me;
    if (cljs.core.truth_(and__3636__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3636__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3648__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3648__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t12569 !== "undefined") {
  } else {
    cljs.core.async.t12569 = function(f, fn_handler, meta12570) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12570 = meta12570;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12569.cljs$lang$type = true;
    cljs.core.async.t12569.cljs$lang$ctorStr = "cljs.core.async/t12569";
    cljs.core.async.t12569.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12569");
    };
    cljs.core.async.t12569.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12569.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12569.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12569.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12571) {
      var self__ = this;
      var _12571__$1 = this;
      return self__.meta12570;
    };
    cljs.core.async.t12569.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12571, meta12570__$1) {
      var self__ = this;
      var _12571__$1 = this;
      return new cljs.core.async.t12569(self__.f, self__.fn_handler, meta12570__$1);
    };
    cljs.core.async.__GT_t12569 = function __GT_t12569(f__$1, fn_handler__$1, meta12570) {
      return new cljs.core.async.t12569(f__$1, fn_handler__$1, meta12570);
    };
  }
  return new cljs.core.async.t12569(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_12572 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_12572);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_12572, ret) {
          return function() {
            return fn1.call(null, val_12572);
          };
        }(val_12572, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = ret;
      if (cljs.core.truth_(and__3636__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4518__auto___12573 = n;
  var x_12574 = 0;
  while (true) {
    if (x_12574 < n__4518__auto___12573) {
      a[x_12574] = 0;
      var G__12575 = x_12574 + 1;
      x_12574 = G__12575;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12576 = i + 1;
      i = G__12576;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12580 !== "undefined") {
  } else {
    cljs.core.async.t12580 = function(flag, alt_flag, meta12581) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta12581 = meta12581;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12580.cljs$lang$type = true;
    cljs.core.async.t12580.cljs$lang$ctorStr = "cljs.core.async/t12580";
    cljs.core.async.t12580.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
        return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12580");
      };
    }(flag);
    cljs.core.async.t12580.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12580.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12580.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12580.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12582) {
        var self__ = this;
        var _12582__$1 = this;
        return self__.meta12581;
      };
    }(flag);
    cljs.core.async.t12580.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12582, meta12581__$1) {
        var self__ = this;
        var _12582__$1 = this;
        return new cljs.core.async.t12580(self__.flag, self__.alt_flag, meta12581__$1);
      };
    }(flag);
    cljs.core.async.__GT_t12580 = function(flag) {
      return function __GT_t12580(flag__$1, alt_flag__$1, meta12581) {
        return new cljs.core.async.t12580(flag__$1, alt_flag__$1, meta12581);
      };
    }(flag);
  }
  return new cljs.core.async.t12580(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12586 !== "undefined") {
  } else {
    cljs.core.async.t12586 = function(cb, flag, alt_handler, meta12587) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta12587 = meta12587;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12586.cljs$lang$type = true;
    cljs.core.async.t12586.cljs$lang$ctorStr = "cljs.core.async/t12586";
    cljs.core.async.t12586.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12586");
    };
    cljs.core.async.t12586.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12586.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12586.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12586.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12588) {
      var self__ = this;
      var _12588__$1 = this;
      return self__.meta12587;
    };
    cljs.core.async.t12586.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12588, meta12587__$1) {
      var self__ = this;
      var _12588__$1 = this;
      return new cljs.core.async.t12586(self__.cb, self__.flag, self__.alt_handler, meta12587__$1);
    };
    cljs.core.async.__GT_t12586 = function __GT_t12586(cb__$1, flag__$1, alt_handler__$1, meta12587) {
      return new cljs.core.async.t12586(cb__$1, flag__$1, alt_handler__$1, meta12587);
    };
  }
  return new cljs.core.async.t12586(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12589_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12589_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3648__auto__ = wport;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12590 = i + 1;
          i = G__12590;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3648__auto__ = ret;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3636__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3636__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__12591) {
    var map__12593 = p__12591;
    var map__12593__$1 = cljs.core.seq_QMARK_.call(null, map__12593) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12593) : map__12593;
    var opts = map__12593__$1;
    throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__12591 = null;
    if (arguments.length > 1) {
      p__12591 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__12591);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__12594) {
    var ports = cljs.core.first(arglist__12594);
    var p__12591 = cljs.core.rest(arglist__12594);
    return alts_BANG___delegate(ports, p__12591);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t12602 !== "undefined") {
  } else {
    cljs.core.async.t12602 = function(ch, f, map_LT_, meta12603) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta12603 = meta12603;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12602.cljs$lang$type = true;
    cljs.core.async.t12602.cljs$lang$ctorStr = "cljs.core.async/t12602";
    cljs.core.async.t12602.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12602");
    };
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12605 !== "undefined") {
        } else {
          cljs.core.async.t12605 = function(fn1, _, meta12603, ch, f, map_LT_, meta12606) {
            this.fn1 = fn1;
            this._ = _;
            this.meta12603 = meta12603;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta12606 = meta12606;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t12605.cljs$lang$type = true;
          cljs.core.async.t12605.cljs$lang$ctorStr = "cljs.core.async/t12605";
          cljs.core.async.t12605.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
              return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12605");
            };
          }(___$1);
          cljs.core.async.t12605.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12605.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12605.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12605.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__12595_SHARP_) {
                  return f1.call(null, p1__12595_SHARP_ == null ? null : self__.f.call(null, p1__12595_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t12605.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12607) {
              var self__ = this;
              var _12607__$1 = this;
              return self__.meta12606;
            };
          }(___$1);
          cljs.core.async.t12605.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12607, meta12606__$1) {
              var self__ = this;
              var _12607__$1 = this;
              return new cljs.core.async.t12605(self__.fn1, self__._, self__.meta12603, self__.ch, self__.f, self__.map_LT_, meta12606__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t12605 = function(___$1) {
            return function __GT_t12605(fn1__$1, ___$2, meta12603__$1, ch__$2, f__$2, map_LT___$2, meta12606) {
              return new cljs.core.async.t12605(fn1__$1, ___$2, meta12603__$1, ch__$2, f__$2, map_LT___$2, meta12606);
            };
          }(___$1);
        }
        return new cljs.core.async.t12605(fn1, ___$1, self__.meta12603, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = ret;
        if (cljs.core.truth_(and__3636__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3636__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12602.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12602.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12604) {
      var self__ = this;
      var _12604__$1 = this;
      return self__.meta12603;
    };
    cljs.core.async.t12602.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12604, meta12603__$1) {
      var self__ = this;
      var _12604__$1 = this;
      return new cljs.core.async.t12602(self__.ch, self__.f, self__.map_LT_, meta12603__$1);
    };
    cljs.core.async.__GT_t12602 = function __GT_t12602(ch__$1, f__$1, map_LT___$1, meta12603) {
      return new cljs.core.async.t12602(ch__$1, f__$1, map_LT___$1, meta12603);
    };
  }
  return new cljs.core.async.t12602(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t12611 !== "undefined") {
  } else {
    cljs.core.async.t12611 = function(ch, f, map_GT_, meta12612) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta12612 = meta12612;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12611.cljs$lang$type = true;
    cljs.core.async.t12611.cljs$lang$ctorStr = "cljs.core.async/t12611";
    cljs.core.async.t12611.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12611");
    };
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12611.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12611.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12613) {
      var self__ = this;
      var _12613__$1 = this;
      return self__.meta12612;
    };
    cljs.core.async.t12611.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12613, meta12612__$1) {
      var self__ = this;
      var _12613__$1 = this;
      return new cljs.core.async.t12611(self__.ch, self__.f, self__.map_GT_, meta12612__$1);
    };
    cljs.core.async.__GT_t12611 = function __GT_t12611(ch__$1, f__$1, map_GT___$1, meta12612) {
      return new cljs.core.async.t12611(ch__$1, f__$1, map_GT___$1, meta12612);
    };
  }
  return new cljs.core.async.t12611(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12617 !== "undefined") {
  } else {
    cljs.core.async.t12617 = function(ch, p, filter_GT_, meta12618) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta12618 = meta12618;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12617.cljs$lang$type = true;
    cljs.core.async.t12617.cljs$lang$ctorStr = "cljs.core.async/t12617";
    cljs.core.async.t12617.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12617");
    };
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12617.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12617.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12619) {
      var self__ = this;
      var _12619__$1 = this;
      return self__.meta12618;
    };
    cljs.core.async.t12617.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12619, meta12618__$1) {
      var self__ = this;
      var _12619__$1 = this;
      return new cljs.core.async.t12617(self__.ch, self__.p, self__.filter_GT_, meta12618__$1);
    };
    cljs.core.async.__GT_t12617 = function __GT_t12617(ch__$1, p__$1, filter_GT___$1, meta12618) {
      return new cljs.core.async.t12617(ch__$1, p__$1, filter_GT___$1, meta12618);
    };
  }
  return new cljs.core.async.t12617(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5725__auto___12694 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___12694, out) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___12694, out) {
            return function(state_12677) {
              var state_val_12678 = state_12677[1];
              if (state_val_12678 === 7) {
                var inst_12673 = state_12677[2];
                var state_12677__$1 = state_12677;
                var statearr_12679_12695 = state_12677__$1;
                statearr_12679_12695[2] = inst_12673;
                statearr_12679_12695[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12678 === 1) {
                  var state_12677__$1 = state_12677;
                  var statearr_12680_12696 = state_12677__$1;
                  statearr_12680_12696[2] = null;
                  statearr_12680_12696[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12678 === 4) {
                    var inst_12659 = state_12677[5];
                    var inst_12659__$1 = state_12677[2];
                    var inst_12660 = inst_12659__$1 == null;
                    var state_12677__$1 = function() {
                      var statearr_12681 = state_12677;
                      statearr_12681[5] = inst_12659__$1;
                      return statearr_12681;
                    }();
                    if (cljs.core.truth_(inst_12660)) {
                      var statearr_12682_12697 = state_12677__$1;
                      statearr_12682_12697[1] = 5;
                    } else {
                      var statearr_12683_12698 = state_12677__$1;
                      statearr_12683_12698[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12678 === 6) {
                      var inst_12659 = state_12677[5];
                      var inst_12664 = p.call(null, inst_12659);
                      var state_12677__$1 = state_12677;
                      if (cljs.core.truth_(inst_12664)) {
                        var statearr_12684_12699 = state_12677__$1;
                        statearr_12684_12699[1] = 8;
                      } else {
                        var statearr_12685_12700 = state_12677__$1;
                        statearr_12685_12700[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12678 === 3) {
                        var inst_12675 = state_12677[2];
                        var state_12677__$1 = state_12677;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12677__$1, inst_12675);
                      } else {
                        if (state_val_12678 === 2) {
                          var state_12677__$1 = state_12677;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12677__$1, 4, ch);
                        } else {
                          if (state_val_12678 === 11) {
                            var inst_12667 = state_12677[2];
                            var state_12677__$1 = state_12677;
                            var statearr_12686_12701 = state_12677__$1;
                            statearr_12686_12701[2] = inst_12667;
                            statearr_12686_12701[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12678 === 9) {
                              var state_12677__$1 = state_12677;
                              var statearr_12687_12702 = state_12677__$1;
                              statearr_12687_12702[2] = null;
                              statearr_12687_12702[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12678 === 5) {
                                var inst_12662 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12677__$1 = state_12677;
                                var statearr_12688_12703 = state_12677__$1;
                                statearr_12688_12703[2] = inst_12662;
                                statearr_12688_12703[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12678 === 10) {
                                  var inst_12670 = state_12677[2];
                                  var state_12677__$1 = function() {
                                    var statearr_12689 = state_12677;
                                    statearr_12689[6] = inst_12670;
                                    return statearr_12689;
                                  }();
                                  var statearr_12690_12704 = state_12677__$1;
                                  statearr_12690_12704[2] = null;
                                  statearr_12690_12704[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12678 === 8) {
                                    var inst_12659 = state_12677[5];
                                    var state_12677__$1 = state_12677;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12677__$1, 11, out, inst_12659);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___12694, out);
          return function(switch__5712__auto__, c__5725__auto___12694, out) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_12692 = [null, null, null, null, null, null, null];
                statearr_12692[0] = state_machine__5713__auto__;
                statearr_12692[1] = 1;
                return statearr_12692;
              };
              var state_machine__5713__auto____1 = function(state_12677) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_12677);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_12677) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_12677);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___12694, out);
        }();
        var state__5727__auto__ = function() {
          var statearr_12693 = f__5726__auto__.call(null);
          statearr_12693[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___12694;
          return statearr_12693;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___12694, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_12852) {
            var state_val_12853 = state_12852[1];
            if (state_val_12853 === 7) {
              var inst_12848 = state_12852[2];
              var state_12852__$1 = state_12852;
              var statearr_12854_12887 = state_12852__$1;
              statearr_12854_12887[2] = inst_12848;
              statearr_12854_12887[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12853 === 20) {
                var inst_12823 = state_12852[5];
                var inst_12834 = state_12852[2];
                var inst_12835 = cljs.core.next.call(null, inst_12823);
                var inst_12809 = inst_12835;
                var inst_12810 = null;
                var inst_12811 = 0;
                var inst_12812 = 0;
                var state_12852__$1 = function() {
                  var statearr_12855 = state_12852;
                  statearr_12855[6] = inst_12811;
                  statearr_12855[7] = inst_12834;
                  statearr_12855[8] = inst_12809;
                  statearr_12855[9] = inst_12810;
                  statearr_12855[10] = inst_12812;
                  return statearr_12855;
                }();
                var statearr_12856_12888 = state_12852__$1;
                statearr_12856_12888[2] = null;
                statearr_12856_12888[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12853 === 1) {
                  var state_12852__$1 = state_12852;
                  var statearr_12857_12889 = state_12852__$1;
                  statearr_12857_12889[2] = null;
                  statearr_12857_12889[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12853 === 4) {
                    var inst_12798 = state_12852[11];
                    var inst_12798__$1 = state_12852[2];
                    var inst_12799 = inst_12798__$1 == null;
                    var state_12852__$1 = function() {
                      var statearr_12861 = state_12852;
                      statearr_12861[11] = inst_12798__$1;
                      return statearr_12861;
                    }();
                    if (cljs.core.truth_(inst_12799)) {
                      var statearr_12862_12890 = state_12852__$1;
                      statearr_12862_12890[1] = 5;
                    } else {
                      var statearr_12863_12891 = state_12852__$1;
                      statearr_12863_12891[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12853 === 15) {
                      var state_12852__$1 = state_12852;
                      var statearr_12864_12892 = state_12852__$1;
                      statearr_12864_12892[2] = null;
                      statearr_12864_12892[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12853 === 13) {
                        var inst_12811 = state_12852[6];
                        var inst_12809 = state_12852[8];
                        var inst_12810 = state_12852[9];
                        var inst_12812 = state_12852[10];
                        var inst_12819 = state_12852[2];
                        var inst_12820 = inst_12812 + 1;
                        var tmp12858 = inst_12811;
                        var tmp12859 = inst_12809;
                        var tmp12860 = inst_12810;
                        var inst_12809__$1 = tmp12859;
                        var inst_12810__$1 = tmp12860;
                        var inst_12811__$1 = tmp12858;
                        var inst_12812__$1 = inst_12820;
                        var state_12852__$1 = function() {
                          var statearr_12865 = state_12852;
                          statearr_12865[6] = inst_12811__$1;
                          statearr_12865[8] = inst_12809__$1;
                          statearr_12865[9] = inst_12810__$1;
                          statearr_12865[12] = inst_12819;
                          statearr_12865[10] = inst_12812__$1;
                          return statearr_12865;
                        }();
                        var statearr_12866_12893 = state_12852__$1;
                        statearr_12866_12893[2] = null;
                        statearr_12866_12893[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12853 === 6) {
                          var inst_12798 = state_12852[11];
                          var inst_12803 = f.call(null, inst_12798);
                          var inst_12808 = cljs.core.seq.call(null, inst_12803);
                          var inst_12809 = inst_12808;
                          var inst_12810 = null;
                          var inst_12811 = 0;
                          var inst_12812 = 0;
                          var state_12852__$1 = function() {
                            var statearr_12867 = state_12852;
                            statearr_12867[6] = inst_12811;
                            statearr_12867[8] = inst_12809;
                            statearr_12867[9] = inst_12810;
                            statearr_12867[10] = inst_12812;
                            return statearr_12867;
                          }();
                          var statearr_12868_12894 = state_12852__$1;
                          statearr_12868_12894[2] = null;
                          statearr_12868_12894[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12853 === 17) {
                            var inst_12823 = state_12852[5];
                            var inst_12827 = cljs.core.chunk_first.call(null, inst_12823);
                            var inst_12828 = cljs.core.chunk_rest.call(null, inst_12823);
                            var inst_12829 = cljs.core.count.call(null, inst_12827);
                            var inst_12809 = inst_12828;
                            var inst_12810 = inst_12827;
                            var inst_12811 = inst_12829;
                            var inst_12812 = 0;
                            var state_12852__$1 = function() {
                              var statearr_12869 = state_12852;
                              statearr_12869[6] = inst_12811;
                              statearr_12869[8] = inst_12809;
                              statearr_12869[9] = inst_12810;
                              statearr_12869[10] = inst_12812;
                              return statearr_12869;
                            }();
                            var statearr_12870_12895 = state_12852__$1;
                            statearr_12870_12895[2] = null;
                            statearr_12870_12895[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12853 === 3) {
                              var inst_12850 = state_12852[2];
                              var state_12852__$1 = state_12852;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12852__$1, inst_12850);
                            } else {
                              if (state_val_12853 === 12) {
                                var inst_12843 = state_12852[2];
                                var state_12852__$1 = state_12852;
                                var statearr_12871_12896 = state_12852__$1;
                                statearr_12871_12896[2] = inst_12843;
                                statearr_12871_12896[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12853 === 2) {
                                  var state_12852__$1 = state_12852;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12852__$1, 4, in$);
                                } else {
                                  if (state_val_12853 === 19) {
                                    var inst_12838 = state_12852[2];
                                    var state_12852__$1 = state_12852;
                                    var statearr_12872_12897 = state_12852__$1;
                                    statearr_12872_12897[2] = inst_12838;
                                    statearr_12872_12897[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12853 === 11) {
                                      var inst_12823 = state_12852[5];
                                      var inst_12809 = state_12852[8];
                                      var inst_12823__$1 = cljs.core.seq.call(null, inst_12809);
                                      var state_12852__$1 = function() {
                                        var statearr_12873 = state_12852;
                                        statearr_12873[5] = inst_12823__$1;
                                        return statearr_12873;
                                      }();
                                      if (inst_12823__$1) {
                                        var statearr_12874_12898 = state_12852__$1;
                                        statearr_12874_12898[1] = 14;
                                      } else {
                                        var statearr_12875_12899 = state_12852__$1;
                                        statearr_12875_12899[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12853 === 9) {
                                        var inst_12845 = state_12852[2];
                                        var state_12852__$1 = function() {
                                          var statearr_12876 = state_12852;
                                          statearr_12876[13] = inst_12845;
                                          return statearr_12876;
                                        }();
                                        var statearr_12877_12900 = state_12852__$1;
                                        statearr_12877_12900[2] = null;
                                        statearr_12877_12900[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12853 === 5) {
                                          var inst_12801 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_12852__$1 = state_12852;
                                          var statearr_12878_12901 = state_12852__$1;
                                          statearr_12878_12901[2] = inst_12801;
                                          statearr_12878_12901[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12853 === 14) {
                                            var inst_12823 = state_12852[5];
                                            var inst_12825 = cljs.core.chunked_seq_QMARK_.call(null, inst_12823);
                                            var state_12852__$1 = state_12852;
                                            if (inst_12825) {
                                              var statearr_12879_12902 = state_12852__$1;
                                              statearr_12879_12902[1] = 17;
                                            } else {
                                              var statearr_12880_12903 = state_12852__$1;
                                              statearr_12880_12903[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12853 === 16) {
                                              var inst_12841 = state_12852[2];
                                              var state_12852__$1 = state_12852;
                                              var statearr_12881_12904 = state_12852__$1;
                                              statearr_12881_12904[2] = inst_12841;
                                              statearr_12881_12904[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12853 === 10) {
                                                var inst_12810 = state_12852[9];
                                                var inst_12812 = state_12852[10];
                                                var inst_12817 = cljs.core._nth.call(null, inst_12810, inst_12812);
                                                var state_12852__$1 = state_12852;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12852__$1, 13, out, inst_12817);
                                              } else {
                                                if (state_val_12853 === 18) {
                                                  var inst_12823 = state_12852[5];
                                                  var inst_12832 = cljs.core.first.call(null, inst_12823);
                                                  var state_12852__$1 = state_12852;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12852__$1, 20, out, inst_12832);
                                                } else {
                                                  if (state_val_12853 === 8) {
                                                    var inst_12811 = state_12852[6];
                                                    var inst_12812 = state_12852[10];
                                                    var inst_12814 = inst_12812 < inst_12811;
                                                    var inst_12815 = inst_12814;
                                                    var state_12852__$1 = state_12852;
                                                    if (cljs.core.truth_(inst_12815)) {
                                                      var statearr_12882_12905 = state_12852__$1;
                                                      statearr_12882_12905[1] = 10;
                                                    } else {
                                                      var statearr_12883_12906 = state_12852__$1;
                                                      statearr_12883_12906[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_12885 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12885[0] = state_machine__5713__auto__;
              statearr_12885[1] = 1;
              return statearr_12885;
            };
            var state_machine__5713__auto____1 = function(state_12852) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_12852);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_12852) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_12852);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_12886 = f__5726__auto__.call(null);
        statearr_12886[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_12886;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5725__auto___12979 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___12979) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___12979) {
            return function(state_12962) {
              var state_val_12963 = state_12962[1];
              if (state_val_12963 === 7) {
                var inst_12958 = state_12962[2];
                var state_12962__$1 = state_12962;
                var statearr_12964_12980 = state_12962__$1;
                statearr_12964_12980[2] = inst_12958;
                statearr_12964_12980[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12963 === 1) {
                  var state_12962__$1 = state_12962;
                  var statearr_12965_12981 = state_12962__$1;
                  statearr_12965_12981[2] = null;
                  statearr_12965_12981[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12963 === 4) {
                    var inst_12945 = state_12962[5];
                    var inst_12945__$1 = state_12962[2];
                    var inst_12946 = inst_12945__$1 == null;
                    var state_12962__$1 = function() {
                      var statearr_12966 = state_12962;
                      statearr_12966[5] = inst_12945__$1;
                      return statearr_12966;
                    }();
                    if (cljs.core.truth_(inst_12946)) {
                      var statearr_12967_12982 = state_12962__$1;
                      statearr_12967_12982[1] = 5;
                    } else {
                      var statearr_12968_12983 = state_12962__$1;
                      statearr_12968_12983[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12963 === 6) {
                      var inst_12945 = state_12962[5];
                      var state_12962__$1 = state_12962;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12962__$1, 11, to, inst_12945);
                    } else {
                      if (state_val_12963 === 3) {
                        var inst_12960 = state_12962[2];
                        var state_12962__$1 = state_12962;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12962__$1, inst_12960);
                      } else {
                        if (state_val_12963 === 2) {
                          var state_12962__$1 = state_12962;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12962__$1, 4, from);
                        } else {
                          if (state_val_12963 === 11) {
                            var inst_12955 = state_12962[2];
                            var state_12962__$1 = function() {
                              var statearr_12969 = state_12962;
                              statearr_12969[6] = inst_12955;
                              return statearr_12969;
                            }();
                            var statearr_12970_12984 = state_12962__$1;
                            statearr_12970_12984[2] = null;
                            statearr_12970_12984[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12963 === 9) {
                              var state_12962__$1 = state_12962;
                              var statearr_12971_12985 = state_12962__$1;
                              statearr_12971_12985[2] = null;
                              statearr_12971_12985[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12963 === 5) {
                                var state_12962__$1 = state_12962;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_12972_12986 = state_12962__$1;
                                  statearr_12972_12986[1] = 8;
                                } else {
                                  var statearr_12973_12987 = state_12962__$1;
                                  statearr_12973_12987[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12963 === 10) {
                                  var inst_12952 = state_12962[2];
                                  var state_12962__$1 = state_12962;
                                  var statearr_12974_12988 = state_12962__$1;
                                  statearr_12974_12988[2] = inst_12952;
                                  statearr_12974_12988[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12963 === 8) {
                                    var inst_12949 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_12962__$1 = state_12962;
                                    var statearr_12975_12989 = state_12962__$1;
                                    statearr_12975_12989[2] = inst_12949;
                                    statearr_12975_12989[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___12979);
          return function(switch__5712__auto__, c__5725__auto___12979) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_12977 = [null, null, null, null, null, null, null];
                statearr_12977[0] = state_machine__5713__auto__;
                statearr_12977[1] = 1;
                return statearr_12977;
              };
              var state_machine__5713__auto____1 = function(state_12962) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_12962);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_12962) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_12962);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___12979);
        }();
        var state__5727__auto__ = function() {
          var statearr_12978 = f__5726__auto__.call(null);
          statearr_12978[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___12979;
          return statearr_12978;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___12979));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5725__auto___13068 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___13068, tc, fc) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___13068, tc, fc) {
            return function(state_13050) {
              var state_val_13051 = state_13050[1];
              if (state_val_13051 === 7) {
                var inst_13046 = state_13050[2];
                var state_13050__$1 = state_13050;
                var statearr_13052_13069 = state_13050__$1;
                statearr_13052_13069[2] = inst_13046;
                statearr_13052_13069[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13051 === 1) {
                  var state_13050__$1 = state_13050;
                  var statearr_13053_13070 = state_13050__$1;
                  statearr_13053_13070[2] = null;
                  statearr_13053_13070[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13051 === 4) {
                    var inst_13031 = state_13050[5];
                    var inst_13031__$1 = state_13050[2];
                    var inst_13032 = inst_13031__$1 == null;
                    var state_13050__$1 = function() {
                      var statearr_13054 = state_13050;
                      statearr_13054[5] = inst_13031__$1;
                      return statearr_13054;
                    }();
                    if (cljs.core.truth_(inst_13032)) {
                      var statearr_13055_13071 = state_13050__$1;
                      statearr_13055_13071[1] = 5;
                    } else {
                      var statearr_13056_13072 = state_13050__$1;
                      statearr_13056_13072[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13051 === 6) {
                      var inst_13031 = state_13050[5];
                      var inst_13037 = p.call(null, inst_13031);
                      var state_13050__$1 = state_13050;
                      if (cljs.core.truth_(inst_13037)) {
                        var statearr_13057_13073 = state_13050__$1;
                        statearr_13057_13073[1] = 9;
                      } else {
                        var statearr_13058_13074 = state_13050__$1;
                        statearr_13058_13074[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13051 === 3) {
                        var inst_13048 = state_13050[2];
                        var state_13050__$1 = state_13050;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13050__$1, inst_13048);
                      } else {
                        if (state_val_13051 === 2) {
                          var state_13050__$1 = state_13050;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13050__$1, 4, ch);
                        } else {
                          if (state_val_13051 === 11) {
                            var inst_13031 = state_13050[5];
                            var inst_13041 = state_13050[2];
                            var state_13050__$1 = state_13050;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13050__$1, 8, inst_13041, inst_13031);
                          } else {
                            if (state_val_13051 === 9) {
                              var state_13050__$1 = state_13050;
                              var statearr_13059_13075 = state_13050__$1;
                              statearr_13059_13075[2] = tc;
                              statearr_13059_13075[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13051 === 5) {
                                var inst_13034 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_13035 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_13050__$1 = function() {
                                  var statearr_13060 = state_13050;
                                  statearr_13060[6] = inst_13034;
                                  return statearr_13060;
                                }();
                                var statearr_13061_13076 = state_13050__$1;
                                statearr_13061_13076[2] = inst_13035;
                                statearr_13061_13076[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13051 === 10) {
                                  var state_13050__$1 = state_13050;
                                  var statearr_13062_13077 = state_13050__$1;
                                  statearr_13062_13077[2] = fc;
                                  statearr_13062_13077[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13051 === 8) {
                                    var inst_13043 = state_13050[2];
                                    var state_13050__$1 = function() {
                                      var statearr_13063 = state_13050;
                                      statearr_13063[7] = inst_13043;
                                      return statearr_13063;
                                    }();
                                    var statearr_13064_13078 = state_13050__$1;
                                    statearr_13064_13078[2] = null;
                                    statearr_13064_13078[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___13068, tc, fc);
          return function(switch__5712__auto__, c__5725__auto___13068, tc, fc) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_13066 = [null, null, null, null, null, null, null, null];
                statearr_13066[0] = state_machine__5713__auto__;
                statearr_13066[1] = 1;
                return statearr_13066;
              };
              var state_machine__5713__auto____1 = function(state_13050) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_13050);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_13050) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_13050);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___13068, tc, fc);
        }();
        var state__5727__auto__ = function() {
          var statearr_13067 = f__5726__auto__.call(null);
          statearr_13067[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___13068;
          return statearr_13067;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___13068, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_13121) {
            var state_val_13122 = state_13121[1];
            if (state_val_13122 === 7) {
              var inst_13117 = state_13121[2];
              var state_13121__$1 = state_13121;
              var statearr_13123_13135 = state_13121__$1;
              statearr_13123_13135[2] = inst_13117;
              statearr_13123_13135[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13122 === 6) {
                var inst_13107 = state_13121[5];
                var inst_13110 = state_13121[6];
                var inst_13114 = f.call(null, inst_13107, inst_13110);
                var inst_13107__$1 = inst_13114;
                var state_13121__$1 = function() {
                  var statearr_13124 = state_13121;
                  statearr_13124[5] = inst_13107__$1;
                  return statearr_13124;
                }();
                var statearr_13125_13136 = state_13121__$1;
                statearr_13125_13136[2] = null;
                statearr_13125_13136[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13122 === 5) {
                  var inst_13107 = state_13121[5];
                  var state_13121__$1 = state_13121;
                  var statearr_13126_13137 = state_13121__$1;
                  statearr_13126_13137[2] = inst_13107;
                  statearr_13126_13137[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13122 === 4) {
                    var inst_13110 = state_13121[6];
                    var inst_13110__$1 = state_13121[2];
                    var inst_13111 = inst_13110__$1 == null;
                    var state_13121__$1 = function() {
                      var statearr_13127 = state_13121;
                      statearr_13127[6] = inst_13110__$1;
                      return statearr_13127;
                    }();
                    if (cljs.core.truth_(inst_13111)) {
                      var statearr_13128_13138 = state_13121__$1;
                      statearr_13128_13138[1] = 5;
                    } else {
                      var statearr_13129_13139 = state_13121__$1;
                      statearr_13129_13139[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13122 === 3) {
                      var inst_13119 = state_13121[2];
                      var state_13121__$1 = state_13121;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13121__$1, inst_13119);
                    } else {
                      if (state_val_13122 === 2) {
                        var state_13121__$1 = state_13121;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13121__$1, 4, ch);
                      } else {
                        if (state_val_13122 === 1) {
                          var inst_13107 = init;
                          var state_13121__$1 = function() {
                            var statearr_13130 = state_13121;
                            statearr_13130[5] = inst_13107;
                            return statearr_13130;
                          }();
                          var statearr_13131_13140 = state_13121__$1;
                          statearr_13131_13140[2] = null;
                          statearr_13131_13140[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_13133 = [null, null, null, null, null, null, null];
              statearr_13133[0] = state_machine__5713__auto__;
              statearr_13133[1] = 1;
              return statearr_13133;
            };
            var state_machine__5713__auto____1 = function(state_13121) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_13121);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_13121) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_13121);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_13134 = f__5726__auto__.call(null);
        statearr_13134[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_13134;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto__) {
            return function(state_13198) {
              var state_val_13199 = state_13198[1];
              if (state_val_13199 === 7) {
                var inst_13179 = state_13198[5];
                var inst_13184 = state_13198[2];
                var inst_13185 = cljs.core.next.call(null, inst_13179);
                var inst_13179__$1 = inst_13185;
                var state_13198__$1 = function() {
                  var statearr_13200 = state_13198;
                  statearr_13200[6] = inst_13184;
                  statearr_13200[5] = inst_13179__$1;
                  return statearr_13200;
                }();
                var statearr_13201_13215 = state_13198__$1;
                statearr_13201_13215[2] = null;
                statearr_13201_13215[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13199 === 1) {
                  var inst_13178 = cljs.core.seq.call(null, coll);
                  var inst_13179 = inst_13178;
                  var state_13198__$1 = function() {
                    var statearr_13202 = state_13198;
                    statearr_13202[5] = inst_13179;
                    return statearr_13202;
                  }();
                  var statearr_13203_13216 = state_13198__$1;
                  statearr_13203_13216[2] = null;
                  statearr_13203_13216[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13199 === 4) {
                    var inst_13179 = state_13198[5];
                    var inst_13182 = cljs.core.first.call(null, inst_13179);
                    var state_13198__$1 = state_13198;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13198__$1, 7, ch, inst_13182);
                  } else {
                    if (state_val_13199 === 6) {
                      var inst_13194 = state_13198[2];
                      var state_13198__$1 = state_13198;
                      var statearr_13204_13217 = state_13198__$1;
                      statearr_13204_13217[2] = inst_13194;
                      statearr_13204_13217[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13199 === 3) {
                        var inst_13196 = state_13198[2];
                        var state_13198__$1 = state_13198;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13198__$1, inst_13196);
                      } else {
                        if (state_val_13199 === 2) {
                          var inst_13179 = state_13198[5];
                          var state_13198__$1 = state_13198;
                          if (cljs.core.truth_(inst_13179)) {
                            var statearr_13205_13218 = state_13198__$1;
                            statearr_13205_13218[1] = 4;
                          } else {
                            var statearr_13206_13219 = state_13198__$1;
                            statearr_13206_13219[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13199 === 9) {
                            var state_13198__$1 = state_13198;
                            var statearr_13207_13220 = state_13198__$1;
                            statearr_13207_13220[2] = null;
                            statearr_13207_13220[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13199 === 5) {
                              var state_13198__$1 = state_13198;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_13208_13221 = state_13198__$1;
                                statearr_13208_13221[1] = 8;
                              } else {
                                var statearr_13209_13222 = state_13198__$1;
                                statearr_13209_13222[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13199 === 10) {
                                var inst_13192 = state_13198[2];
                                var state_13198__$1 = state_13198;
                                var statearr_13210_13223 = state_13198__$1;
                                statearr_13210_13223[2] = inst_13192;
                                statearr_13210_13223[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13199 === 8) {
                                  var inst_13189 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_13198__$1 = state_13198;
                                  var statearr_13211_13224 = state_13198__$1;
                                  statearr_13211_13224[2] = inst_13189;
                                  statearr_13211_13224[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto__);
          return function(switch__5712__auto__, c__5725__auto__) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_13213 = [null, null, null, null, null, null, null];
                statearr_13213[0] = state_machine__5713__auto__;
                statearr_13213[1] = 1;
                return statearr_13213;
              };
              var state_machine__5713__auto____1 = function(state_13198) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_13198);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_13198) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_13198);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto__);
        }();
        var state__5727__auto__ = function() {
          var statearr_13214 = f__5726__auto__.call(null);
          statearr_13214[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
          return statearr_13214;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto__));
    return c__5725__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13226 = {};
  return obj13226;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3636__auto__ = _;
    if (and__3636__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4285__auto__ = _ == null ? null : _;
    return function() {
      var or__3648__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13228 = {};
  return obj13228;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13441 !== "undefined") {
    } else {
      cljs.core.async.t13441 = function(cs, ch, mult, meta13442) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta13442 = meta13442;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13441.cljs$lang$type = true;
      cljs.core.async.t13441.cljs$lang$ctorStr = "cljs.core.async/t13441";
      cljs.core.async.t13441.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13441");
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13441.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13441.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13443) {
          var self__ = this;
          var _13443__$1 = this;
          return self__.meta13442;
        };
      }(cs);
      cljs.core.async.t13441.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13443, meta13442__$1) {
          var self__ = this;
          var _13443__$1 = this;
          return new cljs.core.async.t13441(self__.cs, self__.ch, self__.mult, meta13442__$1);
        };
      }(cs);
      cljs.core.async.__GT_t13441 = function(cs) {
        return function __GT_t13441(cs__$1, ch__$1, mult__$1, meta13442) {
          return new cljs.core.async.t13441(cs__$1, ch__$1, mult__$1, meta13442);
        };
      }(cs);
    }
    return new cljs.core.async.t13441(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5725__auto___13653 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___13653, cs, m, dchan, dctr, done) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto___13653, cs, m, dchan, dctr, done) {
          return function(state_13571) {
            var state_val_13572 = state_13571[1];
            if (state_val_13572 === 7) {
              var inst_13567 = state_13571[2];
              var state_13571__$1 = state_13571;
              var statearr_13573_13654 = state_13571__$1;
              statearr_13573_13654[2] = inst_13567;
              statearr_13573_13654[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13572 === 20) {
                var inst_13475 = state_13571[5];
                var inst_13485 = cljs.core.first.call(null, inst_13475);
                var inst_13486 = cljs.core.nth.call(null, inst_13485, 0, null);
                var inst_13487 = cljs.core.nth.call(null, inst_13485, 1, null);
                var state_13571__$1 = function() {
                  var statearr_13574 = state_13571;
                  statearr_13574[6] = inst_13486;
                  return statearr_13574;
                }();
                if (cljs.core.truth_(inst_13487)) {
                  var statearr_13575_13655 = state_13571__$1;
                  statearr_13575_13655[1] = 22;
                } else {
                  var statearr_13576_13656 = state_13571__$1;
                  statearr_13576_13656[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13572 === 27) {
                  var inst_13517 = state_13571[7];
                  var inst_13515 = state_13571[8];
                  var inst_13522 = cljs.core._nth.call(null, inst_13515, inst_13517);
                  var state_13571__$1 = function() {
                    var statearr_13577 = state_13571;
                    statearr_13577[9] = inst_13522;
                    return statearr_13577;
                  }();
                  var statearr_13578_13657 = state_13571__$1;
                  statearr_13578_13657[2] = null;
                  statearr_13578_13657[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13572 === 1) {
                    var state_13571__$1 = state_13571;
                    var statearr_13579_13658 = state_13571__$1;
                    statearr_13579_13658[2] = null;
                    statearr_13579_13658[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13572 === 24) {
                      var inst_13475 = state_13571[5];
                      var inst_13492 = state_13571[2];
                      var inst_13493 = cljs.core.next.call(null, inst_13475);
                      var inst_13455 = inst_13493;
                      var inst_13456 = null;
                      var inst_13457 = 0;
                      var inst_13458 = 0;
                      var state_13571__$1 = function() {
                        var statearr_13580 = state_13571;
                        statearr_13580[10] = inst_13456;
                        statearr_13580[11] = inst_13492;
                        statearr_13580[12] = inst_13455;
                        statearr_13580[13] = inst_13457;
                        statearr_13580[14] = inst_13458;
                        return statearr_13580;
                      }();
                      var statearr_13581_13659 = state_13571__$1;
                      statearr_13581_13659[2] = null;
                      statearr_13581_13659[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13572 === 39) {
                        var inst_13534 = state_13571[15];
                        var inst_13551 = state_13571[2];
                        var inst_13552 = cljs.core.next.call(null, inst_13534);
                        var inst_13514 = inst_13552;
                        var inst_13515 = null;
                        var inst_13516 = 0;
                        var inst_13517 = 0;
                        var state_13571__$1 = function() {
                          var statearr_13585 = state_13571;
                          statearr_13585[7] = inst_13517;
                          statearr_13585[16] = inst_13514;
                          statearr_13585[8] = inst_13515;
                          statearr_13585[17] = inst_13551;
                          statearr_13585[18] = inst_13516;
                          return statearr_13585;
                        }();
                        var statearr_13586_13660 = state_13571__$1;
                        statearr_13586_13660[2] = null;
                        statearr_13586_13660[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13572 === 4) {
                          var inst_13446 = state_13571[19];
                          var inst_13446__$1 = state_13571[2];
                          var inst_13447 = inst_13446__$1 == null;
                          var state_13571__$1 = function() {
                            var statearr_13587 = state_13571;
                            statearr_13587[19] = inst_13446__$1;
                            return statearr_13587;
                          }();
                          if (cljs.core.truth_(inst_13447)) {
                            var statearr_13588_13661 = state_13571__$1;
                            statearr_13588_13661[1] = 5;
                          } else {
                            var statearr_13589_13662 = state_13571__$1;
                            statearr_13589_13662[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13572 === 15) {
                            var inst_13456 = state_13571[10];
                            var inst_13455 = state_13571[12];
                            var inst_13457 = state_13571[13];
                            var inst_13458 = state_13571[14];
                            var inst_13471 = state_13571[2];
                            var inst_13472 = inst_13458 + 1;
                            var tmp13582 = inst_13456;
                            var tmp13583 = inst_13455;
                            var tmp13584 = inst_13457;
                            var inst_13455__$1 = tmp13583;
                            var inst_13456__$1 = tmp13582;
                            var inst_13457__$1 = tmp13584;
                            var inst_13458__$1 = inst_13472;
                            var state_13571__$1 = function() {
                              var statearr_13590 = state_13571;
                              statearr_13590[10] = inst_13456__$1;
                              statearr_13590[20] = inst_13471;
                              statearr_13590[12] = inst_13455__$1;
                              statearr_13590[13] = inst_13457__$1;
                              statearr_13590[14] = inst_13458__$1;
                              return statearr_13590;
                            }();
                            var statearr_13591_13663 = state_13571__$1;
                            statearr_13591_13663[2] = null;
                            statearr_13591_13663[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13572 === 21) {
                              var inst_13496 = state_13571[2];
                              var state_13571__$1 = state_13571;
                              var statearr_13592_13664 = state_13571__$1;
                              statearr_13592_13664[2] = inst_13496;
                              statearr_13592_13664[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13572 === 31) {
                                var inst_13522 = state_13571[9];
                                var inst_13523 = state_13571[2];
                                var inst_13524 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_13525 = cljs.core.async.untap_STAR_.call(null, m, inst_13522);
                                var state_13571__$1 = function() {
                                  var statearr_13593 = state_13571;
                                  statearr_13593[21] = inst_13523;
                                  statearr_13593[22] = inst_13524;
                                  return statearr_13593;
                                }();
                                var statearr_13594_13665 = state_13571__$1;
                                statearr_13594_13665[2] = inst_13525;
                                statearr_13594_13665[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13572 === 32) {
                                  try {
                                    var inst_13522 = state_13571[9];
                                    var inst_13446 = state_13571[19];
                                    var inst_13528 = cljs.core.async.put_BANG_.call(null, inst_13522, inst_13446, done);
                                    var state_13571__$1 = state_13571;
                                    var statearr_13597_13666 = state_13571__$1;
                                    statearr_13597_13666[2] = inst_13528;
                                    statearr_13597_13666[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e13595) {
                                    if (e13595 instanceof Object) {
                                      var ex__5706__auto__ = e13595;
                                      var statearr_13596_13667 = state_13571;
                                      statearr_13596_13667[1] = 31;
                                      statearr_13596_13667[2] = ex__5706__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e13595;
                                    }
                                  }
                                } else {
                                  if (state_val_13572 === 40) {
                                    var inst_13543 = state_13571[23];
                                    var inst_13544 = state_13571[2];
                                    var inst_13545 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_13546 = cljs.core.async.untap_STAR_.call(null, m, inst_13543);
                                    var state_13571__$1 = function() {
                                      var statearr_13598 = state_13571;
                                      statearr_13598[24] = inst_13544;
                                      statearr_13598[25] = inst_13545;
                                      return statearr_13598;
                                    }();
                                    var statearr_13599_13668 = state_13571__$1;
                                    statearr_13599_13668[2] = inst_13546;
                                    statearr_13599_13668[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13572 === 33) {
                                      var inst_13534 = state_13571[15];
                                      var inst_13536 = cljs.core.chunked_seq_QMARK_.call(null, inst_13534);
                                      var state_13571__$1 = state_13571;
                                      if (inst_13536) {
                                        var statearr_13600_13669 = state_13571__$1;
                                        statearr_13600_13669[1] = 36;
                                      } else {
                                        var statearr_13601_13670 = state_13571__$1;
                                        statearr_13601_13670[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13572 === 13) {
                                        var inst_13465 = state_13571[26];
                                        var inst_13468 = cljs.core.async.close_BANG_.call(null, inst_13465);
                                        var state_13571__$1 = state_13571;
                                        var statearr_13602_13671 = state_13571__$1;
                                        statearr_13602_13671[2] = inst_13468;
                                        statearr_13602_13671[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13572 === 22) {
                                          var inst_13486 = state_13571[6];
                                          var inst_13489 = cljs.core.async.close_BANG_.call(null, inst_13486);
                                          var state_13571__$1 = state_13571;
                                          var statearr_13603_13672 = state_13571__$1;
                                          statearr_13603_13672[2] = inst_13489;
                                          statearr_13603_13672[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13572 === 36) {
                                            var inst_13534 = state_13571[15];
                                            var inst_13538 = cljs.core.chunk_first.call(null, inst_13534);
                                            var inst_13539 = cljs.core.chunk_rest.call(null, inst_13534);
                                            var inst_13540 = cljs.core.count.call(null, inst_13538);
                                            var inst_13514 = inst_13539;
                                            var inst_13515 = inst_13538;
                                            var inst_13516 = inst_13540;
                                            var inst_13517 = 0;
                                            var state_13571__$1 = function() {
                                              var statearr_13604 = state_13571;
                                              statearr_13604[7] = inst_13517;
                                              statearr_13604[16] = inst_13514;
                                              statearr_13604[8] = inst_13515;
                                              statearr_13604[18] = inst_13516;
                                              return statearr_13604;
                                            }();
                                            var statearr_13605_13673 = state_13571__$1;
                                            statearr_13605_13673[2] = null;
                                            statearr_13605_13673[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13572 === 41) {
                                              try {
                                                var inst_13543 = state_13571[23];
                                                var inst_13446 = state_13571[19];
                                                var inst_13549 = cljs.core.async.put_BANG_.call(null, inst_13543, inst_13446, done);
                                                var state_13571__$1 = state_13571;
                                                var statearr_13608_13674 = state_13571__$1;
                                                statearr_13608_13674[2] = inst_13549;
                                                statearr_13608_13674[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e13606) {
                                                if (e13606 instanceof Object) {
                                                  var ex__5706__auto__ = e13606;
                                                  var statearr_13607_13675 = state_13571;
                                                  statearr_13607_13675[1] = 40;
                                                  statearr_13607_13675[2] = ex__5706__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e13606;
                                                }
                                              }
                                            } else {
                                              if (state_val_13572 === 29) {
                                                var inst_13560 = state_13571[2];
                                                var state_13571__$1 = state_13571;
                                                var statearr_13609_13676 = state_13571__$1;
                                                statearr_13609_13676[2] = inst_13560;
                                                statearr_13609_13676[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13572 === 6) {
                                                  var inst_13505 = cljs.core.deref.call(null, cs);
                                                  var inst_13506 = cljs.core.keys.call(null, inst_13505);
                                                  var inst_13507 = cljs.core.count.call(null, inst_13506);
                                                  var inst_13508 = cljs.core.reset_BANG_.call(null, dctr, inst_13507);
                                                  var inst_13513 = cljs.core.seq.call(null, inst_13506);
                                                  var inst_13514 = inst_13513;
                                                  var inst_13515 = null;
                                                  var inst_13516 = 0;
                                                  var inst_13517 = 0;
                                                  var state_13571__$1 = function() {
                                                    var statearr_13610 = state_13571;
                                                    statearr_13610[27] = inst_13508;
                                                    statearr_13610[7] = inst_13517;
                                                    statearr_13610[16] = inst_13514;
                                                    statearr_13610[8] = inst_13515;
                                                    statearr_13610[18] = inst_13516;
                                                    return statearr_13610;
                                                  }();
                                                  var statearr_13611_13677 = state_13571__$1;
                                                  statearr_13611_13677[2] = null;
                                                  statearr_13611_13677[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13572 === 28) {
                                                    var inst_13534 = state_13571[15];
                                                    var inst_13514 = state_13571[16];
                                                    var inst_13534__$1 = cljs.core.seq.call(null, inst_13514);
                                                    var state_13571__$1 = function() {
                                                      var statearr_13612 = state_13571;
                                                      statearr_13612[15] = inst_13534__$1;
                                                      return statearr_13612;
                                                    }();
                                                    if (inst_13534__$1) {
                                                      var statearr_13613_13678 = state_13571__$1;
                                                      statearr_13613_13678[1] = 33;
                                                    } else {
                                                      var statearr_13614_13679 = state_13571__$1;
                                                      statearr_13614_13679[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13572 === 25) {
                                                      var inst_13517 = state_13571[7];
                                                      var inst_13516 = state_13571[18];
                                                      var inst_13519 = inst_13517 < inst_13516;
                                                      var inst_13520 = inst_13519;
                                                      var state_13571__$1 = state_13571;
                                                      if (cljs.core.truth_(inst_13520)) {
                                                        var statearr_13615_13680 = state_13571__$1;
                                                        statearr_13615_13680[1] = 27;
                                                      } else {
                                                        var statearr_13616_13681 = state_13571__$1;
                                                        statearr_13616_13681[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13572 === 34) {
                                                        var state_13571__$1 = state_13571;
                                                        var statearr_13617_13682 = state_13571__$1;
                                                        statearr_13617_13682[2] = null;
                                                        statearr_13617_13682[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13572 === 17) {
                                                          var state_13571__$1 = state_13571;
                                                          var statearr_13618_13683 = state_13571__$1;
                                                          statearr_13618_13683[2] = null;
                                                          statearr_13618_13683[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13572 === 3) {
                                                            var inst_13569 = state_13571[2];
                                                            var state_13571__$1 = state_13571;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13571__$1, inst_13569);
                                                          } else {
                                                            if (state_val_13572 === 12) {
                                                              var inst_13501 = state_13571[2];
                                                              var state_13571__$1 = state_13571;
                                                              var statearr_13619_13684 = state_13571__$1;
                                                              statearr_13619_13684[2] = inst_13501;
                                                              statearr_13619_13684[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13572 === 2) {
                                                                var state_13571__$1 = state_13571;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13571__$1, 4, ch);
                                                              } else {
                                                                if (state_val_13572 === 23) {
                                                                  var state_13571__$1 = state_13571;
                                                                  var statearr_13620_13685 = state_13571__$1;
                                                                  statearr_13620_13685[2] = null;
                                                                  statearr_13620_13685[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13572 === 35) {
                                                                    var inst_13558 = state_13571[2];
                                                                    var state_13571__$1 = state_13571;
                                                                    var statearr_13621_13686 = state_13571__$1;
                                                                    statearr_13621_13686[2] = inst_13558;
                                                                    statearr_13621_13686[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_13572 === 19) {
                                                                      var inst_13475 = state_13571[5];
                                                                      var inst_13479 = cljs.core.chunk_first.call(null, inst_13475);
                                                                      var inst_13480 = cljs.core.chunk_rest.call(null, inst_13475);
                                                                      var inst_13481 = cljs.core.count.call(null, inst_13479);
                                                                      var inst_13455 = inst_13480;
                                                                      var inst_13456 = inst_13479;
                                                                      var inst_13457 = inst_13481;
                                                                      var inst_13458 = 0;
                                                                      var state_13571__$1 = function() {
                                                                        var statearr_13622 = state_13571;
                                                                        statearr_13622[10] = inst_13456;
                                                                        statearr_13622[12] = inst_13455;
                                                                        statearr_13622[13] = inst_13457;
                                                                        statearr_13622[14] = inst_13458;
                                                                        return statearr_13622;
                                                                      }();
                                                                      var statearr_13623_13687 = state_13571__$1;
                                                                      statearr_13623_13687[2] = null;
                                                                      statearr_13623_13687[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13572 === 11) {
                                                                        var inst_13455 = state_13571[12];
                                                                        var inst_13475 = state_13571[5];
                                                                        var inst_13475__$1 = cljs.core.seq.call(null, inst_13455);
                                                                        var state_13571__$1 = function() {
                                                                          var statearr_13624 = state_13571;
                                                                          statearr_13624[5] = inst_13475__$1;
                                                                          return statearr_13624;
                                                                        }();
                                                                        if (inst_13475__$1) {
                                                                          var statearr_13625_13688 = state_13571__$1;
                                                                          statearr_13625_13688[1] = 16;
                                                                        } else {
                                                                          var statearr_13626_13689 = state_13571__$1;
                                                                          statearr_13626_13689[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13572 === 9) {
                                                                          var inst_13503 = state_13571[2];
                                                                          var state_13571__$1 = state_13571;
                                                                          var statearr_13627_13690 = state_13571__$1;
                                                                          statearr_13627_13690[2] = inst_13503;
                                                                          statearr_13627_13690[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13572 === 5) {
                                                                            var inst_13453 = cljs.core.deref.call(null, cs);
                                                                            var inst_13454 = cljs.core.seq.call(null, inst_13453);
                                                                            var inst_13455 = inst_13454;
                                                                            var inst_13456 = null;
                                                                            var inst_13457 = 0;
                                                                            var inst_13458 = 0;
                                                                            var state_13571__$1 = function() {
                                                                              var statearr_13628 = state_13571;
                                                                              statearr_13628[10] = inst_13456;
                                                                              statearr_13628[12] = inst_13455;
                                                                              statearr_13628[13] = inst_13457;
                                                                              statearr_13628[14] = inst_13458;
                                                                              return statearr_13628;
                                                                            }();
                                                                            var statearr_13629_13691 = state_13571__$1;
                                                                            statearr_13629_13691[2] = null;
                                                                            statearr_13629_13691[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13572 === 14) {
                                                                              var state_13571__$1 = state_13571;
                                                                              var statearr_13630_13692 = state_13571__$1;
                                                                              statearr_13630_13692[2] = null;
                                                                              statearr_13630_13692[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13572 === 26) {
                                                                                var inst_13562 = state_13571[2];
                                                                                var state_13571__$1 = function() {
                                                                                  var statearr_13631 = state_13571;
                                                                                  statearr_13631[28] = inst_13562;
                                                                                  return statearr_13631;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13571__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_13572 === 16) {
                                                                                  var inst_13475 = state_13571[5];
                                                                                  var inst_13477 = cljs.core.chunked_seq_QMARK_.call(null, inst_13475);
                                                                                  var state_13571__$1 = state_13571;
                                                                                  if (inst_13477) {
                                                                                    var statearr_13635_13693 = state_13571__$1;
                                                                                    statearr_13635_13693[1] = 19;
                                                                                  } else {
                                                                                    var statearr_13636_13694 = state_13571__$1;
                                                                                    statearr_13636_13694[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13572 === 38) {
                                                                                    var inst_13555 = state_13571[2];
                                                                                    var state_13571__$1 = state_13571;
                                                                                    var statearr_13637_13695 = state_13571__$1;
                                                                                    statearr_13637_13695[2] = inst_13555;
                                                                                    statearr_13637_13695[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13572 === 30) {
                                                                                      var inst_13517 = state_13571[7];
                                                                                      var inst_13514 = state_13571[16];
                                                                                      var inst_13515 = state_13571[8];
                                                                                      var inst_13516 = state_13571[18];
                                                                                      var inst_13530 = state_13571[2];
                                                                                      var inst_13531 = inst_13517 + 1;
                                                                                      var tmp13632 = inst_13514;
                                                                                      var tmp13633 = inst_13515;
                                                                                      var tmp13634 = inst_13516;
                                                                                      var inst_13514__$1 = tmp13632;
                                                                                      var inst_13515__$1 = tmp13633;
                                                                                      var inst_13516__$1 = tmp13634;
                                                                                      var inst_13517__$1 = inst_13531;
                                                                                      var state_13571__$1 = function() {
                                                                                        var statearr_13638 = state_13571;
                                                                                        statearr_13638[7] = inst_13517__$1;
                                                                                        statearr_13638[16] = inst_13514__$1;
                                                                                        statearr_13638[8] = inst_13515__$1;
                                                                                        statearr_13638[18] = inst_13516__$1;
                                                                                        statearr_13638[29] = inst_13530;
                                                                                        return statearr_13638;
                                                                                      }();
                                                                                      var statearr_13639_13696 = state_13571__$1;
                                                                                      statearr_13639_13696[2] = null;
                                                                                      statearr_13639_13696[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13572 === 10) {
                                                                                        var inst_13456 = state_13571[10];
                                                                                        var inst_13458 = state_13571[14];
                                                                                        var inst_13464 = cljs.core._nth.call(null, inst_13456, inst_13458);
                                                                                        var inst_13465 = cljs.core.nth.call(null, inst_13464, 0, null);
                                                                                        var inst_13466 = cljs.core.nth.call(null, inst_13464, 1, null);
                                                                                        var state_13571__$1 = function() {
                                                                                          var statearr_13640 = state_13571;
                                                                                          statearr_13640[26] = inst_13465;
                                                                                          return statearr_13640;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_13466)) {
                                                                                          var statearr_13641_13697 = state_13571__$1;
                                                                                          statearr_13641_13697[1] = 13;
                                                                                        } else {
                                                                                          var statearr_13642_13698 = state_13571__$1;
                                                                                          statearr_13642_13698[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13572 === 18) {
                                                                                          var inst_13499 = state_13571[2];
                                                                                          var state_13571__$1 = state_13571;
                                                                                          var statearr_13643_13699 = state_13571__$1;
                                                                                          statearr_13643_13699[2] = inst_13499;
                                                                                          statearr_13643_13699[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13572 === 42) {
                                                                                            var inst_13564 = state_13571[2];
                                                                                            var state_13571__$1 = function() {
                                                                                              var statearr_13644 = state_13571;
                                                                                              statearr_13644[30] = inst_13564;
                                                                                              return statearr_13644;
                                                                                            }();
                                                                                            var statearr_13645_13700 = state_13571__$1;
                                                                                            statearr_13645_13700[2] = null;
                                                                                            statearr_13645_13700[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13572 === 37) {
                                                                                              var inst_13534 = state_13571[15];
                                                                                              var inst_13543 = cljs.core.first.call(null, inst_13534);
                                                                                              var state_13571__$1 = function() {
                                                                                                var statearr_13646 = state_13571;
                                                                                                statearr_13646[23] = inst_13543;
                                                                                                return statearr_13646;
                                                                                              }();
                                                                                              var statearr_13647_13701 = state_13571__$1;
                                                                                              statearr_13647_13701[2] = null;
                                                                                              statearr_13647_13701[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13572 === 8) {
                                                                                                var inst_13457 = state_13571[13];
                                                                                                var inst_13458 = state_13571[14];
                                                                                                var inst_13460 = inst_13458 < inst_13457;
                                                                                                var inst_13461 = inst_13460;
                                                                                                var state_13571__$1 = state_13571;
                                                                                                if (cljs.core.truth_(inst_13461)) {
                                                                                                  var statearr_13648_13702 = state_13571__$1;
                                                                                                  statearr_13648_13702[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_13649_13703 = state_13571__$1;
                                                                                                  statearr_13649_13703[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto___13653, cs, m, dchan, dctr, done);
        return function(switch__5712__auto__, c__5725__auto___13653, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_13651 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13651[0] = state_machine__5713__auto__;
              statearr_13651[1] = 1;
              return statearr_13651;
            };
            var state_machine__5713__auto____1 = function(state_13571) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_13571);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_13571) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_13571);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto___13653, cs, m, dchan, dctr, done);
      }();
      var state__5727__auto__ = function() {
        var statearr_13652 = f__5726__auto__.call(null);
        statearr_13652[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___13653;
        return statearr_13652;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto___13653, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj13705 = {};
  return obj13705;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t13811 !== "undefined") {
    } else {
      cljs.core.async.t13811 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta13812) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta13812 = meta13812;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13811.cljs$lang$type = true;
      cljs.core.async.t13811.cljs$lang$ctorStr = "cljs.core.async/t13811";
      cljs.core.async.t13811.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13811");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13811.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13813) {
          var self__ = this;
          var _13813__$1 = this;
          return self__.meta13812;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13811.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13813, meta13812__$1) {
          var self__ = this;
          var _13813__$1 = this;
          return new cljs.core.async.t13811(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta13812__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t13811 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t13811(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13812) {
          return new cljs.core.async.t13811(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13812);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t13811(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__5725__auto___13916 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_13878) {
            var state_val_13879 = state_13878[1];
            if (state_val_13879 === 7) {
              var inst_13827 = state_13878[5];
              var inst_13832 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13827);
              var state_13878__$1 = state_13878;
              var statearr_13880_13917 = state_13878__$1;
              statearr_13880_13917[2] = inst_13832;
              statearr_13880_13917[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13879 === 20) {
                var inst_13842 = state_13878[6];
                var state_13878__$1 = state_13878;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13878__$1, 23, out, inst_13842);
              } else {
                if (state_val_13879 === 1) {
                  var inst_13817 = state_13878[7];
                  var inst_13817__$1 = calc_state.call(null);
                  var inst_13818 = cljs.core.seq_QMARK_.call(null, inst_13817__$1);
                  var state_13878__$1 = function() {
                    var statearr_13881 = state_13878;
                    statearr_13881[7] = inst_13817__$1;
                    return statearr_13881;
                  }();
                  if (inst_13818) {
                    var statearr_13882_13918 = state_13878__$1;
                    statearr_13882_13918[1] = 2;
                  } else {
                    var statearr_13883_13919 = state_13878__$1;
                    statearr_13883_13919[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13879 === 4) {
                    var inst_13817 = state_13878[7];
                    var inst_13823 = state_13878[2];
                    var inst_13824 = cljs.core.get.call(null, inst_13823, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_13825 = cljs.core.get.call(null, inst_13823, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_13826 = cljs.core.get.call(null, inst_13823, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_13827 = inst_13817;
                    var state_13878__$1 = function() {
                      var statearr_13884 = state_13878;
                      statearr_13884[5] = inst_13827;
                      statearr_13884[8] = inst_13825;
                      statearr_13884[9] = inst_13824;
                      statearr_13884[10] = inst_13826;
                      return statearr_13884;
                    }();
                    var statearr_13885_13920 = state_13878__$1;
                    statearr_13885_13920[2] = null;
                    statearr_13885_13920[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13879 === 15) {
                      var state_13878__$1 = state_13878;
                      var statearr_13886_13921 = state_13878__$1;
                      statearr_13886_13921[2] = null;
                      statearr_13886_13921[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13879 === 21) {
                        var state_13878__$1 = state_13878;
                        var statearr_13887_13922 = state_13878__$1;
                        statearr_13887_13922[2] = null;
                        statearr_13887_13922[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13879 === 13) {
                          var inst_13874 = state_13878[2];
                          var state_13878__$1 = state_13878;
                          var statearr_13888_13923 = state_13878__$1;
                          statearr_13888_13923[2] = inst_13874;
                          statearr_13888_13923[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13879 === 22) {
                            var inst_13835 = state_13878[11];
                            var inst_13871 = state_13878[2];
                            var inst_13827 = inst_13835;
                            var state_13878__$1 = function() {
                              var statearr_13889 = state_13878;
                              statearr_13889[5] = inst_13827;
                              statearr_13889[12] = inst_13871;
                              return statearr_13889;
                            }();
                            var statearr_13890_13924 = state_13878__$1;
                            statearr_13890_13924[2] = null;
                            statearr_13890_13924[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13879 === 6) {
                              var inst_13876 = state_13878[2];
                              var state_13878__$1 = state_13878;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13878__$1, inst_13876);
                            } else {
                              if (state_val_13879 === 17) {
                                var inst_13857 = state_13878[13];
                                var state_13878__$1 = state_13878;
                                var statearr_13891_13925 = state_13878__$1;
                                statearr_13891_13925[2] = inst_13857;
                                statearr_13891_13925[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13879 === 3) {
                                  var inst_13817 = state_13878[7];
                                  var state_13878__$1 = state_13878;
                                  var statearr_13892_13926 = state_13878__$1;
                                  statearr_13892_13926[2] = inst_13817;
                                  statearr_13892_13926[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13879 === 12) {
                                    var inst_13857 = state_13878[13];
                                    var inst_13838 = state_13878[14];
                                    var inst_13843 = state_13878[15];
                                    var inst_13857__$1 = inst_13838.call(null, inst_13843);
                                    var state_13878__$1 = function() {
                                      var statearr_13893 = state_13878;
                                      statearr_13893[13] = inst_13857__$1;
                                      return statearr_13893;
                                    }();
                                    if (cljs.core.truth_(inst_13857__$1)) {
                                      var statearr_13894_13927 = state_13878__$1;
                                      statearr_13894_13927[1] = 17;
                                    } else {
                                      var statearr_13895_13928 = state_13878__$1;
                                      statearr_13895_13928[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13879 === 2) {
                                      var inst_13817 = state_13878[7];
                                      var inst_13820 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13817);
                                      var state_13878__$1 = state_13878;
                                      var statearr_13896_13929 = state_13878__$1;
                                      statearr_13896_13929[2] = inst_13820;
                                      statearr_13896_13929[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13879 === 23) {
                                        var inst_13868 = state_13878[2];
                                        var state_13878__$1 = state_13878;
                                        var statearr_13897_13930 = state_13878__$1;
                                        statearr_13897_13930[2] = inst_13868;
                                        statearr_13897_13930[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13879 === 19) {
                                          var inst_13865 = state_13878[2];
                                          var state_13878__$1 = state_13878;
                                          if (cljs.core.truth_(inst_13865)) {
                                            var statearr_13898_13931 = state_13878__$1;
                                            statearr_13898_13931[1] = 20;
                                          } else {
                                            var statearr_13899_13932 = state_13878__$1;
                                            statearr_13899_13932[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13879 === 11) {
                                            var inst_13842 = state_13878[6];
                                            var inst_13848 = inst_13842 == null;
                                            var state_13878__$1 = state_13878;
                                            if (cljs.core.truth_(inst_13848)) {
                                              var statearr_13900_13933 = state_13878__$1;
                                              statearr_13900_13933[1] = 14;
                                            } else {
                                              var statearr_13901_13934 = state_13878__$1;
                                              statearr_13901_13934[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13879 === 9) {
                                              var inst_13835 = state_13878[11];
                                              var inst_13835__$1 = state_13878[2];
                                              var inst_13836 = cljs.core.get.call(null, inst_13835__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_13837 = cljs.core.get.call(null, inst_13835__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_13838 = cljs.core.get.call(null, inst_13835__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_13878__$1 = function() {
                                                var statearr_13902 = state_13878;
                                                statearr_13902[16] = inst_13837;
                                                statearr_13902[14] = inst_13838;
                                                statearr_13902[11] = inst_13835__$1;
                                                return statearr_13902;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_13878__$1, 10, inst_13836);
                                            } else {
                                              if (state_val_13879 === 5) {
                                                var inst_13827 = state_13878[5];
                                                var inst_13830 = cljs.core.seq_QMARK_.call(null, inst_13827);
                                                var state_13878__$1 = state_13878;
                                                if (inst_13830) {
                                                  var statearr_13903_13935 = state_13878__$1;
                                                  statearr_13903_13935[1] = 7;
                                                } else {
                                                  var statearr_13904_13936 = state_13878__$1;
                                                  statearr_13904_13936[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13879 === 14) {
                                                  var inst_13843 = state_13878[15];
                                                  var inst_13850 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_13843);
                                                  var state_13878__$1 = state_13878;
                                                  var statearr_13905_13937 = state_13878__$1;
                                                  statearr_13905_13937[2] = inst_13850;
                                                  statearr_13905_13937[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13879 === 16) {
                                                    var inst_13853 = state_13878[2];
                                                    var inst_13854 = calc_state.call(null);
                                                    var inst_13827 = inst_13854;
                                                    var state_13878__$1 = function() {
                                                      var statearr_13906 = state_13878;
                                                      statearr_13906[17] = inst_13853;
                                                      statearr_13906[5] = inst_13827;
                                                      return statearr_13906;
                                                    }();
                                                    var statearr_13907_13938 = state_13878__$1;
                                                    statearr_13907_13938[2] = null;
                                                    statearr_13907_13938[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13879 === 10) {
                                                      var inst_13843 = state_13878[15];
                                                      var inst_13842 = state_13878[6];
                                                      var inst_13841 = state_13878[2];
                                                      var inst_13842__$1 = cljs.core.nth.call(null, inst_13841, 0, null);
                                                      var inst_13843__$1 = cljs.core.nth.call(null, inst_13841, 1, null);
                                                      var inst_13844 = inst_13842__$1 == null;
                                                      var inst_13845 = cljs.core._EQ_.call(null, inst_13843__$1, change);
                                                      var inst_13846 = inst_13844 || inst_13845;
                                                      var state_13878__$1 = function() {
                                                        var statearr_13908 = state_13878;
                                                        statearr_13908[15] = inst_13843__$1;
                                                        statearr_13908[6] = inst_13842__$1;
                                                        return statearr_13908;
                                                      }();
                                                      if (cljs.core.truth_(inst_13846)) {
                                                        var statearr_13909_13939 = state_13878__$1;
                                                        statearr_13909_13939[1] = 11;
                                                      } else {
                                                        var statearr_13910_13940 = state_13878__$1;
                                                        statearr_13910_13940[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13879 === 18) {
                                                        var inst_13837 = state_13878[16];
                                                        var inst_13838 = state_13878[14];
                                                        var inst_13843 = state_13878[15];
                                                        var inst_13860 = cljs.core.empty_QMARK_.call(null, inst_13838);
                                                        var inst_13861 = inst_13837.call(null, inst_13843);
                                                        var inst_13862 = cljs.core.not.call(null, inst_13861);
                                                        var inst_13863 = inst_13860 && inst_13862;
                                                        var state_13878__$1 = state_13878;
                                                        var statearr_13911_13941 = state_13878__$1;
                                                        statearr_13911_13941[2] = inst_13863;
                                                        statearr_13911_13941[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13879 === 8) {
                                                          var inst_13827 = state_13878[5];
                                                          var state_13878__$1 = state_13878;
                                                          var statearr_13912_13942 = state_13878__$1;
                                                          statearr_13912_13942[2] = inst_13827;
                                                          statearr_13912_13942[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__5712__auto__, c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_13914 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13914[0] = state_machine__5713__auto__;
              statearr_13914[1] = 1;
              return statearr_13914;
            };
            var state_machine__5713__auto____1 = function(state_13878) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_13878);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_13878) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_13878);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__5727__auto__ = function() {
        var statearr_13915 = f__5726__auto__.call(null);
        statearr_13915[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___13916;
        return statearr_13915;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto___13916, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj13944 = {};
  return obj13944;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3648__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3648__auto__, mults) {
            return function(p1__13945_SHARP_) {
              if (cljs.core.truth_(p1__13945_SHARP_.call(null, topic))) {
                return p1__13945_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__13945_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3648__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t14069 !== "undefined") {
      } else {
        cljs.core.async.t14069 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta14070) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta14070 = meta14070;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t14069.cljs$lang$type = true;
        cljs.core.async.t14069.cljs$lang$ctorStr = "cljs.core.async/t14069";
        cljs.core.async.t14069.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
            return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t14069");
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t14069.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t14069.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_14071) {
            var self__ = this;
            var _14071__$1 = this;
            return self__.meta14070;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14069.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_14071, meta14070__$1) {
            var self__ = this;
            var _14071__$1 = this;
            return new cljs.core.async.t14069(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta14070__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t14069 = function(mults, ensure_mult) {
          return function __GT_t14069(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14070) {
            return new cljs.core.async.t14069(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14070);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t14069(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5725__auto___14192 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___14192, mults, ensure_mult, p) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___14192, mults, ensure_mult, p) {
            return function(state_14144) {
              var state_val_14145 = state_14144[1];
              if (state_val_14145 === 7) {
                var inst_14140 = state_14144[2];
                var state_14144__$1 = state_14144;
                var statearr_14146_14193 = state_14144__$1;
                statearr_14146_14193[2] = inst_14140;
                statearr_14146_14193[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14145 === 20) {
                  var state_14144__$1 = state_14144;
                  var statearr_14147_14194 = state_14144__$1;
                  statearr_14147_14194[2] = null;
                  statearr_14147_14194[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14145 === 1) {
                    var state_14144__$1 = state_14144;
                    var statearr_14148_14195 = state_14144__$1;
                    statearr_14148_14195[2] = null;
                    statearr_14148_14195[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14145 === 24) {
                      try {
                        var inst_14074 = state_14144[5];
                        var inst_14124 = state_14144[6];
                        var inst_14130 = cljs.core.async.muxch_STAR_.call(null, inst_14124);
                        var state_14144__$1 = state_14144;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14144__$1, 25, inst_14130, inst_14074);
                      } catch (e14149) {
                        if (e14149 instanceof Object) {
                          var ex__5706__auto__ = e14149;
                          var statearr_14150_14196 = state_14144;
                          statearr_14150_14196[1] = 23;
                          statearr_14150_14196[2] = ex__5706__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e14149;
                        }
                      }
                    } else {
                      if (state_val_14145 === 4) {
                        var inst_14074 = state_14144[5];
                        var inst_14074__$1 = state_14144[2];
                        var inst_14075 = inst_14074__$1 == null;
                        var state_14144__$1 = function() {
                          var statearr_14151 = state_14144;
                          statearr_14151[5] = inst_14074__$1;
                          return statearr_14151;
                        }();
                        if (cljs.core.truth_(inst_14075)) {
                          var statearr_14152_14197 = state_14144__$1;
                          statearr_14152_14197[1] = 5;
                        } else {
                          var statearr_14153_14198 = state_14144__$1;
                          statearr_14153_14198[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14145 === 15) {
                          var inst_14116 = state_14144[2];
                          var state_14144__$1 = state_14144;
                          var statearr_14154_14199 = state_14144__$1;
                          statearr_14154_14199[2] = inst_14116;
                          statearr_14154_14199[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14145 === 21) {
                            var inst_14137 = state_14144[2];
                            var state_14144__$1 = function() {
                              var statearr_14155 = state_14144;
                              statearr_14155[7] = inst_14137;
                              return statearr_14155;
                            }();
                            var statearr_14156_14200 = state_14144__$1;
                            statearr_14156_14200[2] = null;
                            statearr_14156_14200[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14145 === 13) {
                              var inst_14098 = state_14144[8];
                              var inst_14100 = cljs.core.chunked_seq_QMARK_.call(null, inst_14098);
                              var state_14144__$1 = state_14144;
                              if (inst_14100) {
                                var statearr_14157_14201 = state_14144__$1;
                                statearr_14157_14201[1] = 16;
                              } else {
                                var statearr_14158_14202 = state_14144__$1;
                                statearr_14158_14202[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14145 === 22) {
                                var inst_14134 = state_14144[2];
                                var state_14144__$1 = state_14144;
                                var statearr_14159_14203 = state_14144__$1;
                                statearr_14159_14203[2] = inst_14134;
                                statearr_14159_14203[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14145 === 6) {
                                  var inst_14122 = state_14144[9];
                                  var inst_14074 = state_14144[5];
                                  var inst_14124 = state_14144[6];
                                  var inst_14122__$1 = topic_fn.call(null, inst_14074);
                                  var inst_14123 = cljs.core.deref.call(null, mults);
                                  var inst_14124__$1 = cljs.core.get.call(null, inst_14123, inst_14122__$1);
                                  var state_14144__$1 = function() {
                                    var statearr_14160 = state_14144;
                                    statearr_14160[9] = inst_14122__$1;
                                    statearr_14160[6] = inst_14124__$1;
                                    return statearr_14160;
                                  }();
                                  if (cljs.core.truth_(inst_14124__$1)) {
                                    var statearr_14161_14204 = state_14144__$1;
                                    statearr_14161_14204[1] = 19;
                                  } else {
                                    var statearr_14162_14205 = state_14144__$1;
                                    statearr_14162_14205[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14145 === 25) {
                                    try {
                                      var inst_14132 = state_14144[2];
                                      var state_14144__$1 = state_14144;
                                      var statearr_14165_14206 = state_14144__$1;
                                      statearr_14165_14206[2] = inst_14132;
                                      statearr_14165_14206[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e14163) {
                                      if (e14163 instanceof Object) {
                                        var ex__5706__auto__ = e14163;
                                        var statearr_14164_14207 = state_14144;
                                        statearr_14164_14207[1] = 23;
                                        statearr_14164_14207[2] = ex__5706__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e14163;
                                      }
                                    }
                                  } else {
                                    if (state_val_14145 === 17) {
                                      var inst_14098 = state_14144[8];
                                      var inst_14107 = cljs.core.first.call(null, inst_14098);
                                      var inst_14108 = cljs.core.async.muxch_STAR_.call(null, inst_14107);
                                      var inst_14109 = cljs.core.async.close_BANG_.call(null, inst_14108);
                                      var inst_14110 = cljs.core.next.call(null, inst_14098);
                                      var inst_14084 = inst_14110;
                                      var inst_14085 = null;
                                      var inst_14086 = 0;
                                      var inst_14087 = 0;
                                      var state_14144__$1 = function() {
                                        var statearr_14166 = state_14144;
                                        statearr_14166[10] = inst_14085;
                                        statearr_14166[11] = inst_14086;
                                        statearr_14166[12] = inst_14084;
                                        statearr_14166[13] = inst_14109;
                                        statearr_14166[14] = inst_14087;
                                        return statearr_14166;
                                      }();
                                      var statearr_14167_14208 = state_14144__$1;
                                      statearr_14167_14208[2] = null;
                                      statearr_14167_14208[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14145 === 3) {
                                        var inst_14142 = state_14144[2];
                                        var state_14144__$1 = state_14144;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14144__$1, inst_14142);
                                      } else {
                                        if (state_val_14145 === 12) {
                                          var inst_14118 = state_14144[2];
                                          var state_14144__$1 = state_14144;
                                          var statearr_14168_14209 = state_14144__$1;
                                          statearr_14168_14209[2] = inst_14118;
                                          statearr_14168_14209[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14145 === 2) {
                                            var state_14144__$1 = state_14144;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14144__$1, 4, ch);
                                          } else {
                                            if (state_val_14145 === 23) {
                                              var inst_14122 = state_14144[9];
                                              var inst_14126 = state_14144[2];
                                              var inst_14127 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_14122);
                                              var state_14144__$1 = function() {
                                                var statearr_14169 = state_14144;
                                                statearr_14169[15] = inst_14126;
                                                return statearr_14169;
                                              }();
                                              var statearr_14170_14210 = state_14144__$1;
                                              statearr_14170_14210[2] = inst_14127;
                                              statearr_14170_14210[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14145 === 19) {
                                                var state_14144__$1 = state_14144;
                                                var statearr_14171_14211 = state_14144__$1;
                                                statearr_14171_14211[2] = null;
                                                statearr_14171_14211[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14145 === 11) {
                                                  var inst_14098 = state_14144[8];
                                                  var inst_14084 = state_14144[12];
                                                  var inst_14098__$1 = cljs.core.seq.call(null, inst_14084);
                                                  var state_14144__$1 = function() {
                                                    var statearr_14172 = state_14144;
                                                    statearr_14172[8] = inst_14098__$1;
                                                    return statearr_14172;
                                                  }();
                                                  if (inst_14098__$1) {
                                                    var statearr_14173_14212 = state_14144__$1;
                                                    statearr_14173_14212[1] = 13;
                                                  } else {
                                                    var statearr_14174_14213 = state_14144__$1;
                                                    statearr_14174_14213[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14145 === 9) {
                                                    var inst_14120 = state_14144[2];
                                                    var state_14144__$1 = state_14144;
                                                    var statearr_14175_14214 = state_14144__$1;
                                                    statearr_14175_14214[2] = inst_14120;
                                                    statearr_14175_14214[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14145 === 5) {
                                                      var inst_14081 = cljs.core.deref.call(null, mults);
                                                      var inst_14082 = cljs.core.vals.call(null, inst_14081);
                                                      var inst_14083 = cljs.core.seq.call(null, inst_14082);
                                                      var inst_14084 = inst_14083;
                                                      var inst_14085 = null;
                                                      var inst_14086 = 0;
                                                      var inst_14087 = 0;
                                                      var state_14144__$1 = function() {
                                                        var statearr_14176 = state_14144;
                                                        statearr_14176[10] = inst_14085;
                                                        statearr_14176[11] = inst_14086;
                                                        statearr_14176[12] = inst_14084;
                                                        statearr_14176[14] = inst_14087;
                                                        return statearr_14176;
                                                      }();
                                                      var statearr_14177_14215 = state_14144__$1;
                                                      statearr_14177_14215[2] = null;
                                                      statearr_14177_14215[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14145 === 14) {
                                                        var state_14144__$1 = state_14144;
                                                        var statearr_14181_14216 = state_14144__$1;
                                                        statearr_14181_14216[2] = null;
                                                        statearr_14181_14216[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14145 === 16) {
                                                          var inst_14098 = state_14144[8];
                                                          var inst_14102 = cljs.core.chunk_first.call(null, inst_14098);
                                                          var inst_14103 = cljs.core.chunk_rest.call(null, inst_14098);
                                                          var inst_14104 = cljs.core.count.call(null, inst_14102);
                                                          var inst_14084 = inst_14103;
                                                          var inst_14085 = inst_14102;
                                                          var inst_14086 = inst_14104;
                                                          var inst_14087 = 0;
                                                          var state_14144__$1 = function() {
                                                            var statearr_14182 = state_14144;
                                                            statearr_14182[10] = inst_14085;
                                                            statearr_14182[11] = inst_14086;
                                                            statearr_14182[12] = inst_14084;
                                                            statearr_14182[14] = inst_14087;
                                                            return statearr_14182;
                                                          }();
                                                          var statearr_14183_14217 = state_14144__$1;
                                                          statearr_14183_14217[2] = null;
                                                          statearr_14183_14217[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14145 === 10) {
                                                            var inst_14085 = state_14144[10];
                                                            var inst_14086 = state_14144[11];
                                                            var inst_14084 = state_14144[12];
                                                            var inst_14087 = state_14144[14];
                                                            var inst_14092 = cljs.core._nth.call(null, inst_14085, inst_14087);
                                                            var inst_14093 = cljs.core.async.muxch_STAR_.call(null, inst_14092);
                                                            var inst_14094 = cljs.core.async.close_BANG_.call(null, inst_14093);
                                                            var inst_14095 = inst_14087 + 1;
                                                            var tmp14178 = inst_14085;
                                                            var tmp14179 = inst_14086;
                                                            var tmp14180 = inst_14084;
                                                            var inst_14084__$1 = tmp14180;
                                                            var inst_14085__$1 = tmp14178;
                                                            var inst_14086__$1 = tmp14179;
                                                            var inst_14087__$1 = inst_14095;
                                                            var state_14144__$1 = function() {
                                                              var statearr_14184 = state_14144;
                                                              statearr_14184[10] = inst_14085__$1;
                                                              statearr_14184[11] = inst_14086__$1;
                                                              statearr_14184[12] = inst_14084__$1;
                                                              statearr_14184[14] = inst_14087__$1;
                                                              statearr_14184[16] = inst_14094;
                                                              return statearr_14184;
                                                            }();
                                                            var statearr_14185_14218 = state_14144__$1;
                                                            statearr_14185_14218[2] = null;
                                                            statearr_14185_14218[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14145 === 18) {
                                                              var inst_14113 = state_14144[2];
                                                              var state_14144__$1 = state_14144;
                                                              var statearr_14186_14219 = state_14144__$1;
                                                              statearr_14186_14219[2] = inst_14113;
                                                              statearr_14186_14219[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14145 === 8) {
                                                                var inst_14086 = state_14144[11];
                                                                var inst_14087 = state_14144[14];
                                                                var inst_14089 = inst_14087 < inst_14086;
                                                                var inst_14090 = inst_14089;
                                                                var state_14144__$1 = state_14144;
                                                                if (cljs.core.truth_(inst_14090)) {
                                                                  var statearr_14187_14220 = state_14144__$1;
                                                                  statearr_14187_14220[1] = 10;
                                                                } else {
                                                                  var statearr_14188_14221 = state_14144__$1;
                                                                  statearr_14188_14221[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___14192, mults, ensure_mult, p);
          return function(switch__5712__auto__, c__5725__auto___14192, mults, ensure_mult, p) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_14190 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14190[0] = state_machine__5713__auto__;
                statearr_14190[1] = 1;
                return statearr_14190;
              };
              var state_machine__5713__auto____1 = function(state_14144) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_14144);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_14144) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_14144);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___14192, mults, ensure_mult, p);
        }();
        var state__5727__auto__ = function() {
          var statearr_14191 = f__5726__auto__.call(null);
          statearr_14191[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___14192;
          return statearr_14191;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___14192, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5725__auto___14352 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_14324) {
              var state_val_14325 = state_14324[1];
              if (state_val_14325 === 7) {
                var state_14324__$1 = state_14324;
                var statearr_14326_14353 = state_14324__$1;
                statearr_14326_14353[2] = null;
                statearr_14326_14353[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14325 === 1) {
                  var state_14324__$1 = state_14324;
                  var statearr_14327_14354 = state_14324__$1;
                  statearr_14327_14354[2] = null;
                  statearr_14327_14354[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14325 === 4) {
                    var inst_14289 = state_14324[5];
                    var inst_14291 = inst_14289 < cnt;
                    var state_14324__$1 = state_14324;
                    if (cljs.core.truth_(inst_14291)) {
                      var statearr_14328_14355 = state_14324__$1;
                      statearr_14328_14355[1] = 6;
                    } else {
                      var statearr_14329_14356 = state_14324__$1;
                      statearr_14329_14356[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14325 === 15) {
                      var inst_14320 = state_14324[2];
                      var state_14324__$1 = state_14324;
                      var statearr_14330_14357 = state_14324__$1;
                      statearr_14330_14357[2] = inst_14320;
                      statearr_14330_14357[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14325 === 13) {
                        var inst_14313 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14324__$1 = state_14324;
                        var statearr_14331_14358 = state_14324__$1;
                        statearr_14331_14358[2] = inst_14313;
                        statearr_14331_14358[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14325 === 6) {
                          var state_14324__$1 = state_14324;
                          var statearr_14332_14359 = state_14324__$1;
                          statearr_14332_14359[2] = null;
                          statearr_14332_14359[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14325 === 3) {
                            var inst_14322 = state_14324[2];
                            var state_14324__$1 = state_14324;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14324__$1, inst_14322);
                          } else {
                            if (state_val_14325 === 12) {
                              var inst_14310 = state_14324[6];
                              var inst_14310__$1 = state_14324[2];
                              var inst_14311 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14310__$1);
                              var state_14324__$1 = function() {
                                var statearr_14333 = state_14324;
                                statearr_14333[6] = inst_14310__$1;
                                return statearr_14333;
                              }();
                              if (cljs.core.truth_(inst_14311)) {
                                var statearr_14334_14360 = state_14324__$1;
                                statearr_14334_14360[1] = 13;
                              } else {
                                var statearr_14335_14361 = state_14324__$1;
                                statearr_14335_14361[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14325 === 2) {
                                var inst_14288 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_14289 = 0;
                                var state_14324__$1 = function() {
                                  var statearr_14336 = state_14324;
                                  statearr_14336[5] = inst_14289;
                                  statearr_14336[7] = inst_14288;
                                  return statearr_14336;
                                }();
                                var statearr_14337_14362 = state_14324__$1;
                                statearr_14337_14362[2] = null;
                                statearr_14337_14362[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14325 === 11) {
                                  try {
                                    var inst_14289 = state_14324[5];
                                    var inst_14297 = chs__$1.call(null, inst_14289);
                                    var inst_14298 = done.call(null, inst_14289);
                                    var inst_14299 = cljs.core.async.take_BANG_.call(null, inst_14297, inst_14298);
                                    var state_14324__$1 = state_14324;
                                    var statearr_14340_14363 = state_14324__$1;
                                    statearr_14340_14363[2] = inst_14299;
                                    statearr_14340_14363[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e14338) {
                                    if (e14338 instanceof Object) {
                                      var ex__5706__auto__ = e14338;
                                      var statearr_14339_14364 = state_14324;
                                      statearr_14339_14364[1] = 10;
                                      statearr_14339_14364[2] = ex__5706__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e14338;
                                    }
                                  }
                                } else {
                                  if (state_val_14325 === 9) {
                                    var inst_14289 = state_14324[5];
                                    var inst_14301 = state_14324[2];
                                    var inst_14302 = inst_14289 + 1;
                                    var inst_14289__$1 = inst_14302;
                                    var state_14324__$1 = function() {
                                      var statearr_14341 = state_14324;
                                      statearr_14341[8] = inst_14301;
                                      statearr_14341[5] = inst_14289__$1;
                                      return statearr_14341;
                                    }();
                                    var statearr_14342_14365 = state_14324__$1;
                                    statearr_14342_14365[2] = null;
                                    statearr_14342_14365[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14325 === 5) {
                                      var inst_14308 = state_14324[2];
                                      var state_14324__$1 = function() {
                                        var statearr_14343 = state_14324;
                                        statearr_14343[9] = inst_14308;
                                        return statearr_14343;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14324__$1, 12, dchan);
                                    } else {
                                      if (state_val_14325 === 14) {
                                        var inst_14310 = state_14324[6];
                                        var inst_14315 = cljs.core.apply.call(null, f, inst_14310);
                                        var state_14324__$1 = state_14324;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14324__$1, 16, out, inst_14315);
                                      } else {
                                        if (state_val_14325 === 16) {
                                          var inst_14317 = state_14324[2];
                                          var state_14324__$1 = function() {
                                            var statearr_14344 = state_14324;
                                            statearr_14344[10] = inst_14317;
                                            return statearr_14344;
                                          }();
                                          var statearr_14345_14366 = state_14324__$1;
                                          statearr_14345_14366[2] = null;
                                          statearr_14345_14366[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14325 === 10) {
                                            var inst_14293 = state_14324[2];
                                            var inst_14294 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_14324__$1 = function() {
                                              var statearr_14346 = state_14324;
                                              statearr_14346[11] = inst_14293;
                                              return statearr_14346;
                                            }();
                                            var statearr_14347_14367 = state_14324__$1;
                                            statearr_14347_14367[2] = inst_14294;
                                            statearr_14347_14367[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14325 === 8) {
                                              var inst_14306 = state_14324[2];
                                              var state_14324__$1 = state_14324;
                                              var statearr_14348_14368 = state_14324__$1;
                                              statearr_14348_14368[2] = inst_14306;
                                              statearr_14348_14368[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__5712__auto__, c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_14350 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14350[0] = state_machine__5713__auto__;
                statearr_14350[1] = 1;
                return statearr_14350;
              };
              var state_machine__5713__auto____1 = function(state_14324) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_14324);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_14324) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_14324);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__5727__auto__ = function() {
          var statearr_14351 = f__5726__auto__.call(null);
          statearr_14351[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___14352;
          return statearr_14351;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___14352, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5725__auto___14468 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___14468, out) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___14468, out) {
            return function(state_14448) {
              var state_val_14449 = state_14448[1];
              if (state_val_14449 === 7) {
                var inst_14427 = state_14448[5];
                var inst_14428 = state_14448[6];
                var inst_14427__$1 = state_14448[2];
                var inst_14428__$1 = cljs.core.nth.call(null, inst_14427__$1, 0, null);
                var inst_14429 = cljs.core.nth.call(null, inst_14427__$1, 1, null);
                var inst_14430 = inst_14428__$1 == null;
                var state_14448__$1 = function() {
                  var statearr_14450 = state_14448;
                  statearr_14450[5] = inst_14427__$1;
                  statearr_14450[7] = inst_14429;
                  statearr_14450[6] = inst_14428__$1;
                  return statearr_14450;
                }();
                if (cljs.core.truth_(inst_14430)) {
                  var statearr_14451_14469 = state_14448__$1;
                  statearr_14451_14469[1] = 8;
                } else {
                  var statearr_14452_14470 = state_14448__$1;
                  statearr_14452_14470[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14449 === 1) {
                  var inst_14419 = cljs.core.vec.call(null, chs);
                  var inst_14420 = inst_14419;
                  var state_14448__$1 = function() {
                    var statearr_14453 = state_14448;
                    statearr_14453[8] = inst_14420;
                    return statearr_14453;
                  }();
                  var statearr_14454_14471 = state_14448__$1;
                  statearr_14454_14471[2] = null;
                  statearr_14454_14471[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14449 === 4) {
                    var inst_14420 = state_14448[8];
                    var state_14448__$1 = state_14448;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_14448__$1, 7, inst_14420);
                  } else {
                    if (state_val_14449 === 6) {
                      var inst_14444 = state_14448[2];
                      var state_14448__$1 = state_14448;
                      var statearr_14455_14472 = state_14448__$1;
                      statearr_14455_14472[2] = inst_14444;
                      statearr_14455_14472[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14449 === 3) {
                        var inst_14446 = state_14448[2];
                        var state_14448__$1 = state_14448;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14448__$1, inst_14446);
                      } else {
                        if (state_val_14449 === 2) {
                          var inst_14420 = state_14448[8];
                          var inst_14422 = cljs.core.count.call(null, inst_14420);
                          var inst_14423 = inst_14422 > 0;
                          var state_14448__$1 = state_14448;
                          if (cljs.core.truth_(inst_14423)) {
                            var statearr_14457_14473 = state_14448__$1;
                            statearr_14457_14473[1] = 4;
                          } else {
                            var statearr_14458_14474 = state_14448__$1;
                            statearr_14458_14474[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14449 === 11) {
                            var inst_14420 = state_14448[8];
                            var inst_14437 = state_14448[2];
                            var tmp14456 = inst_14420;
                            var inst_14420__$1 = tmp14456;
                            var state_14448__$1 = function() {
                              var statearr_14459 = state_14448;
                              statearr_14459[8] = inst_14420__$1;
                              statearr_14459[9] = inst_14437;
                              return statearr_14459;
                            }();
                            var statearr_14460_14475 = state_14448__$1;
                            statearr_14460_14475[2] = null;
                            statearr_14460_14475[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14449 === 9) {
                              var inst_14428 = state_14448[6];
                              var state_14448__$1 = state_14448;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14448__$1, 11, out, inst_14428);
                            } else {
                              if (state_val_14449 === 5) {
                                var inst_14442 = cljs.core.async.close_BANG_.call(null, out);
                                var state_14448__$1 = state_14448;
                                var statearr_14461_14476 = state_14448__$1;
                                statearr_14461_14476[2] = inst_14442;
                                statearr_14461_14476[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14449 === 10) {
                                  var inst_14440 = state_14448[2];
                                  var state_14448__$1 = state_14448;
                                  var statearr_14462_14477 = state_14448__$1;
                                  statearr_14462_14477[2] = inst_14440;
                                  statearr_14462_14477[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14449 === 8) {
                                    var inst_14420 = state_14448[8];
                                    var inst_14427 = state_14448[5];
                                    var inst_14429 = state_14448[7];
                                    var inst_14428 = state_14448[6];
                                    var inst_14432 = function() {
                                      var c = inst_14429;
                                      var v = inst_14428;
                                      var vec__14425 = inst_14427;
                                      var cs = inst_14420;
                                      return function(c, v, vec__14425, cs, inst_14420, inst_14427, inst_14429, inst_14428, state_val_14449, c__5725__auto___14468, out) {
                                        return function(p1__14369_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__14369_SHARP_);
                                        };
                                      }(c, v, vec__14425, cs, inst_14420, inst_14427, inst_14429, inst_14428, state_val_14449, c__5725__auto___14468, out);
                                    }();
                                    var inst_14433 = cljs.core.filterv.call(null, inst_14432, inst_14420);
                                    var inst_14420__$1 = inst_14433;
                                    var state_14448__$1 = function() {
                                      var statearr_14463 = state_14448;
                                      statearr_14463[8] = inst_14420__$1;
                                      return statearr_14463;
                                    }();
                                    var statearr_14464_14478 = state_14448__$1;
                                    statearr_14464_14478[2] = null;
                                    statearr_14464_14478[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5725__auto___14468, out);
          return function(switch__5712__auto__, c__5725__auto___14468, out) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_14466 = [null, null, null, null, null, null, null, null, null, null];
                statearr_14466[0] = state_machine__5713__auto__;
                statearr_14466[1] = 1;
                return statearr_14466;
              };
              var state_machine__5713__auto____1 = function(state_14448) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_14448);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_14448) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_14448);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___14468, out);
        }();
        var state__5727__auto__ = function() {
          var statearr_14467 = f__5726__auto__.call(null);
          statearr_14467[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___14468;
          return statearr_14467;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___14468, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("app.logger");
goog.require("cljs.core");
cljs.core.enable_console_print_BANG_.call(null);
app.logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
app.logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
app.logger.og = function og(type, format, data) {
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([type], true), app.logger.tagsOn);
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), app.logger.tagsOn);
    }
  }())) {
    return console.log(type + " " + format, data);
  } else {
    return null;
  }
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("app.logger");
goog.require("app.logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.get = function get() {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8015) {
            var state_val_8016 = state_8015[1];
            if (state_val_8016 === 3) {
              var inst_8012 = state_8015[2];
              var inst_8013 = app.logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_8015__$1 = function() {
                var statearr_8017 = state_8015;
                statearr_8017[5] = inst_8012;
                statearr_8017[6] = inst_8013;
                return statearr_8017;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8015__$1, pubsub.a);
            } else {
              if (state_val_8016 === 2) {
                var inst_8008 = state_8015[2];
                var inst_8009 = pubsub.a = inst_8008;
                var inst_8010 = app.logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_8015__$1 = function() {
                  var statearr_8018 = state_8015;
                  statearr_8018[7] = inst_8009;
                  statearr_8018[8] = inst_8010;
                  return statearr_8018;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8015__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_8016 === 1) {
                  var state_8015__$1 = state_8015;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8015__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8020 = [null, null, null, null, null, null, null, null, null];
              statearr_8020[0] = state_machine__5713__auto__;
              statearr_8020[1] = 1;
              return statearr_8020;
            };
            var state_machine__5713__auto____1 = function(state_8015) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8015);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8015) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8015);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8021 = f__5726__auto__.call(null);
        statearr_8021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8021;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
pubsub.init = function init(what) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8036) {
            var state_val_8037 = state_8036[1];
            if (state_val_8037 === 2) {
              var inst_8034 = state_8036[2];
              var state_8036__$1 = state_8036;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8036__$1, inst_8034);
            } else {
              if (state_val_8037 === 1) {
                var inst_8032 = app.logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_8036__$1 = function() {
                  var statearr_8038 = state_8036;
                  statearr_8038[5] = inst_8032;
                  return statearr_8038;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8036__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8040 = [null, null, null, null, null, null];
              statearr_8040[0] = state_machine__5713__auto__;
              statearr_8040[1] = 1;
              return statearr_8040;
            };
            var state_machine__5713__auto____1 = function(state_8036) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8036);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8036) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8036);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8041 = f__5726__auto__.call(null);
        statearr_8041[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8041;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
pubsub.set = function set(what) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8058) {
            var state_val_8059 = state_8058[1];
            if (state_val_8059 === 3) {
              var inst_8056 = state_8058[2];
              var state_8058__$1 = state_8058;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8058__$1, inst_8056);
            } else {
              if (state_val_8059 === 2) {
                var inst_8054 = state_8058[2];
                var state_8058__$1 = function() {
                  var statearr_8060 = state_8058;
                  statearr_8060[5] = inst_8054;
                  return statearr_8060;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8058__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_8059 === 1) {
                  var state_8058__$1 = state_8058;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8058__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8062 = [null, null, null, null, null, null];
              statearr_8062[0] = state_machine__5713__auto__;
              statearr_8062[1] = 1;
              return statearr_8062;
            };
            var state_machine__5713__auto____1 = function(state_8058) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8058);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8058) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8058);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8063 = f__5726__auto__.call(null);
        statearr_8063[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8063;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
pubsub.subs = function() {
  var obj8065 = {};
  return obj8065;
}();
pubsub.sub = function sub(typ, fun) {
  return pubsub.subs[typ] = fun;
};
pubsub.pub = function pub(typ, msg) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", typ + " " + msg);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8083) {
            var state_val_8084 = state_8083[1];
            if (state_val_8084 === 2) {
              var inst_8081 = state_8083[2];
              var state_8083__$1 = state_8083;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8083__$1, inst_8081);
            } else {
              if (state_val_8084 === 1) {
                var inst_8079 = {"typ":typ, "msg":msg};
                var state_8083__$1 = state_8083;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8083__$1, 2, pubsub.proxychan, inst_8079);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8086 = [null, null, null, null, null];
              statearr_8086[0] = state_machine__5713__auto__;
              statearr_8086[1] = 1;
              return statearr_8086;
            };
            var state_machine__5713__auto____1 = function(state_8083) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8083);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8083) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8083);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8087 = f__5726__auto__.call(null);
        statearr_8087[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8087;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
pubsub.initpubsub = function initpubsub() {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8122) {
            var state_val_8123 = state_8122[1];
            if (state_val_8123 === 4) {
              var inst_8111 = state_8122[2];
              var inst_8112 = pubsub.m = inst_8111;
              var inst_8113 = app.logger.og.call(null, new cljs.core.Keyword(null, "sub", "sub", -2093760025), "about to deliver subbed %s", pubsub.m);
              var inst_8114 = pubsub.m["typ"];
              var inst_8115 = pubsub.subs[inst_8114];
              var inst_8116 = pubsub.m["msg"];
              var inst_8117 = inst_8115.call(null, inst_8116);
              var state_8122__$1 = function() {
                var statearr_8124 = state_8122;
                statearr_8124[5] = inst_8112;
                statearr_8124[6] = inst_8117;
                statearr_8124[7] = inst_8113;
                return statearr_8124;
              }();
              var statearr_8125_8130 = state_8122__$1;
              statearr_8125_8130[2] = null;
              statearr_8125_8130[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_8123 === 3) {
                var inst_8120 = state_8122[2];
                var state_8122__$1 = state_8122;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8122__$1, inst_8120);
              } else {
                if (state_val_8123 === 2) {
                  var state_8122__$1 = state_8122;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8122__$1, 4, pubsub.proxychan);
                } else {
                  if (state_val_8123 === 1) {
                    var state_8122__$1 = state_8122;
                    var statearr_8126_8131 = state_8122__$1;
                    statearr_8126_8131[2] = null;
                    statearr_8126_8131[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8128 = [null, null, null, null, null, null, null, null];
              statearr_8128[0] = state_machine__5713__auto__;
              statearr_8128[1] = 1;
              return statearr_8128;
            };
            var state_machine__5713__auto____1 = function(state_8122) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8122);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8122) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8122);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8129 = f__5726__auto__.call(null);
        statearr_8129[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8129;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj14570 = {};
  return obj14570;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.read_char[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.read_char["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.unread[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.unread["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3648__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__14571) {
    var rdr = cljs.core.first(arglist__14571);
    var msg = cljs.core.rest(arglist__14571);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3636__auto__ = !(ch === "#");
  if (and__3636__auto__) {
    var and__3636__auto____$1 = !(ch === "'");
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = !(ch === ":");
      if (and__3636__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__14572 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__14573 = cljs.reader.read_char.call(null, rdr);
      sb = G__14572;
      ch = G__14573;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__14574 = cljs.reader.read_char.call(null, rdr);
      ch = G__14574;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__14575 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__14575;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__14576 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__14576;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = ch == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3648__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__14577 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__14578 = cljs.reader.read_char.call(null, reader);
      buffer = G__14577;
      ch = G__14578;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__14579 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__14580 = cljs.reader.read_char.call(null, reader);
        buffer = G__14579;
        ch = G__14580;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14581 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__14582 = cljs.reader.read_char.call(null, reader);
          buffer = G__14581;
          ch = G__14582;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__14587 = function() {
            var G__14585 = buffer;
            G__14585.append(nch);
            return G__14585;
          }();
          var G__14588 = cljs.reader.read_char.call(null, reader);
          buffer = G__14587;
          ch = G__14588;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14589 = function() {
            var G__14586 = buffer;
            G__14586.append(ch);
            return G__14586;
          }();
          var G__14590 = cljs.reader.read_char.call(null, reader);
          buffer = G__14589;
          ch = G__14590;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__14592 = o;
    if (G__14592) {
      var bit__4312__auto__ = G__14592.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__14592.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14592.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14592);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14592);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__14593 = reader;
        var G__14594 = eof_is_error;
        var G__14595 = sentinel;
        var G__14596 = is_recursive;
        reader = G__14593;
        eof_is_error = G__14594;
        sentinel = G__14595;
        is_recursive = G__14596;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__14597 = cljs.reader.read_comment.call(null, reader, ch);
          var G__14598 = eof_is_error;
          var G__14599 = sentinel;
          var G__14600 = is_recursive;
          reader = G__14597;
          eof_is_error = G__14598;
          sentinel = G__14599;
          is_recursive = G__14600;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__14601 = reader;
            var G__14602 = eof_is_error;
            var G__14603 = sentinel;
            var G__14604 = is_recursive;
            reader = G__14601;
            eof_is_error = G__14602;
            sentinel = G__14603;
            is_recursive = G__14604;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__14605 = b.append("0");
          b = G__14605;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__14607 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__14607, 0, null);
  var years = cljs.core.nth.call(null, vec__14607, 1, null);
  var months = cljs.core.nth.call(null, vec__14607, 2, null);
  var days = cljs.core.nth.call(null, vec__14607, 3, null);
  var hours = cljs.core.nth.call(null, vec__14607, 4, null);
  var minutes = cljs.core.nth.call(null, vec__14607, 5, null);
  var seconds = cljs.core.nth.call(null, vec__14607, 6, null);
  var fraction = cljs.core.nth.call(null, vec__14607, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__14607, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__14607, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__14607, 10, null);
  var v = vec__14607;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__14609 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__14609, 0, null);
    var months = cljs.core.nth.call(null, vec__14609, 1, null);
    var days = cljs.core.nth.call(null, vec__14609, 2, null);
    var hours = cljs.core.nth.call(null, vec__14609, 3, null);
    var minutes = cljs.core.nth.call(null, vec__14609, 4, null);
    var seconds = cljs.core.nth.call(null, vec__14609, 5, null);
    var ms = cljs.core.nth.call(null, vec__14609, 6, null);
    var offset = cljs.core.nth.call(null, vec__14609, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__14622_14634 = cljs.core.seq.call(null, form);
    var chunk__14623_14635 = null;
    var count__14624_14636 = 0;
    var i__14625_14637 = 0;
    while (true) {
      if (i__14625_14637 < count__14624_14636) {
        var x_14638 = cljs.core._nth.call(null, chunk__14623_14635, i__14625_14637);
        arr.push(x_14638);
        var G__14639 = seq__14622_14634;
        var G__14640 = chunk__14623_14635;
        var G__14641 = count__14624_14636;
        var G__14642 = i__14625_14637 + 1;
        seq__14622_14634 = G__14639;
        chunk__14623_14635 = G__14640;
        count__14624_14636 = G__14641;
        i__14625_14637 = G__14642;
        continue;
      } else {
        var temp__4126__auto___14643 = cljs.core.seq.call(null, seq__14622_14634);
        if (temp__4126__auto___14643) {
          var seq__14622_14644__$1 = temp__4126__auto___14643;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14622_14644__$1)) {
            var c__4418__auto___14645 = cljs.core.chunk_first.call(null, seq__14622_14644__$1);
            var G__14646 = cljs.core.chunk_rest.call(null, seq__14622_14644__$1);
            var G__14647 = c__4418__auto___14645;
            var G__14648 = cljs.core.count.call(null, c__4418__auto___14645);
            var G__14649 = 0;
            seq__14622_14634 = G__14646;
            chunk__14623_14635 = G__14647;
            count__14624_14636 = G__14648;
            i__14625_14637 = G__14649;
            continue;
          } else {
            var x_14650 = cljs.core.first.call(null, seq__14622_14644__$1);
            arr.push(x_14650);
            var G__14651 = cljs.core.next.call(null, seq__14622_14644__$1);
            var G__14652 = null;
            var G__14653 = 0;
            var G__14654 = 0;
            seq__14622_14634 = G__14651;
            chunk__14623_14635 = G__14652;
            count__14624_14636 = G__14653;
            i__14625_14637 = G__14654;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj14627 = {};
        return obj14627;
      }();
      var seq__14628_14655 = cljs.core.seq.call(null, form);
      var chunk__14629_14656 = null;
      var count__14630_14657 = 0;
      var i__14631_14658 = 0;
      while (true) {
        if (i__14631_14658 < count__14630_14657) {
          var vec__14632_14659 = cljs.core._nth.call(null, chunk__14629_14656, i__14631_14658);
          var k_14660 = cljs.core.nth.call(null, vec__14632_14659, 0, null);
          var v_14661 = cljs.core.nth.call(null, vec__14632_14659, 1, null);
          obj[cljs.core.name.call(null, k_14660)] = v_14661;
          var G__14662 = seq__14628_14655;
          var G__14663 = chunk__14629_14656;
          var G__14664 = count__14630_14657;
          var G__14665 = i__14631_14658 + 1;
          seq__14628_14655 = G__14662;
          chunk__14629_14656 = G__14663;
          count__14630_14657 = G__14664;
          i__14631_14658 = G__14665;
          continue;
        } else {
          var temp__4126__auto___14666 = cljs.core.seq.call(null, seq__14628_14655);
          if (temp__4126__auto___14666) {
            var seq__14628_14667__$1 = temp__4126__auto___14666;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14628_14667__$1)) {
              var c__4418__auto___14668 = cljs.core.chunk_first.call(null, seq__14628_14667__$1);
              var G__14669 = cljs.core.chunk_rest.call(null, seq__14628_14667__$1);
              var G__14670 = c__4418__auto___14668;
              var G__14671 = cljs.core.count.call(null, c__4418__auto___14668);
              var G__14672 = 0;
              seq__14628_14655 = G__14669;
              chunk__14629_14656 = G__14670;
              count__14630_14657 = G__14671;
              i__14631_14658 = G__14672;
              continue;
            } else {
              var vec__14633_14673 = cljs.core.first.call(null, seq__14628_14667__$1);
              var k_14674 = cljs.core.nth.call(null, vec__14633_14673, 0, null);
              var v_14675 = cljs.core.nth.call(null, vec__14633_14673, 1, null);
              obj[cljs.core.name.call(null, k_14674)] = v_14675;
              var G__14676 = cljs.core.next.call(null, seq__14628_14667__$1);
              var G__14677 = null;
              var G__14678 = 0;
              var G__14679 = 0;
              seq__14628_14655 = G__14676;
              chunk__14629_14656 = G__14677;
              count__14630_14657 = G__14678;
              i__14631_14658 = G__14679;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__14560) {
  var vec__14562 = p__14560;
  var result = cljs.core.nth.call(null, vec__14562, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__14562, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__14566 = cljs.core._EQ_;
  var expr__14567 = event.data["command"];
  if (cljs.core.truth_(pred__14566.call(null, "channel", expr__14567))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__14566.call(null, "channel-arraybuffer", expr__14567))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__14567));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__5725__auto___14830 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___14830, servant_channel) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto___14830, servant_channel) {
          return function(state_14801) {
            var state_val_14802 = state_14801[1];
            if (state_val_14802 === 7) {
              var inst_14762 = state_14801[5];
              var inst_14761 = state_14801[6];
              var inst_14763 = state_14801[7];
              var inst_14764 = state_14801[8];
              var inst_14772 = state_14801[2];
              var inst_14773 = inst_14764 + 1;
              var tmp14803 = inst_14762;
              var tmp14804 = inst_14761;
              var tmp14805 = inst_14763;
              var inst_14761__$1 = tmp14804;
              var inst_14762__$1 = tmp14803;
              var inst_14763__$1 = tmp14805;
              var inst_14764__$1 = inst_14773;
              var state_14801__$1 = function() {
                var statearr_14806 = state_14801;
                statearr_14806[9] = inst_14772;
                statearr_14806[5] = inst_14762__$1;
                statearr_14806[6] = inst_14761__$1;
                statearr_14806[7] = inst_14763__$1;
                statearr_14806[8] = inst_14764__$1;
                return statearr_14806;
              }();
              var statearr_14807_14831 = state_14801__$1;
              statearr_14807_14831[2] = null;
              statearr_14807_14831[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14802 === 1) {
                var inst_14759 = cljs.core.range.call(null, worker_count);
                var inst_14760 = cljs.core.seq.call(null, inst_14759);
                var inst_14761 = inst_14760;
                var inst_14762 = null;
                var inst_14763 = 0;
                var inst_14764 = 0;
                var state_14801__$1 = function() {
                  var statearr_14808 = state_14801;
                  statearr_14808[5] = inst_14762;
                  statearr_14808[6] = inst_14761;
                  statearr_14808[7] = inst_14763;
                  statearr_14808[8] = inst_14764;
                  return statearr_14808;
                }();
                var statearr_14809_14832 = state_14801__$1;
                statearr_14809_14832[2] = null;
                statearr_14809_14832[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14802 === 4) {
                  var inst_14762 = state_14801[5];
                  var inst_14764 = state_14801[8];
                  var inst_14769 = cljs.core._nth.call(null, inst_14762, inst_14764);
                  var inst_14770 = new Worker(worker_script);
                  var state_14801__$1 = function() {
                    var statearr_14810 = state_14801;
                    statearr_14810[10] = inst_14769;
                    return statearr_14810;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14801__$1, 7, servant_channel, inst_14770);
                } else {
                  if (state_val_14802 === 13) {
                    var inst_14792 = state_14801[2];
                    var state_14801__$1 = state_14801;
                    var statearr_14811_14833 = state_14801__$1;
                    statearr_14811_14833[2] = inst_14792;
                    statearr_14811_14833[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14802 === 6) {
                      var inst_14797 = state_14801[2];
                      var state_14801__$1 = state_14801;
                      var statearr_14812_14834 = state_14801__$1;
                      statearr_14812_14834[2] = inst_14797;
                      statearr_14812_14834[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14802 === 3) {
                        var inst_14799 = state_14801[2];
                        var state_14801__$1 = state_14801;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14801__$1, inst_14799);
                      } else {
                        if (state_val_14802 === 12) {
                          var inst_14776 = state_14801[11];
                          var inst_14785 = cljs.core.first.call(null, inst_14776);
                          var inst_14786 = new Worker(worker_script);
                          var state_14801__$1 = function() {
                            var statearr_14813 = state_14801;
                            statearr_14813[12] = inst_14785;
                            return statearr_14813;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14801__$1, 14, servant_channel, inst_14786);
                        } else {
                          if (state_val_14802 === 2) {
                            var inst_14763 = state_14801[7];
                            var inst_14764 = state_14801[8];
                            var inst_14766 = inst_14764 < inst_14763;
                            var inst_14767 = inst_14766;
                            var state_14801__$1 = state_14801;
                            if (cljs.core.truth_(inst_14767)) {
                              var statearr_14814_14835 = state_14801__$1;
                              statearr_14814_14835[1] = 4;
                            } else {
                              var statearr_14815_14836 = state_14801__$1;
                              statearr_14815_14836[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14802 === 11) {
                              var inst_14776 = state_14801[11];
                              var inst_14780 = cljs.core.chunk_first.call(null, inst_14776);
                              var inst_14781 = cljs.core.chunk_rest.call(null, inst_14776);
                              var inst_14782 = cljs.core.count.call(null, inst_14780);
                              var inst_14761 = inst_14781;
                              var inst_14762 = inst_14780;
                              var inst_14763 = inst_14782;
                              var inst_14764 = 0;
                              var state_14801__$1 = function() {
                                var statearr_14816 = state_14801;
                                statearr_14816[5] = inst_14762;
                                statearr_14816[6] = inst_14761;
                                statearr_14816[7] = inst_14763;
                                statearr_14816[8] = inst_14764;
                                return statearr_14816;
                              }();
                              var statearr_14817_14837 = state_14801__$1;
                              statearr_14817_14837[2] = null;
                              statearr_14817_14837[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14802 === 9) {
                                var state_14801__$1 = state_14801;
                                var statearr_14818_14838 = state_14801__$1;
                                statearr_14818_14838[2] = null;
                                statearr_14818_14838[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14802 === 5) {
                                  var inst_14761 = state_14801[6];
                                  var inst_14776 = state_14801[11];
                                  var inst_14776__$1 = cljs.core.seq.call(null, inst_14761);
                                  var state_14801__$1 = function() {
                                    var statearr_14819 = state_14801;
                                    statearr_14819[11] = inst_14776__$1;
                                    return statearr_14819;
                                  }();
                                  if (inst_14776__$1) {
                                    var statearr_14820_14839 = state_14801__$1;
                                    statearr_14820_14839[1] = 8;
                                  } else {
                                    var statearr_14821_14840 = state_14801__$1;
                                    statearr_14821_14840[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14802 === 14) {
                                    var inst_14776 = state_14801[11];
                                    var inst_14788 = state_14801[2];
                                    var inst_14789 = cljs.core.next.call(null, inst_14776);
                                    var inst_14761 = inst_14789;
                                    var inst_14762 = null;
                                    var inst_14763 = 0;
                                    var inst_14764 = 0;
                                    var state_14801__$1 = function() {
                                      var statearr_14822 = state_14801;
                                      statearr_14822[5] = inst_14762;
                                      statearr_14822[6] = inst_14761;
                                      statearr_14822[7] = inst_14763;
                                      statearr_14822[8] = inst_14764;
                                      statearr_14822[13] = inst_14788;
                                      return statearr_14822;
                                    }();
                                    var statearr_14823_14841 = state_14801__$1;
                                    statearr_14823_14841[2] = null;
                                    statearr_14823_14841[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14802 === 10) {
                                      var inst_14795 = state_14801[2];
                                      var state_14801__$1 = state_14801;
                                      var statearr_14824_14842 = state_14801__$1;
                                      statearr_14824_14842[2] = inst_14795;
                                      statearr_14824_14842[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14802 === 8) {
                                        var inst_14776 = state_14801[11];
                                        var inst_14778 = cljs.core.chunked_seq_QMARK_.call(null, inst_14776);
                                        var state_14801__$1 = state_14801;
                                        if (inst_14778) {
                                          var statearr_14825_14843 = state_14801__$1;
                                          statearr_14825_14843[1] = 11;
                                        } else {
                                          var statearr_14826_14844 = state_14801__$1;
                                          statearr_14826_14844[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto___14830, servant_channel);
        return function(switch__5712__auto__, c__5725__auto___14830, servant_channel) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_14828 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14828[0] = state_machine__5713__auto__;
              statearr_14828[1] = 1;
              return statearr_14828;
            };
            var state_machine__5713__auto____1 = function(state_14801) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_14801);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_14801) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_14801);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto___14830, servant_channel);
      }();
      var state__5727__auto__ = function() {
        var statearr_14829 = f__5726__auto__.call(null);
        statearr_14829[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___14830;
        return statearr_14829;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto___14830, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_14966) {
            var state_val_14967 = state_14966[1];
            if (state_val_14967 === 7) {
              var inst_14929 = state_14966[5];
              var inst_14926 = state_14966[6];
              var inst_14928 = state_14966[7];
              var inst_14927 = state_14966[8];
              var inst_14936 = state_14966[2];
              var inst_14937 = inst_14936.terminate();
              var inst_14938 = inst_14929 + 1;
              var tmp14968 = inst_14926;
              var tmp14969 = inst_14928;
              var tmp14970 = inst_14927;
              var inst_14926__$1 = tmp14968;
              var inst_14927__$1 = tmp14970;
              var inst_14928__$1 = tmp14969;
              var inst_14929__$1 = inst_14938;
              var state_14966__$1 = function() {
                var statearr_14971 = state_14966;
                statearr_14971[9] = inst_14937;
                statearr_14971[5] = inst_14929__$1;
                statearr_14971[6] = inst_14926__$1;
                statearr_14971[7] = inst_14928__$1;
                statearr_14971[8] = inst_14927__$1;
                return statearr_14971;
              }();
              var statearr_14972_14995 = state_14966__$1;
              statearr_14972_14995[2] = null;
              statearr_14972_14995[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14967 === 1) {
                var inst_14924 = cljs.core.range.call(null, worker_count);
                var inst_14925 = cljs.core.seq.call(null, inst_14924);
                var inst_14926 = inst_14925;
                var inst_14927 = null;
                var inst_14928 = 0;
                var inst_14929 = 0;
                var state_14966__$1 = function() {
                  var statearr_14973 = state_14966;
                  statearr_14973[5] = inst_14929;
                  statearr_14973[6] = inst_14926;
                  statearr_14973[7] = inst_14928;
                  statearr_14973[8] = inst_14927;
                  return statearr_14973;
                }();
                var statearr_14974_14996 = state_14966__$1;
                statearr_14974_14996[2] = null;
                statearr_14974_14996[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14967 === 4) {
                  var inst_14929 = state_14966[5];
                  var inst_14927 = state_14966[8];
                  var inst_14934 = cljs.core._nth.call(null, inst_14927, inst_14929);
                  var state_14966__$1 = function() {
                    var statearr_14975 = state_14966;
                    statearr_14975[10] = inst_14934;
                    return statearr_14975;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14966__$1, 7, servant_channel);
                } else {
                  if (state_val_14967 === 13) {
                    var inst_14957 = state_14966[2];
                    var state_14966__$1 = state_14966;
                    var statearr_14976_14997 = state_14966__$1;
                    statearr_14976_14997[2] = inst_14957;
                    statearr_14976_14997[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14967 === 6) {
                      var inst_14962 = state_14966[2];
                      var state_14966__$1 = state_14966;
                      var statearr_14977_14998 = state_14966__$1;
                      statearr_14977_14998[2] = inst_14962;
                      statearr_14977_14998[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14967 === 3) {
                        var inst_14964 = state_14966[2];
                        var state_14966__$1 = state_14966;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14966__$1, inst_14964);
                      } else {
                        if (state_val_14967 === 12) {
                          var inst_14941 = state_14966[11];
                          var inst_14950 = cljs.core.first.call(null, inst_14941);
                          var state_14966__$1 = function() {
                            var statearr_14978 = state_14966;
                            statearr_14978[12] = inst_14950;
                            return statearr_14978;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14966__$1, 14, servant_channel);
                        } else {
                          if (state_val_14967 === 2) {
                            var inst_14929 = state_14966[5];
                            var inst_14928 = state_14966[7];
                            var inst_14931 = inst_14929 < inst_14928;
                            var inst_14932 = inst_14931;
                            var state_14966__$1 = state_14966;
                            if (cljs.core.truth_(inst_14932)) {
                              var statearr_14979_14999 = state_14966__$1;
                              statearr_14979_14999[1] = 4;
                            } else {
                              var statearr_14980_15000 = state_14966__$1;
                              statearr_14980_15000[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14967 === 11) {
                              var inst_14941 = state_14966[11];
                              var inst_14945 = cljs.core.chunk_first.call(null, inst_14941);
                              var inst_14946 = cljs.core.chunk_rest.call(null, inst_14941);
                              var inst_14947 = cljs.core.count.call(null, inst_14945);
                              var inst_14926 = inst_14946;
                              var inst_14927 = inst_14945;
                              var inst_14928 = inst_14947;
                              var inst_14929 = 0;
                              var state_14966__$1 = function() {
                                var statearr_14981 = state_14966;
                                statearr_14981[5] = inst_14929;
                                statearr_14981[6] = inst_14926;
                                statearr_14981[7] = inst_14928;
                                statearr_14981[8] = inst_14927;
                                return statearr_14981;
                              }();
                              var statearr_14982_15001 = state_14966__$1;
                              statearr_14982_15001[2] = null;
                              statearr_14982_15001[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14967 === 9) {
                                var state_14966__$1 = state_14966;
                                var statearr_14983_15002 = state_14966__$1;
                                statearr_14983_15002[2] = null;
                                statearr_14983_15002[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14967 === 5) {
                                  var inst_14926 = state_14966[6];
                                  var inst_14941 = state_14966[11];
                                  var inst_14941__$1 = cljs.core.seq.call(null, inst_14926);
                                  var state_14966__$1 = function() {
                                    var statearr_14984 = state_14966;
                                    statearr_14984[11] = inst_14941__$1;
                                    return statearr_14984;
                                  }();
                                  if (inst_14941__$1) {
                                    var statearr_14985_15003 = state_14966__$1;
                                    statearr_14985_15003[1] = 8;
                                  } else {
                                    var statearr_14986_15004 = state_14966__$1;
                                    statearr_14986_15004[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14967 === 14) {
                                    var inst_14941 = state_14966[11];
                                    var inst_14952 = state_14966[2];
                                    var inst_14953 = inst_14952.terminate();
                                    var inst_14954 = cljs.core.next.call(null, inst_14941);
                                    var inst_14926 = inst_14954;
                                    var inst_14927 = null;
                                    var inst_14928 = 0;
                                    var inst_14929 = 0;
                                    var state_14966__$1 = function() {
                                      var statearr_14987 = state_14966;
                                      statearr_14987[5] = inst_14929;
                                      statearr_14987[6] = inst_14926;
                                      statearr_14987[7] = inst_14928;
                                      statearr_14987[13] = inst_14953;
                                      statearr_14987[8] = inst_14927;
                                      return statearr_14987;
                                    }();
                                    var statearr_14988_15005 = state_14966__$1;
                                    statearr_14988_15005[2] = null;
                                    statearr_14988_15005[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14967 === 10) {
                                      var inst_14960 = state_14966[2];
                                      var state_14966__$1 = state_14966;
                                      var statearr_14989_15006 = state_14966__$1;
                                      statearr_14989_15006[2] = inst_14960;
                                      statearr_14989_15006[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14967 === 8) {
                                        var inst_14941 = state_14966[11];
                                        var inst_14943 = cljs.core.chunked_seq_QMARK_.call(null, inst_14941);
                                        var state_14966__$1 = state_14966;
                                        if (inst_14943) {
                                          var statearr_14990_15007 = state_14966__$1;
                                          statearr_14990_15007[1] = 11;
                                        } else {
                                          var statearr_14991_15008 = state_14966__$1;
                                          statearr_14991_15008[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_14993 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14993[0] = state_machine__5713__auto__;
              statearr_14993[1] = 1;
              return statearr_14993;
            };
            var state_machine__5713__auto____1 = function(state_14966) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_14966);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_14966) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_14966);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_14994 = f__5726__auto__.call(null);
        statearr_14994[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_14994;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__15009_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__15009_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj15013 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj15013;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__15017 = args;
  var args__$1 = cljs.core.nth.call(null, vec__15017, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__15017, 1, null);
  return worker.postMessage(function() {
    var obj15019 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj15019;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__15023 = args;
  var args__$1 = cljs.core.nth.call(null, vec__15023, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__15023, 1, null);
  return worker.postMessage(function() {
    var obj15025 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj15025;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__5725__auto___15077 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___15077, out_channel) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto___15077, out_channel) {
            return function(state_15059) {
              var state_val_15060 = state_15059[1];
              if (state_val_15060 === 2) {
                var inst_15053 = state_15059[2];
                var inst_15054 = cljs.core.pr_str.call(null, fn_key);
                var inst_15055 = post_message_fn.call(null, inst_15053, inst_15054, args);
                var inst_15056 = function() {
                  var worker = inst_15053;
                  return function(worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel) {
                    return function(p1__15026_SHARP_) {
                      var c__5725__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel) {
                        return function() {
                          var f__5726__auto__ = function() {
                            var switch__5712__auto__ = function(c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel) {
                              return function(state_15067) {
                                var state_val_15068 = state_15067[1];
                                if (state_val_15068 === 3) {
                                  var inst_15065 = state_15067[2];
                                  var state_15067__$1 = state_15067;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15067__$1, inst_15065);
                                } else {
                                  if (state_val_15068 === 2) {
                                    var inst_15063 = state_15067[2];
                                    var state_15067__$1 = function() {
                                      var statearr_15069 = state_15067;
                                      statearr_15069[5] = inst_15063;
                                      return statearr_15069;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15067__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_15068 === 1) {
                                      var inst_15061 = p1__15026_SHARP_.data;
                                      var state_15067__$1 = state_15067;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15067__$1, 2, out_channel, inst_15061);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel);
                            return function(switch__5712__auto__, c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel) {
                              return function() {
                                var state_machine__5713__auto__ = null;
                                var state_machine__5713__auto____0 = function() {
                                  var statearr_15071 = [null, null, null, null, null, null];
                                  statearr_15071[0] = state_machine__5713__auto__;
                                  statearr_15071[1] = 1;
                                  return statearr_15071;
                                };
                                var state_machine__5713__auto____1 = function(state_15067) {
                                  while (true) {
                                    var result__5714__auto__ = switch__5712__auto__.call(null, state_15067);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5714__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5713__auto__ = function(state_15067) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5713__auto____0.call(this);
                                    case 1:
                                      return state_machine__5713__auto____1.call(this, state_15067);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
                                state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
                                return state_machine__5713__auto__;
                              }();
                            }(switch__5712__auto__, c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel);
                          }();
                          var state__5727__auto__ = function() {
                            var statearr_15072 = f__5726__auto__.call(null);
                            statearr_15072[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto____$1;
                            return statearr_15072;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
                        };
                      }(c__5725__auto____$1, worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel));
                      return c__5725__auto____$1;
                    };
                  }(worker, inst_15053, inst_15054, inst_15055, state_val_15060, c__5725__auto___15077, out_channel);
                }();
                var inst_15057 = inst_15053.addEventListener("message", inst_15056);
                var state_15059__$1 = function() {
                  var statearr_15073 = state_15059;
                  statearr_15073[5] = inst_15055;
                  return statearr_15073;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15059__$1, inst_15057);
              } else {
                if (state_val_15060 === 1) {
                  var state_15059__$1 = state_15059;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15059__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__5725__auto___15077, out_channel);
          return function(switch__5712__auto__, c__5725__auto___15077, out_channel) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_15075 = [null, null, null, null, null, null];
                statearr_15075[0] = state_machine__5713__auto__;
                statearr_15075[1] = 1;
                return statearr_15075;
              };
              var state_machine__5713__auto____1 = function(state_15059) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_15059);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_15059) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_15059);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto___15077, out_channel);
        }();
        var state__5727__auto__ = function() {
          var statearr_15076 = f__5726__auto__.call(null);
          statearr_15076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___15077;
          return statearr_15076;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto___15077, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__15078) {
    var servant_channel = cljs.core.first(arglist__15078);
    arglist__15078 = cljs.core.next(arglist__15078);
    var post_message_fn = cljs.core.first(arglist__15078);
    arglist__15078 = cljs.core.next(arglist__15078);
    var fn_key = cljs.core.first(arglist__15078);
    var args = cljs.core.rest(arglist__15078);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__15079) {
    var servant_channel = cljs.core.first(arglist__15079);
    arglist__15079 = cljs.core.next(arglist__15079);
    var post_message_fn = cljs.core.first(arglist__15079);
    arglist__15079 = cljs.core.next(arglist__15079);
    var f = cljs.core.first(arglist__15079);
    var args = cljs.core.rest(arglist__15079);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("app.mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("app.logger");
goog.require("app.logger");
app.mining.hashmine = cljs.core.async.chan.call(null);
app.mining.hashmine.type = "workerch";
console.log("this runs in the browser");
app.mining.worker_count = 2;
app.mining.worker_script = "wrkr.js";
app.mining.servant_channel = servant.core.spawn_servants.call(null, app.mining.worker_count, app.mining.worker_script);
app.mining.mine = function mine(rootHash) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  app.mining.chann = servant.core.servant_thread.call(null, app.mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8568) {
            var state_val_8569 = state_8568[1];
            if (state_val_8569 === 2) {
              var inst_8562 = state_8568[2];
              var inst_8563 = app.mining.v = inst_8562;
              var inst_8564 = app.logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", app.mining.v);
              var inst_8565 = JSON.parse(app.mining.v);
              var inst_8566 = pubsub.pub.call(null, "blockMined", inst_8565);
              var state_8568__$1 = function() {
                var statearr_8570 = state_8568;
                statearr_8570[5] = inst_8563;
                statearr_8570[6] = inst_8564;
                return statearr_8570;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8568__$1, inst_8566);
            } else {
              if (state_val_8569 === 1) {
                var inst_8560 = app.logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_8568__$1 = function() {
                  var statearr_8571 = state_8568;
                  statearr_8571[7] = inst_8560;
                  return statearr_8571;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8568__$1, 2, app.mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8573 = [null, null, null, null, null, null, null, null];
              statearr_8573[0] = state_machine__5713__auto__;
              statearr_8573[1] = 1;
              return statearr_8573;
            };
            var state_machine__5713__auto____1 = function(state_8568) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8568);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8568) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8568);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8574 = f__5726__auto__.call(null);
        statearr_8574[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8574;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj10497 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":false};
  return obj10497;
}();
goog.provide("app.pouchDB");
goog.require("cljs.core");
app.pouchDB.dbase = new PouchDB("dbname");
goog.provide("app.crypto");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("app.logger");
goog.require("app.logger");
goog.require("app.database");
goog.require("app.database");
app.crypto.bHash = function bHash(blockHeader) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8613) {
            var state_val_8614 = state_8613[1];
            if (state_val_8614 === 2) {
              var inst_8610 = state_8613[2];
              var inst_8611 = app.crypto.blockHash = inst_8610;
              var state_8613__$1 = function() {
                var statearr_8615 = state_8613;
                statearr_8615[5] = inst_8611;
                return statearr_8615;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8613__$1, app.crypto.blockHash);
            } else {
              if (state_val_8614 === 1) {
                var inst_8605 = JSON.stringify(blockHeader);
                var inst_8606 = app.crypto.stringified = inst_8605;
                var inst_8607 = app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", app.crypto.stringified);
                var inst_8608 = app.crypto.s256.call(null, app.crypto.stringified);
                var state_8613__$1 = function() {
                  var statearr_8616 = state_8613;
                  statearr_8616[6] = inst_8607;
                  statearr_8616[7] = inst_8606;
                  return statearr_8616;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8613__$1, 2, inst_8608);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8618 = [null, null, null, null, null, null, null, null];
              statearr_8618[0] = state_machine__5713__auto__;
              statearr_8618[1] = 1;
              return statearr_8618;
            };
            var state_machine__5713__auto____1 = function(state_8613) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8613);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8613) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8613);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8619 = f__5726__auto__.call(null);
        statearr_8619[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8619;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.crypto.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
app.crypto.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
app.crypto.merkleRoot = function merkleRoot(transactions) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8761) {
            var state_val_8762 = state_8761[1];
            if (state_val_8762 === 9) {
              var inst_8753 = state_8761[2];
              var inst_8754 = app.crypto.fromC = inst_8753;
              var inst_8755 = app.logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", app.crypto.fromC);
              var inst_8756 = app.crypto.fromC.type = "fmr";
              var inst_8759 = {"value":app.crypto.fromC, "type":"fmr"};
              var state_8761__$1 = function() {
                var statearr_8764 = state_8761;
                statearr_8764[5] = inst_8754;
                statearr_8764[6] = inst_8755;
                statearr_8764[7] = inst_8756;
                return statearr_8764;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8761__$1, inst_8759);
            } else {
              if (state_val_8762 === 8) {
                var inst_8749 = state_8761[2];
                var state_8761__$1 = state_8761;
                var statearr_8765_8784 = state_8761__$1;
                statearr_8765_8784[2] = inst_8749;
                statearr_8765_8784[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8762 === 7) {
                  var inst_8727 = state_8761[8];
                  var inst_8745 = inst_8727.shift();
                  var inst_8746 = inst_8727.length;
                  var tmp8763 = inst_8727;
                  var inst_8725 = inst_8745;
                  var inst_8726 = inst_8746;
                  var inst_8727__$1 = tmp8763;
                  var state_8761__$1 = function() {
                    var statearr_8766 = state_8761;
                    statearr_8766[8] = inst_8727__$1;
                    statearr_8766[9] = inst_8726;
                    statearr_8766[10] = inst_8725;
                    return statearr_8766;
                  }();
                  var statearr_8767_8785 = state_8761__$1;
                  statearr_8767_8785[2] = null;
                  statearr_8767_8785[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8762 === 6) {
                    var inst_8727 = state_8761[8];
                    var inst_8726 = state_8761[9];
                    var inst_8725 = state_8761[10];
                    var inst_8741 = cljs.core.async.chan.call(null, 1);
                    var inst_8742 = function() {
                      var c__5725__auto____$1 = inst_8741;
                      var next = inst_8725;
                      var cnt = inst_8726;
                      var txs = inst_8727;
                      return function(c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__) {
                        return function() {
                          var f__5726__auto__ = function() {
                            var switch__5712__auto__ = function(c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__) {
                              return function(state_8739) {
                                var state_val_8740 = state_8739[1];
                                if (state_val_8740 === 1) {
                                  var state_8739__$1 = state_8739;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8739__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__);
                            return function(switch__5712__auto__, c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__) {
                              return function() {
                                var state_machine__5713__auto__ = null;
                                var state_machine__5713__auto____0 = function() {
                                  var statearr_8769 = [null, null, null, null, null];
                                  statearr_8769[0] = state_machine__5713__auto__;
                                  statearr_8769[1] = 1;
                                  return statearr_8769;
                                };
                                var state_machine__5713__auto____1 = function(state_8739) {
                                  while (true) {
                                    var result__5714__auto__ = switch__5712__auto__.call(null, state_8739);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5714__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5713__auto__ = function(state_8739) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5713__auto____0.call(this);
                                    case 1:
                                      return state_machine__5713__auto____1.call(this, state_8739);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
                                state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
                                return state_machine__5713__auto__;
                              }();
                            }(switch__5712__auto__, c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__);
                          }();
                          var state__5727__auto__ = function() {
                            var statearr_8770 = f__5726__auto__.call(null);
                            statearr_8770[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto____$1;
                            return statearr_8770;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
                        };
                      }(c__5725__auto____$1, next, cnt, txs, inst_8727, inst_8726, inst_8725, inst_8741, state_val_8762, c__5725__auto__);
                    }();
                    var inst_8743 = cljs.core.async.impl.dispatch.run.call(null, inst_8742);
                    var state_8761__$1 = function() {
                      var statearr_8771 = state_8761;
                      statearr_8771[11] = inst_8743;
                      return statearr_8771;
                    }();
                    var statearr_8772_8786 = state_8761__$1;
                    statearr_8772_8786[2] = inst_8741;
                    statearr_8772_8786[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8762 === 5) {
                      var inst_8726 = state_8761[9];
                      var inst_8725 = state_8761[10];
                      var inst_8731 = state_8761[2];
                      var inst_8732 = app.crypto.tx = inst_8731;
                      var inst_8733 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                      var inst_8734 = app.crypto.tx + inst_8725;
                      var inst_8735 = app.crypto.sha256c.call(null, inst_8733, inst_8734);
                      var inst_8736 = 0 === inst_8726;
                      var state_8761__$1 = function() {
                        var statearr_8773 = state_8761;
                        statearr_8773[12] = inst_8735;
                        statearr_8773[13] = inst_8732;
                        return statearr_8773;
                      }();
                      if (cljs.core.truth_(inst_8736)) {
                        var statearr_8774_8787 = state_8761__$1;
                        statearr_8774_8787[1] = 6;
                      } else {
                        var statearr_8775_8788 = state_8761__$1;
                        statearr_8775_8788[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_8762 === 4) {
                        var inst_8751 = state_8761[2];
                        var state_8761__$1 = function() {
                          var statearr_8776 = state_8761;
                          statearr_8776[14] = inst_8751;
                          return statearr_8776;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8761__$1, 9, app.crypto.shaC);
                      } else {
                        if (state_val_8762 === 3) {
                          var inst_8726 = state_8761[9];
                          var inst_8729 = app.logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_8726);
                          var state_8761__$1 = function() {
                            var statearr_8777 = state_8761;
                            statearr_8777[15] = inst_8729;
                            return statearr_8777;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8761__$1, 5, app.crypto.shaC);
                        } else {
                          if (state_val_8762 === 2) {
                            var inst_8710 = state_8761[2];
                            var inst_8711 = cljs.core.async.chan.call(null);
                            var inst_8712 = app.crypto.shaC = inst_8711;
                            var inst_8713 = transactions.length;
                            var inst_8714 = app.crypto.originl = inst_8713;
                            var inst_8715 = app.logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", app.crypto.originl);
                            var inst_8716 = transactions.shift();
                            var inst_8717 = app.crypto.tx = inst_8716;
                            var inst_8718 = transactions.shift();
                            var inst_8719 = app.crypto.next = inst_8718;
                            var inst_8720 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                            var inst_8721 = app.crypto.tx + cljs.core.next;
                            var inst_8722 = app.crypto.sha256c.call(null, inst_8720, inst_8721);
                            var inst_8723 = transactions.shift();
                            var inst_8724 = transactions.length;
                            var inst_8725 = inst_8723;
                            var inst_8726 = inst_8724;
                            var inst_8727 = transactions;
                            var state_8761__$1 = function() {
                              var statearr_8778 = state_8761;
                              statearr_8778[16] = inst_8719;
                              statearr_8778[17] = inst_8722;
                              statearr_8778[8] = inst_8727;
                              statearr_8778[18] = inst_8714;
                              statearr_8778[19] = inst_8715;
                              statearr_8778[20] = inst_8710;
                              statearr_8778[9] = inst_8726;
                              statearr_8778[21] = inst_8717;
                              statearr_8778[10] = inst_8725;
                              statearr_8778[22] = inst_8712;
                              return statearr_8778;
                            }();
                            var statearr_8779_8789 = state_8761__$1;
                            statearr_8779_8789[2] = null;
                            statearr_8779_8789[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_8762 === 1) {
                              var inst_8702 = app.logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_8703 = app.crypto.tr = transactions;
                              var inst_8704 = function() {
                                return function(inst_8702, inst_8703, state_val_8762, c__5725__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", app.crypto.tr);
                                    return app.crypto.tr;
                                  };
                                }(inst_8702, inst_8703, state_val_8762, c__5725__auto__);
                              }();
                              var inst_8705 = app.crypto.a = inst_8704;
                              var inst_8706 = function() {
                                return function(inst_8702, inst_8703, inst_8704, inst_8705, state_val_8762, c__5725__auto__) {
                                  return function() {
                                    return app.database.update.call(null, "txs", app.crypto.a);
                                  };
                                }(inst_8702, inst_8703, inst_8704, inst_8705, state_val_8762, c__5725__auto__);
                              }();
                              var inst_8707 = app.crypto.utx = inst_8706;
                              var inst_8708 = app.database.update.call(null, "txs", app.crypto.a);
                              var state_8761__$1 = function() {
                                var statearr_8780 = state_8761;
                                statearr_8780[23] = inst_8703;
                                statearr_8780[24] = inst_8705;
                                statearr_8780[25] = inst_8707;
                                statearr_8780[26] = inst_8702;
                                return statearr_8780;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8761__$1, 2, inst_8708);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8782 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_8782[0] = state_machine__5713__auto__;
              statearr_8782[1] = 1;
              return statearr_8782;
            };
            var state_machine__5713__auto____1 = function(state_8761) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8761);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8761) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8761);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8783 = f__5726__auto__.call(null);
        statearr_8783[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8783;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.crypto.shaC = cljs.core.async.chan.call(null);
app.crypto.resultToCh = function resultToCh(chan, digest) {
  app.crypto.m = app.crypto.arraybtostring.call(null, digest);
  app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", app.crypto.m);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8801) {
            var state_val_8802 = state_8801[1];
            if (state_val_8802 === 2) {
              var inst_8799 = state_8801[2];
              var state_8801__$1 = state_8801;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8801__$1, inst_8799);
            } else {
              if (state_val_8802 === 1) {
                var state_8801__$1 = state_8801;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8801__$1, 2, chan, app.crypto.m);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8804 = [null, null, null, null, null];
              statearr_8804[0] = state_machine__5713__auto__;
              statearr_8804[1] = 1;
              return statearr_8804;
            };
            var state_machine__5713__auto____1 = function(state_8801) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8801);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8801) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8801);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8805 = f__5726__auto__.call(null);
        statearr_8805[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8805;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.crypto.sha256 = function sha256(x) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj8809 = {"name":"SHA-256"};
    return obj8809;
  }(), app.crypto.encode.call(null, x)).then(app.crypto.shaCallb);
};
app.crypto.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj8813 = {"name":"SHA-256"};
    return obj8813;
  }(), app.crypto.encode.call(null, x)).then(c);
};
app.crypto.s256 = function s256(k) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "about to sha256 ", k);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_8852) {
            var state_val_8853 = state_8852[1];
            if (state_val_8853 === 2) {
              var inst_8846 = state_8852[2];
              var inst_8847 = app.crypto.arraybtostring.call(null, inst_8846);
              var inst_8848 = app.crypto.r = inst_8847;
              var inst_8849 = "got from sha256 " + k;
              var inst_8850 = app.logger.og.call(null, new cljs.core.Keyword(null, "s256", "s256", -1445609188), inst_8849, app.crypto.r);
              var state_8852__$1 = function() {
                var statearr_8854 = state_8852;
                statearr_8854[5] = inst_8848;
                statearr_8854[6] = inst_8850;
                return statearr_8854;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8852__$1, app.crypto.r);
            } else {
              if (state_val_8853 === 1) {
                var inst_8837 = cljs.core.async.chan.call(null);
                var inst_8840 = {"name":"SHA-256"};
                var inst_8841 = app.crypto.encode.call(null, k);
                var inst_8842 = crypto.subtle.digest(inst_8840, inst_8841);
                var inst_8843 = function() {
                  var c = inst_8837;
                  return function(c, inst_8837, inst_8840, inst_8841, inst_8842, state_val_8853, c__5725__auto__) {
                    return function(p1__8814_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__8814_SHARP_);
                    };
                  }(c, inst_8837, inst_8840, inst_8841, inst_8842, state_val_8853, c__5725__auto__);
                }();
                var inst_8844 = inst_8842.then(inst_8843);
                var state_8852__$1 = function() {
                  var statearr_8855 = state_8852;
                  statearr_8855[7] = inst_8844;
                  return statearr_8855;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8852__$1, 2, inst_8837);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_8857 = [null, null, null, null, null, null, null, null];
              statearr_8857[0] = state_machine__5713__auto__;
              statearr_8857[1] = 1;
              return statearr_8857;
            };
            var state_machine__5713__auto____1 = function(state_8852) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_8852);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_8852) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_8852);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_8858 = f__5726__auto__.call(null);
        statearr_8858[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_8858;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.crypto.shaCallb = function shaCallb(digest) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  app.crypto.h = app.crypto.arraybtostring.call(null, digest);
  app.logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), app.crypto.h);
  return pubsub.pub.call(null, "crypto", app.crypto.h);
};
goog.provide("app.database");
goog.require("cljs.core");
goog.require("app.pouchDB");
goog.require("app.blockchain");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("app.pouchDB");
goog.require("app.blockchain");
goog.require("app.crypto");
goog.require("app.crypto");
goog.require("app.logger");
goog.require("app.logger");
app.database.onDatabaseChange = cljs.core.async.chan.call(null);
app.database.onDatabaseChange.type = "databaseChange";
app.database.update = function update(k, f) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10667) {
            var state_val_10668 = state_10667[1];
            if (state_val_10668 === 5) {
              var inst_10665 = state_10667[2];
              var state_10667__$1 = function() {
                var statearr_10669 = state_10667;
                statearr_10669[5] = inst_10665;
                return statearr_10669;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10667__$1, app.database.r);
            } else {
              if (state_val_10668 === 4) {
                var state_10667__$1 = state_10667;
                var statearr_10670_10683 = state_10667__$1;
                statearr_10670_10683[2] = app.database.r;
                statearr_10670_10683[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10668 === 3) {
                  var inst_10662 = app.database.r.val;
                  var state_10667__$1 = state_10667;
                  var statearr_10671_10684 = state_10667__$1;
                  statearr_10671_10684[2] = inst_10662;
                  statearr_10671_10684[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10668 === 2) {
                    var inst_10657 = state_10667[2];
                    var inst_10658 = app.database.r = inst_10657;
                    var inst_10659 = "got from db " + k;
                    var inst_10660 = app.logger.og.call(null, new cljs.core.Keyword(null, "db", "db", 993250759), inst_10659, app.database.r);
                    var state_10667__$1 = function() {
                      var statearr_10672 = state_10667;
                      statearr_10672[6] = inst_10660;
                      statearr_10672[7] = inst_10658;
                      return statearr_10672;
                    }();
                    if (cljs.core.truth_(app.database.r)) {
                      var statearr_10673_10685 = state_10667__$1;
                      statearr_10673_10685[1] = 3;
                    } else {
                      var statearr_10674_10686 = state_10667__$1;
                      statearr_10674_10686[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10668 === 1) {
                      var inst_10651 = cljs.core.async.chan.call(null);
                      var inst_10652 = function() {
                        var c = inst_10651;
                        return function(c, inst_10651, state_val_10668, c__5725__auto__) {
                          return function(err, v) {
                            app.logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update ", v);
                            app.logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update err ", err);
                            if (cljs.core.truth_(v)) {
                              app.logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "rev ", v._rev);
                              return app.pouchDB.dbase.put(function() {
                                var obj10676 = {"val":f.call(null, v.val)};
                                return obj10676;
                              }(), k, v._rev, function(c, inst_10651, state_val_10668, c__5725__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_10651, state_val_10668, c__5725__auto__));
                            } else {
                              return app.pouchDB.dbase.put(function() {
                                var obj10678 = {"val":f.call(null, v)};
                                return obj10678;
                              }(), k, function(c, inst_10651, state_val_10668, c__5725__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_10651, state_val_10668, c__5725__auto__));
                            }
                          };
                        }(c, inst_10651, state_val_10668, c__5725__auto__);
                      }();
                      var inst_10653 = app.database.sf = inst_10652;
                      var inst_10654 = app.pouchDB.dbase.get(k, app.database.sf);
                      var inst_10655 = app.database.g.call(null, k);
                      var state_10667__$1 = function() {
                        var statearr_10679 = state_10667;
                        statearr_10679[8] = inst_10653;
                        statearr_10679[9] = inst_10654;
                        return statearr_10679;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10667__$1, 2, inst_10655);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10681 = [null, null, null, null, null, null, null, null, null, null];
              statearr_10681[0] = state_machine__5713__auto__;
              statearr_10681[1] = 1;
              return statearr_10681;
            };
            var state_machine__5713__auto____1 = function(state_10667) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10667);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10667) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10667);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10682 = f__5726__auto__.call(null);
        statearr_10682[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10682;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.database.g = function g(k) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), "getting from db ", k);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10731) {
            var state_val_10732 = state_10731[1];
            if (state_val_10732 === 5) {
              var inst_10729 = state_10731[2];
              var state_10731__$1 = state_10731;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10731__$1, inst_10729);
            } else {
              if (state_val_10732 === 4) {
                var state_10731__$1 = state_10731;
                var statearr_10733_10742 = state_10731__$1;
                statearr_10733_10742[2] = app.database.r;
                statearr_10733_10742[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10732 === 3) {
                  var inst_10726 = app.database.r.val;
                  var state_10731__$1 = state_10731;
                  var statearr_10734_10743 = state_10731__$1;
                  statearr_10734_10743[2] = inst_10726;
                  statearr_10734_10743[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10732 === 2) {
                    var inst_10721 = state_10731[2];
                    var inst_10722 = app.database.r = inst_10721;
                    var inst_10723 = "got from db " + k;
                    var inst_10724 = app.logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), inst_10723, app.database.r);
                    var state_10731__$1 = function() {
                      var statearr_10735 = state_10731;
                      statearr_10735[5] = inst_10724;
                      statearr_10735[6] = inst_10722;
                      return statearr_10735;
                    }();
                    if (cljs.core.truth_(app.database.r)) {
                      var statearr_10736_10744 = state_10731__$1;
                      statearr_10736_10744[1] = 3;
                    } else {
                      var statearr_10737_10745 = state_10731__$1;
                      statearr_10737_10745[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10732 === 1) {
                      var inst_10715 = cljs.core.async.chan.call(null);
                      var inst_10716 = app.pouchDB.dbase.get(k);
                      var inst_10717 = function() {
                        var c = inst_10715;
                        return function(c, inst_10715, inst_10716, state_val_10732, c__5725__auto__) {
                          return function(p1__10687_SHARP_) {
                            return cljs.core.async.put_BANG_.call(null, c, p1__10687_SHARP_);
                          };
                        }(c, inst_10715, inst_10716, state_val_10732, c__5725__auto__);
                      }();
                      var inst_10718 = function() {
                        var c = inst_10715;
                        return function(c, inst_10715, inst_10716, inst_10717, state_val_10732, c__5725__auto__) {
                          return function() {
                            return cljs.core.async.put_BANG_.call(null, c, false);
                          };
                        }(c, inst_10715, inst_10716, inst_10717, state_val_10732, c__5725__auto__);
                      }();
                      var inst_10719 = inst_10716.then(inst_10717, inst_10718);
                      var state_10731__$1 = function() {
                        var statearr_10738 = state_10731;
                        statearr_10738[7] = inst_10719;
                        return statearr_10738;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10731__$1, 2, inst_10715);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10740 = [null, null, null, null, null, null, null, null];
              statearr_10740[0] = state_machine__5713__auto__;
              statearr_10740[1] = 1;
              return statearr_10740;
            };
            var state_machine__5713__auto____1 = function(state_10731) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10731);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10731) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10731);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10741 = f__5726__auto__.call(null);
        statearr_10741[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10741;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.database.ps = function ps(key, v) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10783) {
            var state_val_10784 = state_10783[1];
            if (state_val_10784 === 2) {
              var inst_10780 = state_10783[2];
              var inst_10781 = app.logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "just done put s ");
              var state_10783__$1 = function() {
                var statearr_10785 = state_10783;
                statearr_10785[5] = inst_10781;
                statearr_10785[6] = inst_10780;
                return statearr_10785;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10783__$1, 1);
            } else {
              if (state_val_10784 === 1) {
                var inst_10768 = cljs.core.async.chan.call(null);
                var inst_10769 = app.database.c = inst_10768;
                var inst_10770 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_10771 = [key, v];
                var inst_10772 = new cljs.core.PersistentVector(null, 2, 5, inst_10770, inst_10771, null);
                var inst_10773 = app.logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", inst_10772);
                var inst_10776 = {"_id":key, "val":v};
                var inst_10777 = function() {
                  return function(inst_10768, inst_10769, inst_10770, inst_10771, inst_10772, inst_10773, inst_10776, state_val_10784, c__5725__auto__) {
                    return function() {
                      return cljs.core.async.put_BANG_.call(null, app.database.c, 1);
                    };
                  }(inst_10768, inst_10769, inst_10770, inst_10771, inst_10772, inst_10773, inst_10776, state_val_10784, c__5725__auto__);
                }();
                var inst_10778 = app.pouchDB.dbase.put(inst_10776, inst_10777);
                var state_10783__$1 = function() {
                  var statearr_10786 = state_10783;
                  statearr_10786[7] = inst_10773;
                  statearr_10786[8] = inst_10769;
                  statearr_10786[9] = inst_10778;
                  return statearr_10786;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10783__$1, 2, app.database.c);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10788 = [null, null, null, null, null, null, null, null, null, null];
              statearr_10788[0] = state_machine__5713__auto__;
              statearr_10788[1] = 1;
              return statearr_10788;
            };
            var state_machine__5713__auto____1 = function(state_10783) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10783);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10783) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10783);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10789 = f__5726__auto__.call(null);
        statearr_10789[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10789;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.database.p = function p(key, v) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, v], null));
  return app.pouchDB.dbase.put(function() {
    var obj10793 = {"_id":key, "val":v};
    return obj10793;
  }());
};
app.database.initDBase = function initDBase(dbase) {
  var c = cljs.core.async.chan.call(null);
  var c__5725__auto___10902 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___10902, c) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto___10902, c) {
          return function(state_10887) {
            var state_val_10888 = state_10887[1];
            if (state_val_10888 === 7) {
              var inst_10863 = state_10887[5];
              var inst_10866 = state_10887[2];
              var inst_10867 = cljs.core.PersistentVector.EMPTY;
              var inst_10868 = {"header":inst_10863, "hash":inst_10866, "transactions":inst_10867};
              var inst_10869 = app.database.blck = inst_10868;
              var inst_10870 = app.logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", app.database.blck);
              var inst_10871 = app.database.blck.header;
              var inst_10872 = inst_10871.heightFromRoot = 0;
              var inst_10873 = app.database.ps.call(null, "last", app.database.blck);
              var state_10887__$1 = function() {
                var statearr_10889 = state_10887;
                statearr_10889[6] = inst_10872;
                statearr_10889[7] = inst_10870;
                statearr_10889[8] = inst_10869;
                return statearr_10889;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 8, inst_10873);
            } else {
              if (state_val_10888 === 1) {
                var inst_10848 = app.database.g.call(null, "last");
                var state_10887__$1 = state_10887;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 2, inst_10848);
              } else {
                if (state_val_10888 === 4) {
                  var inst_10857 = app.logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_10858 = app.database.ps.call(null, "height", 0);
                  var state_10887__$1 = function() {
                    var statearr_10890 = state_10887;
                    statearr_10890[9] = inst_10857;
                    return statearr_10890;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 6, inst_10858);
                } else {
                  if (state_val_10888 === 6) {
                    var inst_10860 = state_10887[2];
                    var inst_10863 = app.blockchain.makeBlockHeader.call(null, 0, 0, 0, 0, 0, 0, 0);
                    var inst_10864 = app.crypto.bHash.call(null, 0);
                    var state_10887__$1 = function() {
                      var statearr_10891 = state_10887;
                      statearr_10891[5] = inst_10863;
                      statearr_10891[10] = inst_10860;
                      return statearr_10891;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 7, inst_10864);
                  } else {
                    if (state_val_10888 === 3) {
                      var inst_10855 = app.logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", app.database.lastone);
                      var state_10887__$1 = state_10887;
                      var statearr_10892_10903 = state_10887__$1;
                      statearr_10892_10903[2] = inst_10855;
                      statearr_10892_10903[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10888 === 2) {
                        var inst_10850 = state_10887[2];
                        var inst_10851 = app.database.lastone = inst_10850;
                        var inst_10852 = app.logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_10853 = app.logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", app.database.lastone);
                        var state_10887__$1 = function() {
                          var statearr_10893 = state_10887;
                          statearr_10893[11] = inst_10853;
                          statearr_10893[12] = inst_10852;
                          statearr_10893[13] = inst_10851;
                          return statearr_10893;
                        }();
                        if (cljs.core.truth_(app.database.lastone)) {
                          var statearr_10894_10904 = state_10887__$1;
                          statearr_10894_10904[1] = 3;
                        } else {
                          var statearr_10895_10905 = state_10887__$1;
                          statearr_10895_10905[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10888 === 9) {
                          var inst_10879 = state_10887[2];
                          var inst_10880 = "b" + 0;
                          var inst_10881 = app.database.ps.call(null, inst_10880, app.database.blck);
                          var state_10887__$1 = function() {
                            var statearr_10896 = state_10887;
                            statearr_10896[14] = inst_10879;
                            return statearr_10896;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 10, inst_10881);
                        } else {
                          if (state_val_10888 === 5) {
                            var inst_10885 = state_10887[2];
                            var state_10887__$1 = state_10887;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10887__$1, inst_10885);
                          } else {
                            if (state_val_10888 === 10) {
                              var inst_10883 = state_10887[2];
                              var state_10887__$1 = state_10887;
                              var statearr_10897_10906 = state_10887__$1;
                              statearr_10897_10906[2] = inst_10883;
                              statearr_10897_10906[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10888 === 8) {
                                var inst_10875 = state_10887[2];
                                var inst_10876 = app.database.blck.hash;
                                var inst_10877 = app.database.ps.call(null, inst_10876, app.database.blck);
                                var state_10887__$1 = function() {
                                  var statearr_10898 = state_10887;
                                  statearr_10898[15] = inst_10875;
                                  return statearr_10898;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 9, inst_10877);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto___10902, c);
        return function(switch__5712__auto__, c__5725__auto___10902, c) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10900 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10900[0] = state_machine__5713__auto__;
              statearr_10900[1] = 1;
              return statearr_10900;
            };
            var state_machine__5713__auto____1 = function(state_10887) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10887);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10887) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10887);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto___10902, c);
      }();
      var state__5727__auto__ = function() {
        var statearr_10901 = f__5726__auto__.call(null);
        statearr_10901[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___10902;
        return statearr_10901;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto___10902, c));
  return 1;
};
goog.provide("app.intercomMake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("app.database");
goog.require("app.database");
goog.require("app.logger");
goog.require("app.logger");
app.intercomMake.makeInv = function makeInv(typ, message) {
  var obj11354 = {"type":"json", "data":JSON.stringify(function() {
    var obj11356 = {"type":"inv", "data":function() {
      var obj11358 = {"type":typ, "vector":message};
      return obj11358;
    }()};
    return obj11356;
  }())};
  return obj11354;
};
app.intercomMake.makeData = function makeData(typ, message) {
  return null;
};
app.intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
app.intercomMake.makeVersion = function makeVersion(message) {
  var obj11362 = {"type":"version", "data":message};
  return obj11362;
};
app.intercomMake.makeConn = function makeConn(conn) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj11366 = {"type":"conn", "data":conn};
  return obj11366;
};
app.intercomMake.makeGetBlock = function makeGetBlock(hash) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_11472) {
            var state_val_11473 = state_11472[1];
            if (state_val_11473 === 7) {
              var state_11472__$1 = state_11472;
              var statearr_11474_11493 = state_11472__$1;
              statearr_11474_11493[2] = null;
              statearr_11474_11493[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11473 === 1) {
                var inst_11432 = [];
                var inst_11433 = {"count":0, "blocks":inst_11432};
                var inst_11434 = inst_11433[app.intercomMake.hash_stop] = 0;
                var inst_11435 = app.intercomMake.gtBlock = inst_11433;
                var inst_11436 = app.blockchain.blockchainHeight.call(null, 1);
                var state_11472__$1 = function() {
                  var statearr_11475 = state_11472;
                  statearr_11475[5] = inst_11434;
                  statearr_11475[6] = inst_11435;
                  return statearr_11475;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11472__$1, 2, inst_11436);
              } else {
                if (state_val_11473 === 4) {
                  var inst_11470 = state_11472[2];
                  var state_11472__$1 = function() {
                    var statearr_11476 = state_11472;
                    statearr_11476[7] = inst_11470;
                    return statearr_11476;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11472__$1, app.intercomMake.gtBlock);
                } else {
                  if (state_val_11473 === 6) {
                    var inst_11441 = state_11472[8];
                    var inst_11457 = inst_11441 < 10;
                    var state_11472__$1 = state_11472;
                    if (cljs.core.truth_(inst_11457)) {
                      var statearr_11477_11494 = state_11472__$1;
                      statearr_11477_11494[1] = 9;
                    } else {
                      var statearr_11478_11495 = state_11472__$1;
                      statearr_11478_11495[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11473 === 3) {
                      var inst_11441 = state_11472[8];
                      var inst_11440 = state_11472[9];
                      var inst_11443 = "new loop " + inst_11440;
                      var inst_11444 = inst_11443 + " ";
                      var inst_11445 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_11444, inst_11441);
                      var inst_11446 = "b" + inst_11440;
                      var inst_11447 = app.database.g.call(null, inst_11446);
                      var state_11472__$1 = function() {
                        var statearr_11479 = state_11472;
                        statearr_11479[10] = inst_11445;
                        return statearr_11479;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11472__$1, 5, inst_11447);
                    } else {
                      if (state_val_11473 === 2) {
                        var inst_11438 = state_11472[2];
                        var inst_11439 = app.intercomMake.heightForBlock = inst_11438;
                        var inst_11440 = app.intercomMake.heightForBlock;
                        var inst_11441 = 0;
                        var state_11472__$1 = function() {
                          var statearr_11480 = state_11472;
                          statearr_11480[8] = inst_11441;
                          statearr_11480[11] = inst_11439;
                          statearr_11480[9] = inst_11440;
                          return statearr_11480;
                        }();
                        var statearr_11481_11496 = state_11472__$1;
                        statearr_11481_11496[2] = null;
                        statearr_11481_11496[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11473 === 11) {
                          var inst_11441 = state_11472[8];
                          var inst_11463 = state_11472[2];
                          var inst_11464 = inst_11441 + 1;
                          var inst_11440 = inst_11463;
                          var inst_11441__$1 = inst_11464;
                          var state_11472__$1 = function() {
                            var statearr_11482 = state_11472;
                            statearr_11482[8] = inst_11441__$1;
                            statearr_11482[9] = inst_11440;
                            return statearr_11482;
                          }();
                          var statearr_11483_11497 = state_11472__$1;
                          statearr_11483_11497[2] = null;
                          statearr_11483_11497[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11473 === 9) {
                            var inst_11440 = state_11472[9];
                            var inst_11459 = inst_11440 - 1;
                            var state_11472__$1 = state_11472;
                            var statearr_11484_11498 = state_11472__$1;
                            statearr_11484_11498[2] = inst_11459;
                            statearr_11484_11498[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11473 === 5) {
                              var inst_11440 = state_11472[9];
                              var inst_11449 = state_11472[2];
                              var inst_11450 = app.intercomMake.blockg = inst_11449;
                              var inst_11451 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_11452 = app.intercomMake.gtBlock.count = inst_11440;
                              var inst_11453 = app.intercomMake.gtBlock.blocks;
                              var inst_11454 = inst_11453.push(app.intercomMake.blockg);
                              var inst_11455 = 0 < inst_11440;
                              var state_11472__$1 = function() {
                                var statearr_11485 = state_11472;
                                statearr_11485[12] = inst_11452;
                                statearr_11485[13] = inst_11454;
                                statearr_11485[14] = inst_11450;
                                statearr_11485[15] = inst_11451;
                                return statearr_11485;
                              }();
                              if (cljs.core.truth_(inst_11455)) {
                                var statearr_11486_11499 = state_11472__$1;
                                statearr_11486_11499[1] = 6;
                              } else {
                                var statearr_11487_11500 = state_11472__$1;
                                statearr_11487_11500[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11473 === 10) {
                                var inst_11440 = state_11472[9];
                                var inst_11461 = cljs.core.quot.call(null, inst_11440, 2);
                                var state_11472__$1 = state_11472;
                                var statearr_11488_11501 = state_11472__$1;
                                statearr_11488_11501[2] = inst_11461;
                                statearr_11488_11501[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11473 === 8) {
                                  var inst_11468 = state_11472[2];
                                  var state_11472__$1 = state_11472;
                                  var statearr_11489_11502 = state_11472__$1;
                                  statearr_11489_11502[2] = inst_11468;
                                  statearr_11489_11502[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_11491 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11491[0] = state_machine__5713__auto__;
              statearr_11491[1] = 1;
              return statearr_11491;
            };
            var state_machine__5713__auto____1 = function(state_11472) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_11472);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_11472) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_11472);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_11492 = f__5726__auto__.call(null);
        statearr_11492[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_11492;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
goog.provide("communications");
goog.require("cljs.core");
goog.require("app.crypto");
goog.require("app.mining");
goog.require("peerjs");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("app.intercom");
goog.require("app.intercomMake");
goog.require("pubsub");
goog.require("app.database");
goog.require("app.blockchain");
goog.require("peerjs");
goog.require("app.intercom");
goog.require("cljs.core.async");
goog.require("app.database");
goog.require("app.blockchain");
goog.require("app.intercomMake");
goog.require("app.logger");
goog.require("app.mining");
goog.require("app.crypto");
goog.require("app.logger");
goog.require("app.crypto");
communications.intercomMeta = function() {
  var obj10499 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj10499;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10645) {
            var state_val_10646 = state_10645[1];
            if (state_val_10646 === 7) {
              var inst_10593 = state_10645[5];
              var inst_10594 = state_10645[6];
              var inst_10595 = state_10645[7];
              var inst_10596 = state_10645[8];
              var inst_10610 = state_10645[2];
              var inst_10611 = inst_10596 + 1;
              var tmp10647 = inst_10593;
              var tmp10648 = inst_10594;
              var tmp10649 = inst_10595;
              var inst_10593__$1 = tmp10647;
              var inst_10594__$1 = tmp10648;
              var inst_10595__$1 = tmp10649;
              var inst_10596__$1 = inst_10611;
              var state_10645__$1 = function() {
                var statearr_10650 = state_10645;
                statearr_10650[9] = inst_10610;
                statearr_10650[5] = inst_10593__$1;
                statearr_10650[6] = inst_10594__$1;
                statearr_10650[7] = inst_10595__$1;
                statearr_10650[8] = inst_10596__$1;
                return statearr_10650;
              }();
              var statearr_10651_10674 = state_10645__$1;
              statearr_10651_10674[2] = null;
              statearr_10651_10674[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10646 === 1) {
                var inst_10591 = communications.intercomMeta.knownPeersChannels;
                var inst_10592 = cljs.core.seq.call(null, inst_10591);
                var inst_10593 = inst_10592;
                var inst_10594 = null;
                var inst_10595 = 0;
                var inst_10596 = 0;
                var state_10645__$1 = function() {
                  var statearr_10652 = state_10645;
                  statearr_10652[5] = inst_10593;
                  statearr_10652[6] = inst_10594;
                  statearr_10652[7] = inst_10595;
                  statearr_10652[8] = inst_10596;
                  return statearr_10652;
                }();
                var statearr_10653_10675 = state_10645__$1;
                statearr_10653_10675[2] = null;
                statearr_10653_10675[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10646 === 4) {
                  var inst_10594 = state_10645[6];
                  var inst_10596 = state_10645[8];
                  var inst_10601 = cljs.core._nth.call(null, inst_10594, inst_10596);
                  var inst_10602 = "broadsacting new block to peer " + inst_10601;
                  var inst_10603 = inst_10602 + " ";
                  var inst_10604 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_10603, blockk);
                  var inst_10605 = [];
                  var inst_10606 = communications.vectoR = inst_10605;
                  var inst_10607 = communications.vectoR.push(blockk);
                  var inst_10608 = app.intercomMake.makeInv.call(null, "block", communications.vectoR);
                  var state_10645__$1 = function() {
                    var statearr_10654 = state_10645;
                    statearr_10654[10] = inst_10606;
                    statearr_10654[11] = inst_10604;
                    statearr_10654[12] = inst_10607;
                    return statearr_10654;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10645__$1, 7, inst_10601, inst_10608);
                } else {
                  if (state_val_10646 === 13) {
                    var inst_10636 = state_10645[2];
                    var state_10645__$1 = state_10645;
                    var statearr_10655_10676 = state_10645__$1;
                    statearr_10655_10676[2] = inst_10636;
                    statearr_10655_10676[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10646 === 6) {
                      var inst_10641 = state_10645[2];
                      var state_10645__$1 = state_10645;
                      var statearr_10656_10677 = state_10645__$1;
                      statearr_10656_10677[2] = inst_10641;
                      statearr_10656_10677[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10646 === 3) {
                        var inst_10643 = state_10645[2];
                        var state_10645__$1 = state_10645;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10645__$1, inst_10643);
                      } else {
                        if (state_val_10646 === 12) {
                          var inst_10614 = state_10645[13];
                          var inst_10623 = cljs.core.first.call(null, inst_10614);
                          var inst_10624 = "broadsacting new block to peer " + inst_10623;
                          var inst_10625 = inst_10624 + " ";
                          var inst_10626 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_10625, blockk);
                          var inst_10627 = [];
                          var inst_10628 = communications.vectoR = inst_10627;
                          var inst_10629 = communications.vectoR.push(blockk);
                          var inst_10630 = app.intercomMake.makeInv.call(null, "block", communications.vectoR);
                          var state_10645__$1 = function() {
                            var statearr_10657 = state_10645;
                            statearr_10657[14] = inst_10629;
                            statearr_10657[15] = inst_10628;
                            statearr_10657[16] = inst_10626;
                            return statearr_10657;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10645__$1, 14, inst_10623, inst_10630);
                        } else {
                          if (state_val_10646 === 2) {
                            var inst_10595 = state_10645[7];
                            var inst_10596 = state_10645[8];
                            var inst_10598 = inst_10596 < inst_10595;
                            var inst_10599 = inst_10598;
                            var state_10645__$1 = state_10645;
                            if (cljs.core.truth_(inst_10599)) {
                              var statearr_10658_10678 = state_10645__$1;
                              statearr_10658_10678[1] = 4;
                            } else {
                              var statearr_10659_10679 = state_10645__$1;
                              statearr_10659_10679[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10646 === 11) {
                              var inst_10614 = state_10645[13];
                              var inst_10618 = cljs.core.chunk_first.call(null, inst_10614);
                              var inst_10619 = cljs.core.chunk_rest.call(null, inst_10614);
                              var inst_10620 = cljs.core.count.call(null, inst_10618);
                              var inst_10593 = inst_10619;
                              var inst_10594 = inst_10618;
                              var inst_10595 = inst_10620;
                              var inst_10596 = 0;
                              var state_10645__$1 = function() {
                                var statearr_10660 = state_10645;
                                statearr_10660[5] = inst_10593;
                                statearr_10660[6] = inst_10594;
                                statearr_10660[7] = inst_10595;
                                statearr_10660[8] = inst_10596;
                                return statearr_10660;
                              }();
                              var statearr_10661_10680 = state_10645__$1;
                              statearr_10661_10680[2] = null;
                              statearr_10661_10680[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10646 === 9) {
                                var state_10645__$1 = state_10645;
                                var statearr_10662_10681 = state_10645__$1;
                                statearr_10662_10681[2] = null;
                                statearr_10662_10681[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10646 === 5) {
                                  var inst_10593 = state_10645[5];
                                  var inst_10614 = state_10645[13];
                                  var inst_10614__$1 = cljs.core.seq.call(null, inst_10593);
                                  var state_10645__$1 = function() {
                                    var statearr_10663 = state_10645;
                                    statearr_10663[13] = inst_10614__$1;
                                    return statearr_10663;
                                  }();
                                  if (inst_10614__$1) {
                                    var statearr_10664_10682 = state_10645__$1;
                                    statearr_10664_10682[1] = 8;
                                  } else {
                                    var statearr_10665_10683 = state_10645__$1;
                                    statearr_10665_10683[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10646 === 14) {
                                    var inst_10614 = state_10645[13];
                                    var inst_10632 = state_10645[2];
                                    var inst_10633 = cljs.core.next.call(null, inst_10614);
                                    var inst_10593 = inst_10633;
                                    var inst_10594 = null;
                                    var inst_10595 = 0;
                                    var inst_10596 = 0;
                                    var state_10645__$1 = function() {
                                      var statearr_10666 = state_10645;
                                      statearr_10666[17] = inst_10632;
                                      statearr_10666[5] = inst_10593;
                                      statearr_10666[6] = inst_10594;
                                      statearr_10666[7] = inst_10595;
                                      statearr_10666[8] = inst_10596;
                                      return statearr_10666;
                                    }();
                                    var statearr_10667_10684 = state_10645__$1;
                                    statearr_10667_10684[2] = null;
                                    statearr_10667_10684[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10646 === 10) {
                                      var inst_10639 = state_10645[2];
                                      var state_10645__$1 = state_10645;
                                      var statearr_10668_10685 = state_10645__$1;
                                      statearr_10668_10685[2] = inst_10639;
                                      statearr_10668_10685[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10646 === 8) {
                                        var inst_10614 = state_10645[13];
                                        var inst_10616 = cljs.core.chunked_seq_QMARK_.call(null, inst_10614);
                                        var state_10645__$1 = state_10645;
                                        if (inst_10616) {
                                          var statearr_10669_10686 = state_10645__$1;
                                          statearr_10669_10686[1] = 11;
                                        } else {
                                          var statearr_10670_10687 = state_10645__$1;
                                          statearr_10670_10687[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10672 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10672[0] = state_machine__5713__auto__;
              statearr_10672[1] = 1;
              return statearr_10672;
            };
            var state_machine__5713__auto____1 = function(state_10645) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10645);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10645) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10645);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10673 = f__5726__auto__.call(null);
        statearr_10673[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10673;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  app.logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10705) {
            var state_val_10706 = state_10705[1];
            if (state_val_10706 === 2) {
              var inst_10703 = state_10705[2];
              var state_10705__$1 = state_10705;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10705__$1, inst_10703);
            } else {
              if (state_val_10706 === 1) {
                var inst_10701 = {"type":type, "msg":msg};
                var state_10705__$1 = state_10705;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10705__$1, 2, peer, inst_10701);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10708 = [null, null, null, null, null];
              statearr_10708[0] = state_machine__5713__auto__;
              statearr_10708[1] = 1;
              return statearr_10708;
            };
            var state_machine__5713__auto____1 = function(state_10705) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10705);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10705) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10705);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10709 = f__5726__auto__.call(null);
        statearr_10709[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10709;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.sendm = function sendm(peer, payload) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  app.logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10721) {
            var state_val_10722 = state_10721[1];
            if (state_val_10722 === 2) {
              var inst_10719 = state_10721[2];
              var state_10721__$1 = state_10721;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10721__$1, inst_10719);
            } else {
              if (state_val_10722 === 1) {
                var state_10721__$1 = state_10721;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10721__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10724 = [null, null, null, null, null];
              statearr_10724[0] = state_machine__5713__auto__;
              statearr_10724[1] = 1;
              return statearr_10724;
            };
            var state_machine__5713__auto____1 = function(state_10721) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10721);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10721) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10721);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10725 = f__5726__auto__.call(null);
        statearr_10725[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10725;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.onOpen = function onOpen(conn) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__5725__auto___10742 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto___10742) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto___10742) {
          return function(state_10737) {
            var state_val_10738 = state_10737[1];
            if (state_val_10738 === 2) {
              var inst_10735 = state_10737[2];
              var state_10737__$1 = state_10737;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10737__$1, inst_10735);
            } else {
              if (state_val_10738 === 1) {
                var state_10737__$1 = state_10737;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10737__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto___10742);
        return function(switch__5712__auto__, c__5725__auto___10742) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10740 = [null, null, null, null, null];
              statearr_10740[0] = state_machine__5713__auto__;
              statearr_10740[1] = 1;
              return statearr_10740;
            };
            var state_machine__5713__auto____1 = function(state_10737) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10737);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10737) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10737);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto___10742);
      }();
      var state__5727__auto__ = function() {
        var statearr_10741 = f__5726__auto__.call(null);
        statearr_10741[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto___10742;
        return statearr_10741;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto___10742));
  return app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10754) {
            var state_val_10755 = state_10754[1];
            if (state_val_10755 === 2) {
              var inst_10752 = state_10754[2];
              var state_10754__$1 = state_10754;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10754__$1, inst_10752);
            } else {
              if (state_val_10755 === 1) {
                var state_10754__$1 = state_10754;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10754__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10757 = [null, null, null, null, null];
              statearr_10757[0] = state_machine__5713__auto__;
              statearr_10757[1] = 1;
              return statearr_10757;
            };
            var state_machine__5713__auto____1 = function(state_10754) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10754);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10754) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10754);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10758 = f__5726__auto__.call(null);
        statearr_10758[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10758;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.onData = function onData(read, data) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10770) {
            var state_val_10771 = state_10770[1];
            if (state_val_10771 === 2) {
              var inst_10768 = state_10770[2];
              var state_10770__$1 = state_10770;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10770__$1, inst_10768);
            } else {
              if (state_val_10771 === 1) {
                var state_10770__$1 = state_10770;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10770__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10773 = [null, null, null, null, null];
              statearr_10773[0] = state_machine__5713__auto__;
              statearr_10773[1] = 1;
              return statearr_10773;
            };
            var state_machine__5713__auto____1 = function(state_10770) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10770);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10770) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10770);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10774 = f__5726__auto__.call(null);
        statearr_10774[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10774;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10929) {
            var state_val_10930 = state_10929[1];
            if (state_val_10930 === 7) {
              var inst_10924 = state_10929[2];
              var state_10929__$1 = function() {
                var statearr_10931 = state_10929;
                statearr_10931[5] = inst_10924;
                return statearr_10931;
              }();
              var statearr_10932_10959 = state_10929__$1;
              statearr_10932_10959[2] = null;
              statearr_10932_10959[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10930 === 1) {
                var state_10929__$1 = state_10929;
                var statearr_10933_10960 = state_10929__$1;
                statearr_10933_10960[2] = null;
                statearr_10933_10960[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10930 === 4) {
                  var inst_10871 = state_10929[2];
                  var inst_10872 = communications.v = inst_10871;
                  var inst_10873 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_10874 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_10875 = communications.vrecieved = inst_10874;
                  var inst_10876 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_10877 = communications.ch2 = inst_10876;
                  var inst_10878 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_10879 = inst_10878 === communications.connectionch;
                  var state_10929__$1 = function() {
                    var statearr_10934 = state_10929;
                    statearr_10934[6] = inst_10872;
                    statearr_10934[7] = inst_10877;
                    statearr_10934[8] = inst_10875;
                    statearr_10934[9] = inst_10873;
                    return statearr_10934;
                  }();
                  if (cljs.core.truth_(inst_10879)) {
                    var statearr_10935_10961 = state_10929__$1;
                    statearr_10935_10961[1] = 5;
                  } else {
                    var statearr_10936_10962 = state_10929__$1;
                    statearr_10936_10962[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10930 === 15) {
                    var state_10929__$1 = state_10929;
                    var statearr_10937_10963 = state_10929__$1;
                    statearr_10937_10963[2] = null;
                    statearr_10937_10963[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10930 === 13) {
                      var inst_10904 = state_10929[2];
                      var inst_10905 = communications.ch2.writec;
                      var inst_10906 = communications.vrecieved.peer = inst_10905;
                      var inst_10907 = communications.ch2.conn;
                      var inst_10908 = app.intercom.intercomstatemachine.call(null, inst_10907, communications.vrecieved);
                      var state_10929__$1 = function() {
                        var statearr_10938 = state_10929;
                        statearr_10938[10] = inst_10906;
                        statearr_10938[11] = inst_10904;
                        return statearr_10938;
                      }();
                      var statearr_10939_10964 = state_10929__$1;
                      statearr_10939_10964[2] = inst_10908;
                      statearr_10939_10964[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10930 === 6) {
                        var inst_10892 = communications.ch2.type;
                        var inst_10893 = inst_10892 === "readch";
                        var state_10929__$1 = state_10929;
                        if (cljs.core.truth_(inst_10893)) {
                          var statearr_10940_10965 = state_10929__$1;
                          statearr_10940_10965[1] = 8;
                        } else {
                          var statearr_10941_10966 = state_10929__$1;
                          statearr_10941_10966[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10930 === 3) {
                          var inst_10927 = state_10929[2];
                          var state_10929__$1 = state_10929;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10929__$1, inst_10927);
                        } else {
                          if (state_val_10930 === 12) {
                            var state_10929__$1 = state_10929;
                            var statearr_10942_10967 = state_10929__$1;
                            statearr_10942_10967[2] = null;
                            statearr_10942_10967[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10930 === 2) {
                              var inst_10868 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                              var inst_10869 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                              var state_10929__$1 = function() {
                                var statearr_10943 = state_10929;
                                statearr_10943[12] = inst_10868;
                                statearr_10943[13] = inst_10869;
                                return statearr_10943;
                              }();
                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_10929__$1, 4, communications.stated);
                            } else {
                              if (state_val_10930 === 11) {
                                var inst_10899 = communications.vrecieved.data;
                                var inst_10900 = JSON.parse(inst_10899);
                                var inst_10901 = communications.vrecieved = inst_10900;
                                var state_10929__$1 = state_10929;
                                var statearr_10944_10968 = state_10929__$1;
                                statearr_10944_10968[2] = inst_10901;
                                statearr_10944_10968[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10930 === 9) {
                                  var inst_10910 = communications.ch2.type;
                                  var inst_10911 = inst_10910 === "writech";
                                  var state_10929__$1 = state_10929;
                                  if (cljs.core.truth_(inst_10911)) {
                                    var statearr_10945_10969 = state_10929__$1;
                                    statearr_10945_10969[1] = 14;
                                  } else {
                                    var statearr_10946_10970 = state_10929__$1;
                                    statearr_10946_10970[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10930 === 5) {
                                    var inst_10881 = cljs.core.PersistentVector.EMPTY;
                                    var inst_10882 = communications.onNewConnection.call(null, communications.vrecieved);
                                    var inst_10883 = cljs.core.concat.call(null, communications.stated, inst_10882);
                                    var inst_10884 = cljs.core.into.call(null, inst_10881, inst_10883);
                                    var inst_10885 = communications.stated = inst_10884;
                                    var inst_10886 = app.intercom.getIntercomState.call(null, communications.vrecieved);
                                    var inst_10887 = communications.stat = inst_10886;
                                    var inst_10888 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "intercom state", communications.stat);
                                    var inst_10889 = app.intercomMake.makeConn.call(null, communications.vrecieved);
                                    var inst_10890 = app.intercom.intercomstatemachine.call(null, communications.vrecieved, inst_10889);
                                    var state_10929__$1 = function() {
                                      var statearr_10947 = state_10929;
                                      statearr_10947[14] = inst_10885;
                                      statearr_10947[15] = inst_10888;
                                      statearr_10947[16] = inst_10887;
                                      return statearr_10947;
                                    }();
                                    var statearr_10948_10971 = state_10929__$1;
                                    statearr_10948_10971[2] = inst_10890;
                                    statearr_10948_10971[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10930 === 14) {
                                      var inst_10913 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                                      var inst_10914 = communications.ch2.conn;
                                      var inst_10915 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_10914);
                                      var inst_10916 = communications.ch2.conn;
                                      var inst_10917 = inst_10916.send(communications.vrecieved);
                                      var state_10929__$1 = function() {
                                        var statearr_10949 = state_10929;
                                        statearr_10949[17] = inst_10915;
                                        statearr_10949[18] = inst_10913;
                                        return statearr_10949;
                                      }();
                                      var statearr_10950_10972 = state_10929__$1;
                                      statearr_10950_10972[2] = inst_10917;
                                      statearr_10950_10972[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10930 === 16) {
                                        var inst_10920 = state_10929[2];
                                        var state_10929__$1 = state_10929;
                                        var statearr_10951_10973 = state_10929__$1;
                                        statearr_10951_10973[2] = inst_10920;
                                        statearr_10951_10973[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10930 === 10) {
                                          var inst_10922 = state_10929[2];
                                          var state_10929__$1 = state_10929;
                                          var statearr_10952_10974 = state_10929__$1;
                                          statearr_10952_10974[2] = inst_10922;
                                          statearr_10952_10974[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10930 === 8) {
                                            var inst_10895 = app.logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                            var inst_10896 = communications.vrecieved.type;
                                            var inst_10897 = inst_10896 === "json";
                                            var state_10929__$1 = function() {
                                              var statearr_10953 = state_10929;
                                              statearr_10953[19] = inst_10895;
                                              return statearr_10953;
                                            }();
                                            if (cljs.core.truth_(inst_10897)) {
                                              var statearr_10954_10975 = state_10929__$1;
                                              statearr_10954_10975[1] = 11;
                                            } else {
                                              var statearr_10955_10976 = state_10929__$1;
                                              statearr_10955_10976[1] = 12;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10957 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10957[0] = state_machine__5713__auto__;
              statearr_10957[1] = 1;
              return statearr_10957;
            };
            var state_machine__5713__auto____1 = function(state_10929) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10929);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10929) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10929);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10958 = f__5726__auto__.call(null);
        statearr_10958[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10958;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.onNewConnection = function onNewConnection(message) {
  communications.gconn = message;
  app.intercom.setIntercomState.call(null, message, "start");
  app.logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
  communications.peerChannels = communications.channelsFromConnection.call(null, message);
  communications.intercomMeta.knownPeers = cljs.core.conj.call(null, communications.intercomMeta.knownPeers, message.peer);
  app.logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", cljs.core.nth.call(null, communications.peerChannels, 1));
  communications.intercomMeta.p2pchans = cljs.core.concat.call(null, communications.intercomMeta.p2pchans, communications.peerChannels);
  communications.intercomMeta.knownPeersChannels = cljs.core.conj.call(null, communications.intercomMeta.knownPeersChannels, cljs.core.nth.call(null, communications.peerChannels, 1));
  app.logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
  return communications.peerChannels;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_11024) {
            var state_val_11025 = state_11024[1];
            if (state_val_11025 === 4) {
              var inst_11019 = state_11024[2];
              var inst_11020 = communications.gotFromHash = inst_11019;
              var inst_11021 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_11022 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_11024__$1 = function() {
                var statearr_11026 = state_11024;
                statearr_11026[5] = inst_11020;
                statearr_11026[6] = inst_11021;
                return statearr_11026;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11024__$1, inst_11022);
            } else {
              if (state_val_11025 === 3) {
                var inst_11015 = state_11024[2];
                var inst_11016 = communications.blockk.hash;
                var inst_11017 = app.database.g.call(null, inst_11016);
                var state_11024__$1 = function() {
                  var statearr_11027 = state_11024;
                  statearr_11027[7] = inst_11015;
                  return statearr_11027;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11024__$1, 4, inst_11017);
              } else {
                if (state_val_11025 === 2) {
                  var inst_11008 = state_11024[2];
                  var inst_11009 = communications.blockk = inst_11008;
                  var inst_11010 = app.logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_11011 = communications.blockk.hash;
                  var inst_11012 = app.logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_11011);
                  var inst_11013 = app.blockchain.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_11024__$1 = function() {
                    var statearr_11028 = state_11024;
                    statearr_11028[8] = inst_11010;
                    statearr_11028[9] = inst_11009;
                    statearr_11028[10] = inst_11012;
                    return statearr_11028;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11024__$1, 3, inst_11013);
                } else {
                  if (state_val_11025 === 1) {
                    var inst_11005 = app.logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_11006 = app.blockchain.makeBlock.call(null, message);
                    var state_11024__$1 = function() {
                      var statearr_11029 = state_11024;
                      statearr_11029[11] = inst_11005;
                      return statearr_11029;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11024__$1, 2, inst_11006);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_11031 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11031[0] = state_machine__5713__auto__;
              statearr_11031[1] = 1;
              return statearr_11031;
            };
            var state_machine__5713__auto____1 = function(state_11024) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_11024);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_11024) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_11024);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_11032 = f__5726__auto__.call(null);
        statearr_11032[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_11032;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
communications.onTransaction = function onTransaction(message) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return app.crypto.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  app.logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", app.blockchain.memPool);
  app.blockchain.addTransactionToMemPool.call(null, message);
  app.logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    app.logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    app.mining.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, app.blockchain.memPool) > 3) {
    var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
      return function() {
        var f__5726__auto__ = function() {
          var switch__5712__auto__ = function(c__5725__auto__) {
            return function(state_11053) {
              var state_val_11054 = state_11053[1];
              if (state_val_11054 === 2) {
                var inst_11048 = state_11053[2];
                var inst_11049 = communications.fmroot = inst_11048;
                var inst_11050 = app.logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_11051 = app.mining.mine.call(null, communications.fmroot);
                var state_11053__$1 = function() {
                  var statearr_11055 = state_11053;
                  statearr_11055[5] = inst_11049;
                  statearr_11055[6] = inst_11050;
                  return statearr_11055;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11053__$1, inst_11051);
              } else {
                if (state_val_11054 === 1) {
                  var inst_11046 = app.crypto.merkleRoot.call(null, app.blockchain.memPool);
                  var state_11053__$1 = state_11053;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11053__$1, 2, inst_11046);
                } else {
                  return null;
                }
              }
            };
          }(c__5725__auto__);
          return function(switch__5712__auto__, c__5725__auto__) {
            return function() {
              var state_machine__5713__auto__ = null;
              var state_machine__5713__auto____0 = function() {
                var statearr_11057 = [null, null, null, null, null, null, null];
                statearr_11057[0] = state_machine__5713__auto__;
                statearr_11057[1] = 1;
                return statearr_11057;
              };
              var state_machine__5713__auto____1 = function(state_11053) {
                while (true) {
                  var result__5714__auto__ = switch__5712__auto__.call(null, state_11053);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5714__auto__;
                  }
                  break;
                }
              };
              state_machine__5713__auto__ = function(state_11053) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5713__auto____0.call(this);
                  case 1:
                    return state_machine__5713__auto____1.call(this, state_11053);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
              state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
              return state_machine__5713__auto__;
            }();
          }(switch__5712__auto__, c__5725__auto__);
        }();
        var state__5727__auto__ = function() {
          var statearr_11058 = f__5726__auto__.call(null);
          statearr_11058[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
          return statearr_11058;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
      };
    }(c__5725__auto__));
    return c__5725__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  pubsub.sub.call(null, "blockMined", communications.onBlockMined);
  pubsub.sub.call(null, "crypto", communications.onCrypto);
  pubsub.sub.call(null, "transaction", communications.onTransaction);
  return pubsub.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("app.intercomMake");
goog.require("pubsub");
goog.require("app.database");
goog.require("app.blockchain");
goog.require("cljs.core.async");
goog.require("app.database");
goog.require("communications");
goog.require("app.blockchain");
goog.require("app.intercomMake");
goog.require("app.logger");
goog.require("app.logger");
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9978) {
            var state_val_9979 = state_9978[1];
            if (state_val_9979 === 7) {
              var inst_9945 = state_9978[2];
              var inst_9946 = intercomTake.heightFromBlock.call(null, inst_9945);
              var inst_9947 = intercomTake.blocks.vector;
              var inst_9948 = inst_9947.length;
              var inst_9949 = inst_9946 + inst_9948;
              var inst_9950 = inst_9949 + 1;
              var inst_9951 = intercomTake.newHeight = inst_9950;
              var inst_9952 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
              var inst_9953 = intercomTake.bchainHeight < intercomTake.newHeight;
              var state_9978__$1 = function() {
                var statearr_9980 = state_9978;
                statearr_9980[5] = inst_9952;
                statearr_9980[6] = inst_9951;
                return statearr_9980;
              }();
              if (cljs.core.truth_(inst_9953)) {
                var statearr_9981_9999 = state_9978__$1;
                statearr_9981_9999[1] = 8;
              } else {
                var statearr_9982_10000 = state_9978__$1;
                statearr_9982_10000[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9979 === 1) {
                var inst_9924 = fullMessage.data;
                var inst_9925 = intercomTake.blocks = inst_9924;
                var inst_9926 = app.logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_9927 = intercomTake.blocks.vector;
                var inst_9928 = inst_9927[0];
                var inst_9929 = app.blockchain.prevblk.call(null, inst_9928);
                var inst_9930 = app.blockchain.blockKnown_QMARK_.call(null, inst_9929);
                var state_9978__$1 = function() {
                  var statearr_9983 = state_9978;
                  statearr_9983[7] = inst_9926;
                  statearr_9983[8] = inst_9925;
                  return statearr_9983;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9978__$1, 2, inst_9930);
              } else {
                if (state_val_9979 === 4) {
                  var inst_9962 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_9963 = app.database.g.call(null, "last");
                  var state_9978__$1 = function() {
                    var statearr_9984 = state_9978;
                    statearr_9984[9] = inst_9962;
                    return statearr_9984;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9978__$1, 11, inst_9963);
                } else {
                  if (state_val_9979 === 13) {
                    var inst_9969 = state_9978[10];
                    var inst_9972 = state_9978[2];
                    var state_9978__$1 = state_9978;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9978__$1, 12, inst_9969, inst_9972);
                  } else {
                    if (state_val_9979 === 6) {
                      var inst_9937 = state_9978[2];
                      var inst_9938 = intercomTake.bchainHeight = inst_9937;
                      var inst_9939 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_9940 = intercomTake.blocks.vector;
                      var inst_9941 = inst_9940[0];
                      var inst_9942 = app.blockchain.prevblk.call(null, inst_9941);
                      var inst_9943 = app.database.g.call(null, inst_9942);
                      var state_9978__$1 = function() {
                        var statearr_9985 = state_9978;
                        statearr_9985[11] = inst_9938;
                        statearr_9985[12] = inst_9939;
                        return statearr_9985;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9978__$1, 7, inst_9943);
                    } else {
                      if (state_val_9979 === 3) {
                        var inst_9934 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_9935 = app.blockchain.blockchainHeight.call(null);
                        var state_9978__$1 = function() {
                          var statearr_9986 = state_9978;
                          statearr_9986[13] = inst_9934;
                          return statearr_9986;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9978__$1, 6, inst_9935);
                      } else {
                        if (state_val_9979 === 12) {
                          var inst_9974 = state_9978[2];
                          var state_9978__$1 = state_9978;
                          var statearr_9987_10001 = state_9978__$1;
                          statearr_9987_10001[2] = inst_9974;
                          statearr_9987_10001[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9979 === 2) {
                            var inst_9932 = state_9978[2];
                            var state_9978__$1 = state_9978;
                            if (cljs.core.truth_(inst_9932)) {
                              var statearr_9988_10002 = state_9978__$1;
                              statearr_9988_10002[1] = 3;
                            } else {
                              var statearr_9989_10003 = state_9978__$1;
                              statearr_9989_10003[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9979 === 11) {
                              var inst_9965 = state_9978[2];
                              var inst_9966 = inst_9965.hash;
                              var inst_9967 = intercomTake.lblock = inst_9966;
                              var inst_9968 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                              var inst_9969 = fullMessage.peer;
                              var inst_9970 = app.intercomMake.makeGetBlock.call(null, intercomTake.lblock);
                              var state_9978__$1 = function() {
                                var statearr_9990 = state_9978;
                                statearr_9990[10] = inst_9969;
                                statearr_9990[14] = inst_9968;
                                statearr_9990[15] = inst_9967;
                                return statearr_9990;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9978__$1, 13, inst_9970);
                            } else {
                              if (state_val_9979 === 9) {
                                var inst_9958 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_9978__$1 = state_9978;
                                var statearr_9991_10004 = state_9978__$1;
                                statearr_9991_10004[2] = inst_9958;
                                statearr_9991_10004[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9979 === 5) {
                                  var inst_9976 = state_9978[2];
                                  var state_9978__$1 = function() {
                                    var statearr_9992 = state_9978;
                                    statearr_9992[16] = inst_9976;
                                    return statearr_9992;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9978__$1, "grind");
                                } else {
                                  if (state_val_9979 === 10) {
                                    var inst_9960 = state_9978[2];
                                    var state_9978__$1 = state_9978;
                                    var statearr_9993_10005 = state_9978__$1;
                                    statearr_9993_10005[2] = inst_9960;
                                    statearr_9993_10005[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9979 === 8) {
                                      var inst_9955 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_9956 = app.blockchain.addToChain.call(null, intercomTake.blocks);
                                      var state_9978__$1 = function() {
                                        var statearr_9994 = state_9978;
                                        statearr_9994[17] = inst_9955;
                                        return statearr_9994;
                                      }();
                                      var statearr_9995_10006 = state_9978__$1;
                                      statearr_9995_10006[2] = inst_9956;
                                      statearr_9995_10006[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9997 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9997[0] = state_machine__5713__auto__;
              statearr_9997[1] = 1;
              return statearr_9997;
            };
            var state_machine__5713__auto____1 = function(state_9978) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9978);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9978) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9978);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9998 = f__5726__auto__.call(null);
        statearr_9998[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9998;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10027) {
            var state_val_10028 = state_10027[1];
            if (state_val_10028 === 1) {
              var inst_10020 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_10021 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_10022 = intercomTake.v.data;
              var inst_10023 = it.handleInvBlock.call(null, inst_10022, intercomTake.v);
              var inst_10024 = intercomTake.tostate.call(null, "grind");
              var inst_10025 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_10027__$1 = function() {
                var statearr_10029 = state_10027;
                statearr_10029[5] = inst_10024;
                statearr_10029[6] = inst_10021;
                statearr_10029[7] = inst_10020;
                statearr_10029[8] = inst_10023;
                return statearr_10029;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10027__$1, inst_10025);
            } else {
              return null;
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10031 = [null, null, null, null, null, null, null, null, null];
              statearr_10031[0] = state_machine__5713__auto__;
              statearr_10031[1] = 1;
              return statearr_10031;
            };
            var state_machine__5713__auto____1 = function(state_10027) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10027);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10027) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10027);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10032 = f__5726__auto__.call(null);
        statearr_10032[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10032;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10049) {
            var state_val_10050 = state_10049[1];
            if (state_val_10050 === 1) {
              var inst_10044 = intercomTake.v.peer;
              var inst_10045 = communications.sendmsg.call(null, inst_10044, "version", "0");
              var inst_10046 = intercomTake.tostate.call(null, "grind");
              var inst_10047 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_10049__$1 = function() {
                var statearr_10051 = state_10049;
                statearr_10051[5] = inst_10046;
                statearr_10051[6] = inst_10045;
                return statearr_10051;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10049__$1, inst_10047);
            } else {
              return null;
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10053 = [null, null, null, null, null, null, null];
              statearr_10053[0] = state_machine__5713__auto__;
              statearr_10053[1] = 1;
              return statearr_10053;
            };
            var state_machine__5713__auto____1 = function(state_10049) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10049);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10049) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10049);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10054 = f__5726__auto__.call(null);
        statearr_10054[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10054;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10065) {
            var state_val_10066 = state_10065[1];
            if (state_val_10066 === 1) {
              var inst_10063 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_10065__$1 = function() {
                var statearr_10067 = state_10065;
                statearr_10067[5] = inst_10063;
                return statearr_10067;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10065__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10069 = [null, null, null, null, null, null];
              statearr_10069[0] = state_machine__5713__auto__;
              statearr_10069[1] = 1;
              return statearr_10069;
            };
            var state_machine__5713__auto____1 = function(state_10065) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10065);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10065) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10065);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10070 = f__5726__auto__.call(null);
        statearr_10070[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10070;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10111) {
            var state_val_10112 = state_10111[1];
            if (state_val_10112 === 4) {
              var inst_10109 = state_10111[2];
              var state_10111__$1 = state_10111;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10111__$1, inst_10109);
            } else {
              if (state_val_10112 === 3) {
                var state_10111__$1 = state_10111;
                var statearr_10113_10121 = state_10111__$1;
                statearr_10113_10121[2] = "version";
                statearr_10113_10121[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10112 === 2) {
                  var state_10111__$1 = state_10111;
                  var statearr_10114_10122 = state_10111__$1;
                  statearr_10114_10122[2] = "grind";
                  statearr_10114_10122[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10112 === 1) {
                    var inst_10096 = app.logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_10097 = conn.data;
                    var inst_10098 = inst_10097.writec;
                    var inst_10099 = app.intercomMake.makeVersion.call(null, "0");
                    var inst_10100 = communications.sendm.call(null, inst_10098, inst_10099);
                    var inst_10101 = conn.connType;
                    var inst_10102 = app.logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_10101);
                    var inst_10103 = conn.data;
                    var inst_10104 = inst_10103.connType;
                    var inst_10105 = inst_10104 === "saltan";
                    var state_10111__$1 = function() {
                      var statearr_10115 = state_10111;
                      statearr_10115[5] = inst_10102;
                      statearr_10115[6] = inst_10096;
                      statearr_10115[7] = inst_10100;
                      return statearr_10115;
                    }();
                    if (cljs.core.truth_(inst_10105)) {
                      var statearr_10116_10123 = state_10111__$1;
                      statearr_10116_10123[1] = 2;
                    } else {
                      var statearr_10117_10124 = state_10111__$1;
                      statearr_10117_10124[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10119 = [null, null, null, null, null, null, null, null];
              statearr_10119[0] = state_machine__5713__auto__;
              statearr_10119[1] = 1;
              return statearr_10119;
            };
            var state_machine__5713__auto____1 = function(state_10111) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10111);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10111) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10111);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10120 = f__5726__auto__.call(null);
        statearr_10120[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10120;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10145) {
            var state_val_10146 = state_10145[1];
            if (state_val_10146 === 2) {
              var inst_10142 = state_10145[2];
              var inst_10143 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_10142);
              var state_10145__$1 = state_10145;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10145__$1, inst_10143);
            } else {
              if (state_val_10146 === 1) {
                var inst_10138 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_10139 = app.logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_10140 = intercomTake.makeGetBlock.call(null, hash);
                var state_10145__$1 = function() {
                  var statearr_10147 = state_10145;
                  statearr_10147[5] = inst_10139;
                  statearr_10147[6] = inst_10138;
                  return statearr_10147;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10145__$1, 2, inst_10140);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10149 = [null, null, null, null, null, null, null];
              statearr_10149[0] = state_machine__5713__auto__;
              statearr_10149[1] = 1;
              return statearr_10149;
            };
            var state_machine__5713__auto____1 = function(state_10145) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10145);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10145) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10145);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10150 = f__5726__auto__.call(null);
        statearr_10150[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10150;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
goog.provide("app.intercom");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("communications");
goog.require("intercomTake");
goog.require("intercomTake");
goog.require("app.intercomMake");
goog.require("app.intercomMake");
goog.require("app.logger");
goog.require("app.logger");
cljs.core.enable_console_print_BANG_.call(null);
app.intercom.intercomState = "start";
app.intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
app.intercom.inputch = cljs.core.async.chan.call(null);
app.intercom.outputch = cljs.core.async.chan.call(null);
app.intercom.statech = cljs.core.async.chan.call(null);
app.intercom.onMessage = function onMessage(wch, type, data) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10168) {
            var state_val_10169 = state_10168[1];
            if (state_val_10169 === 2) {
              var inst_10166 = state_10168[2];
              var state_10168__$1 = state_10168;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10168__$1, inst_10166);
            } else {
              if (state_val_10169 === 1) {
                var inst_10164 = {"type":type, "data":data, "peer":wch};
                var state_10168__$1 = state_10168;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10168__$1, 2, app.intercom.inputch, inst_10164);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10171 = [null, null, null, null, null];
              statearr_10171[0] = state_machine__5713__auto__;
              statearr_10171[1] = 1;
              return statearr_10171;
            };
            var state_machine__5713__auto____1 = function(state_10168) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10168);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10168) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10168);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10172 = f__5726__auto__.call(null);
        statearr_10172[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10172;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.intercom.setIntercomState = function setIntercomState(conn, state) {
  return conn.intercomstate = state;
};
app.intercom.getIntercomState = function getIntercomState(conn) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
app.intercom.tostateu = function tostateu(conn, statename) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
app.intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
app.intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
app.intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10402) {
            var state_val_10403 = state_10402[1];
            if (state_val_10403 === 7) {
              var inst_10345 = app.intercom.is_QMARK_.call(null, app.intercom.state, "grind");
              var state_10402__$1 = state_10402;
              if (inst_10345) {
                var statearr_10404_10453 = state_10402__$1;
                statearr_10404_10453[1] = 13;
              } else {
                var statearr_10405_10454 = state_10402__$1;
                statearr_10405_10454[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10403 === 20) {
                var inst_10357 = app.intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_10402__$1 = state_10402;
                if (inst_10357) {
                  var statearr_10406_10455 = state_10402__$1;
                  statearr_10406_10455[1] = 22;
                } else {
                  var statearr_10407_10456 = state_10402__$1;
                  statearr_10407_10456[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10403 === 27) {
                  var inst_10387 = state_10402[2];
                  var state_10402__$1 = state_10402;
                  var statearr_10408_10457 = state_10402__$1;
                  statearr_10408_10457[2] = inst_10387;
                  statearr_10408_10457[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10403 === 1) {
                    var inst_10313 = cljs.core.partial.call(null, app.intercom.tostateu, conn);
                    var inst_10314 = app.intercom.tostate = inst_10313;
                    var inst_10315 = app.intercom.getIntercomState.call(null, conn);
                    var inst_10316 = app.intercom.state = inst_10315;
                    var inst_10317 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_10318 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", app.intercom.state);
                    var inst_10319 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_10320 = message.data;
                    var inst_10321 = app.intercom.v = inst_10320;
                    var inst_10322 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", app.intercom.state);
                    var inst_10323 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_10324 = app.intercom.is_QMARK_.call(null, app.intercom.state, "start");
                    var state_10402__$1 = function() {
                      var statearr_10409 = state_10402;
                      statearr_10409[5] = inst_10322;
                      statearr_10409[6] = inst_10321;
                      statearr_10409[7] = inst_10318;
                      statearr_10409[8] = inst_10316;
                      statearr_10409[9] = inst_10319;
                      statearr_10409[10] = inst_10317;
                      statearr_10409[11] = inst_10323;
                      statearr_10409[12] = inst_10314;
                      return statearr_10409;
                    }();
                    if (inst_10324) {
                      var statearr_10410_10458 = state_10402__$1;
                      statearr_10410_10458[1] = 2;
                    } else {
                      var statearr_10411_10459 = state_10402__$1;
                      statearr_10411_10459[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10403 === 24) {
                      var inst_10389 = state_10402[2];
                      var state_10402__$1 = state_10402;
                      var statearr_10412_10460 = state_10402__$1;
                      statearr_10412_10460[2] = inst_10389;
                      statearr_10412_10460[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10403 === 4) {
                        var inst_10400 = state_10402[2];
                        var state_10402__$1 = state_10402;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10402__$1, inst_10400);
                      } else {
                        if (state_val_10403 === 15) {
                          var inst_10396 = state_10402[2];
                          var state_10402__$1 = state_10402;
                          var statearr_10413_10461 = state_10402__$1;
                          statearr_10413_10461[2] = inst_10396;
                          statearr_10413_10461[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10403 === 21) {
                            var inst_10391 = state_10402[2];
                            var state_10402__$1 = state_10402;
                            var statearr_10414_10462 = state_10402__$1;
                            statearr_10414_10462[2] = inst_10391;
                            statearr_10414_10462[1] = 18;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10403 === 31) {
                              var inst_10374 = intercomTake.takeData.call(null, message);
                              var inst_10375 = app.intercom.tostate.call(null, inst_10374);
                              var state_10402__$1 = state_10402;
                              var statearr_10415_10463 = state_10402__$1;
                              statearr_10415_10463[2] = inst_10375;
                              statearr_10415_10463[1] = 33;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10403 === 32) {
                                var state_10402__$1 = state_10402;
                                var statearr_10416_10464 = state_10402__$1;
                                statearr_10416_10464[1] = 34;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10403 === 33) {
                                  var inst_10383 = state_10402[2];
                                  var state_10402__$1 = state_10402;
                                  var statearr_10418_10465 = state_10402__$1;
                                  statearr_10418_10465[2] = inst_10383;
                                  statearr_10418_10465[1] = 30;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10403 === 13) {
                                    var inst_10347 = app.intercom.typeof_QMARK_.call(null, message, "conn");
                                    var state_10402__$1 = state_10402;
                                    if (inst_10347) {
                                      var statearr_10419_10466 = state_10402__$1;
                                      statearr_10419_10466[1] = 16;
                                    } else {
                                      var statearr_10420_10467 = state_10402__$1;
                                      statearr_10420_10467[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10403 === 22) {
                                      var inst_10359 = intercomTake.takeGetData.call(null, message);
                                      var inst_10360 = app.intercom.tostate.call(null, inst_10359);
                                      var state_10402__$1 = state_10402;
                                      var statearr_10421_10468 = state_10402__$1;
                                      statearr_10421_10468[2] = inst_10360;
                                      statearr_10421_10468[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10403 === 36) {
                                        var inst_10381 = state_10402[2];
                                        var state_10402__$1 = state_10402;
                                        var statearr_10422_10469 = state_10402__$1;
                                        statearr_10422_10469[2] = inst_10381;
                                        statearr_10422_10469[1] = 33;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10403 === 29) {
                                          var inst_10372 = app.intercom.typeof_QMARK_.call(null, message, "data");
                                          var state_10402__$1 = state_10402;
                                          if (inst_10372) {
                                            var statearr_10423_10470 = state_10402__$1;
                                            statearr_10423_10470[1] = 31;
                                          } else {
                                            var statearr_10424_10471 = state_10402__$1;
                                            statearr_10424_10471[1] = 32;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10403 === 6) {
                                            var inst_10335 = app.intercom.typeof_QMARK_.call(null, message, "version");
                                            var state_10402__$1 = state_10402;
                                            if (inst_10335) {
                                              var statearr_10425_10472 = state_10402__$1;
                                              statearr_10425_10472[1] = 9;
                                            } else {
                                              var statearr_10426_10473 = state_10402__$1;
                                              statearr_10426_10473[1] = 10;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10403 === 28) {
                                              var inst_10369 = intercomTake.takeTx.call(null, message);
                                              var inst_10370 = app.intercom.tostate.call(null, inst_10369);
                                              var state_10402__$1 = state_10402;
                                              var statearr_10427_10474 = state_10402__$1;
                                              statearr_10427_10474[2] = inst_10370;
                                              statearr_10427_10474[1] = 30;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10403 === 25) {
                                                var inst_10364 = intercomTake.takeGetTx.call(null, message);
                                                var inst_10365 = app.intercom.tostate.call(null, inst_10364);
                                                var state_10402__$1 = state_10402;
                                                var statearr_10428_10475 = state_10402__$1;
                                                statearr_10428_10475[2] = inst_10365;
                                                statearr_10428_10475[1] = 27;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10403 === 34) {
                                                  var inst_10378 = app.intercom.tostate.call(null, "grind");
                                                  var state_10402__$1 = state_10402;
                                                  var statearr_10429_10476 = state_10402__$1;
                                                  statearr_10429_10476[2] = inst_10378;
                                                  statearr_10429_10476[1] = 36;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10403 === 17) {
                                                    var inst_10352 = app.intercom.typeof_QMARK_.call(null, message, "inv");
                                                    var state_10402__$1 = state_10402;
                                                    if (inst_10352) {
                                                      var statearr_10430_10477 = state_10402__$1;
                                                      statearr_10430_10477[1] = 19;
                                                    } else {
                                                      var statearr_10431_10478 = state_10402__$1;
                                                      statearr_10431_10478[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10403 === 3) {
                                                      var inst_10333 = app.intercom.is_QMARK_.call(null, app.intercom.state, "version");
                                                      var state_10402__$1 = state_10402;
                                                      if (inst_10333) {
                                                        var statearr_10432_10479 = state_10402__$1;
                                                        statearr_10432_10479[1] = 6;
                                                      } else {
                                                        var statearr_10433_10480 = state_10402__$1;
                                                        statearr_10433_10480[1] = 7;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_10403 === 12) {
                                                        var inst_10339 = state_10402[2];
                                                        var inst_10340 = app.intercom.tostate.call(null, inst_10339);
                                                        var state_10402__$1 = state_10402;
                                                        var statearr_10434_10481 = state_10402__$1;
                                                        statearr_10434_10481[2] = inst_10340;
                                                        statearr_10434_10481[1] = 11;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_10403 === 2) {
                                                          var inst_10326 = intercomTake.takeConn.call(null, message);
                                                          var state_10402__$1 = state_10402;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10402__$1, 5, inst_10326);
                                                        } else {
                                                          if (state_val_10403 === 23) {
                                                            var inst_10362 = app.intercom.typeof_QMARK_.call(null, message, "gettx");
                                                            var state_10402__$1 = state_10402;
                                                            if (inst_10362) {
                                                              var statearr_10435_10482 = state_10402__$1;
                                                              statearr_10435_10482[1] = 25;
                                                            } else {
                                                              var statearr_10436_10483 = state_10402__$1;
                                                              statearr_10436_10483[1] = 26;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_10403 === 35) {
                                                              var state_10402__$1 = state_10402;
                                                              var statearr_10437_10484 = state_10402__$1;
                                                              statearr_10437_10484[2] = null;
                                                              statearr_10437_10484[1] = 36;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_10403 === 19) {
                                                                var inst_10354 = intercomTake.takeInv.call(null, message);
                                                                var inst_10355 = app.intercom.tostate.call(null, inst_10354);
                                                                var state_10402__$1 = state_10402;
                                                                var statearr_10438_10485 = state_10402__$1;
                                                                statearr_10438_10485[2] = inst_10355;
                                                                statearr_10438_10485[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_10403 === 11) {
                                                                  var inst_10343 = state_10402[2];
                                                                  var state_10402__$1 = state_10402;
                                                                  var statearr_10439_10486 = state_10402__$1;
                                                                  statearr_10439_10486[2] = inst_10343;
                                                                  statearr_10439_10486[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_10403 === 9) {
                                                                    var inst_10337 = intercomTake.takeVersion.call(null, message);
                                                                    var state_10402__$1 = state_10402;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10402__$1, 12, inst_10337);
                                                                  } else {
                                                                    if (state_val_10403 === 5) {
                                                                      var inst_10328 = state_10402[2];
                                                                      var inst_10329 = app.intercom.newstate = inst_10328;
                                                                      var inst_10330 = app.logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", app.intercom.newstate);
                                                                      var inst_10331 = app.intercom.tostate.call(null, app.intercom.newstate);
                                                                      var state_10402__$1 = function() {
                                                                        var statearr_10440 = state_10402;
                                                                        statearr_10440[13] = inst_10329;
                                                                        statearr_10440[14] = inst_10330;
                                                                        return statearr_10440;
                                                                      }();
                                                                      var statearr_10441_10487 = state_10402__$1;
                                                                      statearr_10441_10487[2] = inst_10331;
                                                                      statearr_10441_10487[1] = 4;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_10403 === 14) {
                                                                        var state_10402__$1 = state_10402;
                                                                        var statearr_10442_10488 = state_10402__$1;
                                                                        statearr_10442_10488[2] = null;
                                                                        statearr_10442_10488[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_10403 === 26) {
                                                                          var inst_10367 = app.intercom.typeof_QMARK_.call(null, message, "tx");
                                                                          var state_10402__$1 = state_10402;
                                                                          if (inst_10367) {
                                                                            var statearr_10443_10489 = state_10402__$1;
                                                                            statearr_10443_10489[1] = 28;
                                                                          } else {
                                                                            var statearr_10444_10490 = state_10402__$1;
                                                                            statearr_10444_10490[1] = 29;
                                                                          }
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_10403 === 16) {
                                                                            var inst_10349 = intercomTake.takeConn.call(null, message);
                                                                            var inst_10350 = app.intercom.tostate.call(null, inst_10349);
                                                                            var state_10402__$1 = state_10402;
                                                                            var statearr_10445_10491 = state_10402__$1;
                                                                            statearr_10445_10491[2] = inst_10350;
                                                                            statearr_10445_10491[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_10403 === 30) {
                                                                              var inst_10385 = state_10402[2];
                                                                              var state_10402__$1 = state_10402;
                                                                              var statearr_10446_10492 = state_10402__$1;
                                                                              statearr_10446_10492[2] = inst_10385;
                                                                              statearr_10446_10492[1] = 27;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_10403 === 10) {
                                                                                var state_10402__$1 = state_10402;
                                                                                var statearr_10447_10493 = state_10402__$1;
                                                                                statearr_10447_10493[2] = null;
                                                                                statearr_10447_10493[1] = 11;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_10403 === 18) {
                                                                                  var inst_10393 = state_10402[2];
                                                                                  var state_10402__$1 = state_10402;
                                                                                  var statearr_10448_10494 = state_10402__$1;
                                                                                  statearr_10448_10494[2] = inst_10393;
                                                                                  statearr_10448_10494[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_10403 === 8) {
                                                                                    var inst_10398 = state_10402[2];
                                                                                    var state_10402__$1 = state_10402;
                                                                                    var statearr_10449_10495 = state_10402__$1;
                                                                                    statearr_10449_10495[2] = inst_10398;
                                                                                    statearr_10449_10495[1] = 4;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10451 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10451[0] = state_machine__5713__auto__;
              statearr_10451[1] = 1;
              return statearr_10451;
            };
            var state_machine__5713__auto____1 = function(state_10402) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10402);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10402) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10402);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10452 = f__5726__auto__.call(null);
        statearr_10452[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10452;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
goog.provide("app.blockchain");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("app.intercom");
goog.require("app.intercom");
goog.require("app.database");
goog.require("app.database");
goog.require("app.crypto");
goog.require("app.crypto");
goog.require("app.logger");
goog.require("app.logger");
cljs.core.enable_console_print_BANG_.call(null);
app.blockchain.memPool = [];
app.blockchain.blockhainInfo = function() {
  var obj9308 = {};
  return obj9308;
}();
app.blockchain.blockhainInfo.dificulty = 5;
app.blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  app.blockchain.memPool.push(x);
  return app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", app.blockchain.memPool);
};
app.blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  app.blockchain.memPool.splice(app.blockchain.memPool.indexOf(x));
  return app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", app.blockchain.memPool);
};
app.blockchain.makeBlockHeader = function makeBlockHeader(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj9312 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj9312;
};
app.blockchain.makeTransaction = function makeTransaction() {
  var obj9316 = {"":1};
  return obj9316;
};
app.blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj9320 = {"":1};
  return obj9320;
};
app.blockchain.prevblk = function prevblk(blockk) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk);
  return blockk.header.previous;
};
app.blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9398) {
            var state_val_9399 = state_9398[1];
            if (state_val_9399 === 7) {
              var inst_9392 = state_9398[2];
              var inst_9393 = app.blockchain.res = inst_9392;
              var state_9398__$1 = function() {
                var statearr_9400 = state_9398;
                statearr_9400[5] = inst_9393;
                return statearr_9400;
              }();
              var statearr_9401_9421 = state_9398__$1;
              statearr_9401_9421[2] = app.blockchain.res;
              statearr_9401_9421[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9399 === 1) {
                var state_9398__$1 = state_9398;
                if (cljs.core.truth_(blockk)) {
                  var statearr_9402_9422 = state_9398__$1;
                  statearr_9402_9422[1] = 2;
                } else {
                  var statearr_9403_9423 = state_9398__$1;
                  statearr_9403_9423[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9399 === 4) {
                  var inst_9396 = state_9398[2];
                  var state_9398__$1 = state_9398;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9398__$1, inst_9396);
                } else {
                  if (state_val_9399 === 15) {
                    var inst_9390 = state_9398[2];
                    var state_9398__$1 = state_9398;
                    var statearr_9404_9424 = state_9398__$1;
                    statearr_9404_9424[2] = inst_9390;
                    statearr_9404_9424[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9399 === 13) {
                      var state_9398__$1 = state_9398;
                      var statearr_9405_9425 = state_9398__$1;
                      statearr_9405_9425[2] = true;
                      statearr_9405_9425[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9399 === 6) {
                        var inst_9384 = app.database.g.call(null, blockk);
                        var state_9398__$1 = state_9398;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9398__$1, 12, inst_9384);
                      } else {
                        if (state_val_9399 === 3) {
                          var state_9398__$1 = state_9398;
                          var statearr_9406_9426 = state_9398__$1;
                          statearr_9406_9426[2] = false;
                          statearr_9406_9426[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9399 === 12) {
                            var inst_9386 = state_9398[2];
                            var state_9398__$1 = state_9398;
                            if (cljs.core.truth_(inst_9386)) {
                              var statearr_9407_9427 = state_9398__$1;
                              statearr_9407_9427[1] = 13;
                            } else {
                              var statearr_9408_9428 = state_9398__$1;
                              statearr_9408_9428[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9399 === 2) {
                              var inst_9372 = app.logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_9373 = blockk.hash;
                              var state_9398__$1 = function() {
                                var statearr_9409 = state_9398;
                                statearr_9409[6] = inst_9372;
                                return statearr_9409;
                              }();
                              if (cljs.core.truth_(inst_9373)) {
                                var statearr_9410_9429 = state_9398__$1;
                                statearr_9410_9429[1] = 5;
                              } else {
                                var statearr_9411_9430 = state_9398__$1;
                                statearr_9411_9430[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9399 === 11) {
                                var inst_9382 = state_9398[2];
                                var state_9398__$1 = state_9398;
                                var statearr_9412_9431 = state_9398__$1;
                                statearr_9412_9431[2] = inst_9382;
                                statearr_9412_9431[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9399 === 9) {
                                  var state_9398__$1 = state_9398;
                                  var statearr_9413_9432 = state_9398__$1;
                                  statearr_9413_9432[2] = true;
                                  statearr_9413_9432[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9399 === 5) {
                                    var inst_9375 = blockk.hash;
                                    var inst_9376 = app.database.g.call(null, inst_9375);
                                    var state_9398__$1 = state_9398;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9398__$1, 8, inst_9376);
                                  } else {
                                    if (state_val_9399 === 14) {
                                      var state_9398__$1 = state_9398;
                                      var statearr_9414_9433 = state_9398__$1;
                                      statearr_9414_9433[2] = false;
                                      statearr_9414_9433[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9399 === 10) {
                                        var state_9398__$1 = state_9398;
                                        var statearr_9415_9434 = state_9398__$1;
                                        statearr_9415_9434[2] = false;
                                        statearr_9415_9434[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9399 === 8) {
                                          var inst_9378 = state_9398[2];
                                          var state_9398__$1 = state_9398;
                                          if (cljs.core.truth_(inst_9378)) {
                                            var statearr_9416_9435 = state_9398__$1;
                                            statearr_9416_9435[1] = 9;
                                          } else {
                                            var statearr_9417_9436 = state_9398__$1;
                                            statearr_9417_9436[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9419 = [null, null, null, null, null, null, null];
              statearr_9419[0] = state_machine__5713__auto__;
              statearr_9419[1] = 1;
              return statearr_9419;
            };
            var state_machine__5713__auto____1 = function(state_9398) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9398);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9398) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9398);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9420 = f__5726__auto__.call(null);
        statearr_9420[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9420;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9523) {
            var state_val_9524 = state_9523[1];
            if (state_val_9524 === 7) {
              var state_9523__$1 = state_9523;
              var statearr_9525_9543 = state_9523__$1;
              statearr_9525_9543[2] = true;
              statearr_9525_9543[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9524 === 1) {
                var inst_9490 = app.logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_9491 = app.database.g.call(null, "last");
                var state_9523__$1 = function() {
                  var statearr_9526 = state_9523;
                  statearr_9526[5] = inst_9490;
                  return statearr_9526;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9523__$1, 2, inst_9491);
              } else {
                if (state_val_9524 === 4) {
                  var inst_9509 = app.database.g.call(null, blockk);
                  var state_9523__$1 = state_9523;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9523__$1, 10, inst_9509);
                } else {
                  if (state_val_9524 === 13) {
                    var inst_9518 = state_9523[2];
                    var state_9523__$1 = state_9523;
                    var statearr_9527_9544 = state_9523__$1;
                    statearr_9527_9544[2] = inst_9518;
                    statearr_9527_9544[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9524 === 6) {
                      var inst_9500 = state_9523[2];
                      var inst_9501 = inst_9500.hash;
                      var inst_9502 = app.blockchain.block.hash;
                      var inst_9503 = inst_9501 === inst_9502;
                      var state_9523__$1 = state_9523;
                      if (cljs.core.truth_(inst_9503)) {
                        var statearr_9528_9545 = state_9523__$1;
                        statearr_9528_9545[1] = 7;
                      } else {
                        var statearr_9529_9546 = state_9523__$1;
                        statearr_9529_9546[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9524 === 3) {
                        var inst_9497 = blockk.hash;
                        var inst_9498 = app.database.g.call(null, inst_9497);
                        var state_9523__$1 = state_9523;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9523__$1, 6, inst_9498);
                      } else {
                        if (state_val_9524 === 12) {
                          var state_9523__$1 = state_9523;
                          var statearr_9530_9547 = state_9523__$1;
                          statearr_9530_9547[2] = false;
                          statearr_9530_9547[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9524 === 2) {
                            var inst_9493 = state_9523[2];
                            var inst_9494 = app.blockchain.lastt = inst_9493;
                            var inst_9495 = blockk.hash;
                            var state_9523__$1 = function() {
                              var statearr_9531 = state_9523;
                              statearr_9531[6] = inst_9494;
                              return statearr_9531;
                            }();
                            if (cljs.core.truth_(inst_9495)) {
                              var statearr_9532_9548 = state_9523__$1;
                              statearr_9532_9548[1] = 3;
                            } else {
                              var statearr_9533_9549 = state_9523__$1;
                              statearr_9533_9549[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9524 === 11) {
                              var state_9523__$1 = state_9523;
                              var statearr_9534_9550 = state_9523__$1;
                              statearr_9534_9550[2] = true;
                              statearr_9534_9550[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9524 === 9) {
                                var inst_9507 = state_9523[2];
                                var state_9523__$1 = state_9523;
                                var statearr_9535_9551 = state_9523__$1;
                                statearr_9535_9551[2] = inst_9507;
                                statearr_9535_9551[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9524 === 5) {
                                  var inst_9520 = state_9523[2];
                                  var inst_9521 = app.blockchain.res = inst_9520;
                                  var state_9523__$1 = function() {
                                    var statearr_9536 = state_9523;
                                    statearr_9536[7] = inst_9521;
                                    return statearr_9536;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9523__$1, app.blockchain.res);
                                } else {
                                  if (state_val_9524 === 10) {
                                    var inst_9511 = state_9523[2];
                                    var inst_9512 = inst_9511.hash;
                                    var inst_9513 = app.blockchain.block.hash;
                                    var inst_9514 = inst_9512 === inst_9513;
                                    var state_9523__$1 = state_9523;
                                    if (cljs.core.truth_(inst_9514)) {
                                      var statearr_9537_9552 = state_9523__$1;
                                      statearr_9537_9552[1] = 11;
                                    } else {
                                      var statearr_9538_9553 = state_9523__$1;
                                      statearr_9538_9553[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9524 === 8) {
                                      var state_9523__$1 = state_9523;
                                      var statearr_9539_9554 = state_9523__$1;
                                      statearr_9539_9554[2] = false;
                                      statearr_9539_9554[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9541 = [null, null, null, null, null, null, null, null];
              statearr_9541[0] = state_machine__5713__auto__;
              statearr_9541[1] = 1;
              return statearr_9541;
            };
            var state_machine__5713__auto____1 = function(state_9523) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9523);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9523) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9523);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9542 = f__5726__auto__.call(null);
        statearr_9542[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9542;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.heightFromBlock = function heightFromBlock(blockk) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
app.blockchain.makeBlock = function makeBlock(work) {
  app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "about to make block ", work);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9625) {
            var state_val_9626 = state_9625[1];
            if (state_val_9626 === 4) {
              var inst_9620 = state_9625[2];
              var inst_9621 = {"header":app.blockchain.blockHeader, "hash":inst_9620, "transactions":app.blockchain.transactions};
              var inst_9622 = app.blockchain.blockk = inst_9621;
              var inst_9623 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "newly made block ", app.blockchain.blockk);
              var state_9625__$1 = function() {
                var statearr_9627 = state_9625;
                statearr_9627[5] = inst_9622;
                statearr_9627[6] = inst_9623;
                return statearr_9627;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9625__$1, app.blockchain.blockk);
            } else {
              if (state_val_9626 === 3) {
                var inst_9601 = state_9625[2];
                var inst_9602 = app.blockchain.transactions = inst_9601;
                var inst_9603 = app.blockchain.lastv = app.blockchain.lastt2;
                var inst_9604 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", app.blockchain.lastv);
                var inst_9605 = app.blockchain.lastv.hash;
                var inst_9606 = work.root;
                var inst_9607 = new Date;
                var inst_9608 = inst_9607.getTime();
                var inst_9609 = app.blockchain.blockhainInfo.dificulty;
                var inst_9610 = work.nonce;
                var inst_9611 = app.blockchain.transactions.lenght;
                var inst_9612 = app.blockchain.makeBlockHeader.call(null, "0", inst_9605, inst_9606, inst_9608, inst_9609, inst_9610, inst_9611);
                var inst_9613 = app.blockchain.blockHeader = inst_9612;
                var inst_9614 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "block header ", app.blockchain.blockHeader);
                var inst_9615 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "transactions when saving block ", app.blockchain.transactions);
                var inst_9618 = app.crypto.bHash.call(null, app.blockchain.blockHeader);
                var state_9625__$1 = function() {
                  var statearr_9628 = state_9625;
                  statearr_9628[7] = inst_9603;
                  statearr_9628[8] = inst_9602;
                  statearr_9628[9] = inst_9604;
                  statearr_9628[10] = inst_9615;
                  statearr_9628[11] = inst_9614;
                  statearr_9628[12] = inst_9613;
                  return statearr_9628;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9625__$1, 4, inst_9618);
              } else {
                if (state_val_9626 === 2) {
                  var inst_9596 = state_9625[2];
                  var inst_9597 = app.blockchain.lastt2 = inst_9596;
                  var inst_9598 = app.logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", app.blockchain.lastt2);
                  var inst_9599 = app.database.g.call(null, "txs");
                  var state_9625__$1 = function() {
                    var statearr_9629 = state_9625;
                    statearr_9629[13] = inst_9598;
                    statearr_9629[14] = inst_9597;
                    return statearr_9629;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9625__$1, 3, inst_9599);
                } else {
                  if (state_val_9626 === 1) {
                    var inst_9594 = app.database.g.call(null, "last");
                    var state_9625__$1 = state_9625;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9625__$1, 2, inst_9594);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9631 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9631[0] = state_machine__5713__auto__;
              statearr_9631[1] = 1;
              return statearr_9631;
            };
            var state_machine__5713__auto____1 = function(state_9625) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9625);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9625) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9625);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9632 = f__5726__auto__.call(null);
        statearr_9632[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9632;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.saveBlock = function saveBlock(dbase, blockR) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9679) {
            var state_val_9680 = state_9679[1];
            if (state_val_9680 === 4) {
              var inst_9677 = state_9679[2];
              var state_9679__$1 = state_9679;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9679__$1, inst_9677);
            } else {
              if (state_val_9680 === 3) {
                var inst_9673 = state_9679[2];
                var inst_9674 = "b" + app.blockchain.heightForBlock;
                var inst_9675 = app.database.ps.call(null, inst_9674, blockR);
                var state_9679__$1 = function() {
                  var statearr_9681 = state_9679;
                  statearr_9681[5] = inst_9673;
                  return statearr_9681;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9679__$1, 4, inst_9675);
              } else {
                if (state_val_9680 === 2) {
                  var inst_9663 = state_9679[2];
                  var inst_9664 = app.blockchain.heightForBlock = inst_9663;
                  var inst_9665 = blockR.header;
                  var inst_9666 = inst_9665.heightFromRoot = app.blockchain.heightForBlock;
                  var inst_9667 = function() {
                    return function(inst_9663, inst_9664, inst_9665, inst_9666, state_val_9680, c__5725__auto__) {
                      return function() {
                        return blockR;
                      };
                    }(inst_9663, inst_9664, inst_9665, inst_9666, state_val_9680, c__5725__auto__);
                  }();
                  var inst_9668 = app.blockchain.a = inst_9667;
                  var inst_9669 = app.database.update.call(null, "last", app.blockchain.a);
                  var inst_9670 = blockR.hash;
                  var inst_9671 = app.database.ps.call(null, inst_9670, blockR);
                  var state_9679__$1 = function() {
                    var statearr_9682 = state_9679;
                    statearr_9682[6] = inst_9668;
                    statearr_9682[7] = inst_9669;
                    statearr_9682[8] = inst_9666;
                    statearr_9682[9] = inst_9664;
                    return statearr_9682;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9679__$1, 3, inst_9671);
                } else {
                  if (state_val_9680 === 1) {
                    var inst_9660 = app.logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                    var inst_9661 = app.blockchain.blockchainHeight.call(null, 1);
                    var state_9679__$1 = function() {
                      var statearr_9683 = state_9679;
                      statearr_9683[10] = inst_9660;
                      return statearr_9683;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9679__$1, 2, inst_9661);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9685 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_9685[0] = state_machine__5713__auto__;
              statearr_9685[1] = 1;
              return statearr_9685;
            };
            var state_machine__5713__auto____1 = function(state_9679) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9679);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9679) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9679);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9686 = f__5726__auto__.call(null);
        statearr_9686[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9686;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.addToChain = function addToChain(schain) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9766) {
            var state_val_9767 = state_9766[1];
            if (state_val_9767 === 7) {
              var inst_9738 = state_9766[5];
              var inst_9752 = state_9766[2];
              var inst_9753 = schain.length;
              var inst_9754 = inst_9738 < inst_9753;
              var state_9766__$1 = function() {
                var statearr_9768 = state_9766;
                statearr_9768[6] = inst_9752;
                return statearr_9768;
              }();
              if (cljs.core.truth_(inst_9754)) {
                var statearr_9769_9787 = state_9766__$1;
                statearr_9769_9787[1] = 8;
              } else {
                var statearr_9770_9788 = state_9766__$1;
                statearr_9770_9788[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9767 === 1) {
                var inst_9737 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_9738 = 0;
                var state_9766__$1 = function() {
                  var statearr_9771 = state_9766;
                  statearr_9771[5] = inst_9738;
                  statearr_9771[7] = inst_9737;
                  return statearr_9771;
                }();
                var statearr_9772_9789 = state_9766__$1;
                statearr_9772_9789[2] = null;
                statearr_9772_9789[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9767 === 4) {
                  var inst_9745 = state_9766[2];
                  var state_9766__$1 = state_9766;
                  if (cljs.core.truth_(inst_9745)) {
                    var statearr_9773_9790 = state_9766__$1;
                    statearr_9773_9790[1] = 5;
                  } else {
                    var statearr_9774_9791 = state_9766__$1;
                    statearr_9774_9791[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9767 === 6) {
                    var inst_9738 = state_9766[5];
                    var inst_9749 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_9738);
                    var inst_9750 = app.blockchain.saveBlock.call(null, inst_9738);
                    var state_9766__$1 = function() {
                      var statearr_9775 = state_9766;
                      statearr_9775[8] = inst_9749;
                      return statearr_9775;
                    }();
                    var statearr_9776_9792 = state_9766__$1;
                    statearr_9776_9792[2] = inst_9750;
                    statearr_9776_9792[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9767 === 3) {
                      var inst_9762 = state_9766[2];
                      var inst_9763 = cljs.core.last.call(null, schain);
                      var inst_9764 = app.database.update.call(null, "last", inst_9763);
                      var state_9766__$1 = function() {
                        var statearr_9777 = state_9766;
                        statearr_9777[9] = inst_9762;
                        return statearr_9777;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9766__$1, inst_9764);
                    } else {
                      if (state_val_9767 === 2) {
                        var inst_9738 = state_9766[5];
                        var inst_9740 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_9738);
                        var inst_9741 = schain[inst_9738];
                        var inst_9742 = app.blockchain.prevblk.call(null, inst_9741);
                        var inst_9743 = app.blockchain.blockKnown_QMARK_.call(null, inst_9742);
                        var state_9766__$1 = function() {
                          var statearr_9778 = state_9766;
                          statearr_9778[10] = inst_9740;
                          return statearr_9778;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9766__$1, 4, inst_9743);
                      } else {
                        if (state_val_9767 === 9) {
                          var state_9766__$1 = state_9766;
                          var statearr_9779_9793 = state_9766__$1;
                          statearr_9779_9793[2] = null;
                          statearr_9779_9793[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9767 === 5) {
                            var inst_9738 = state_9766[5];
                            var inst_9747 = app.logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_9738);
                            var state_9766__$1 = state_9766;
                            var statearr_9780_9794 = state_9766__$1;
                            statearr_9780_9794[2] = inst_9747;
                            statearr_9780_9794[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9767 === 10) {
                              var inst_9760 = state_9766[2];
                              var state_9766__$1 = state_9766;
                              var statearr_9781_9795 = state_9766__$1;
                              statearr_9781_9795[2] = inst_9760;
                              statearr_9781_9795[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9767 === 8) {
                                var inst_9738 = state_9766[5];
                                var inst_9756 = inst_9738 + 1;
                                var inst_9738__$1 = inst_9756;
                                var state_9766__$1 = function() {
                                  var statearr_9782 = state_9766;
                                  statearr_9782[5] = inst_9738__$1;
                                  return statearr_9782;
                                }();
                                var statearr_9783_9796 = state_9766__$1;
                                statearr_9783_9796[2] = null;
                                statearr_9783_9796[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9785 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_9785[0] = state_machine__5713__auto__;
              statearr_9785[1] = 1;
              return statearr_9785;
            };
            var state_machine__5713__auto____1 = function(state_9766) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9766);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9766) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9766);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9786 = f__5726__auto__.call(null);
        statearr_9786[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9786;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_9835) {
            var state_val_9836 = state_9835[1];
            if (state_val_9836 === 6) {
              var inst_9830 = state_9835[2];
              var state_9835__$1 = state_9835;
              var statearr_9837_9845 = state_9835__$1;
              statearr_9837_9845[2] = inst_9830;
              statearr_9837_9845[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9836 === 5) {
                var inst_9833 = state_9835[2];
                var state_9835__$1 = state_9835;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9835__$1, inst_9833);
              } else {
                if (state_val_9836 === 4) {
                  var state_9835__$1 = state_9835;
                  var statearr_9838_9846 = state_9835__$1;
                  statearr_9838_9846[2] = app.blockchain.hght;
                  statearr_9838_9846[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9836 === 3) {
                    var inst_9827 = function() {
                      return function(state_val_9836, c__5725__auto__) {
                        return function(v) {
                          app.logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "prev height ", v);
                          app.logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "to add  ", x);
                          app.logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "after addition  ", v + x);
                          return v + x;
                        };
                      }(state_val_9836, c__5725__auto__);
                    }();
                    var inst_9828 = app.database.update.call(null, "height", inst_9827);
                    var state_9835__$1 = state_9835;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9835__$1, 6, inst_9828);
                  } else {
                    if (state_val_9836 === 2) {
                      var inst_9823 = state_9835[2];
                      var inst_9824 = app.blockchain.hght = inst_9823;
                      var inst_9825 = app.logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", app.blockchain.hght);
                      var state_9835__$1 = function() {
                        var statearr_9839 = state_9835;
                        statearr_9839[5] = inst_9824;
                        statearr_9839[6] = inst_9825;
                        return statearr_9839;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_9840_9847 = state_9835__$1;
                        statearr_9840_9847[1] = 3;
                      } else {
                        var statearr_9841_9848 = state_9835__$1;
                        statearr_9841_9848[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9836 === 1) {
                        var inst_9821 = app.database.g.call(null, "height");
                        var state_9835__$1 = state_9835;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9835__$1, 2, inst_9821);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_9843 = [null, null, null, null, null, null, null];
              statearr_9843[0] = state_machine__5713__auto__;
              statearr_9843[1] = 1;
              return statearr_9843;
            };
            var state_machine__5713__auto____1 = function(state_9835) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_9835);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_9835) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_9835);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_9844 = f__5726__auto__.call(null);
        statearr_9844[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_9844;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
app.blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
app.blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("servantWorkers");
goog.require("cljs.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("app.main");
goog.require("cljs.core");
goog.require("app.pouchDB");
goog.require("peerjs");
goog.require("app.database");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("app.intercom");
goog.require("pubsub");
goog.require("app.database");
goog.require("app.pouchDB");
goog.require("peerjs");
goog.require("app.intercom");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("communications");
goog.require("app.logger");
goog.require("app.logger");
cljs.core.enable_console_print_BANG_.call(null);
app.main.start = cljs.core.async.chan.call(null);
app.main.transactionch = cljs.core.async.chan.call(null);
app.main.transactionch.type = "transactionch";
app.main.cryptoCh = cljs.core.async.chan.call(null);
app.main.cryptoCh.type = "cryptoch";
$(document).on("transaction", function(a1, a2) {
  return pubsub.pub.call(null, "transaction", a2);
});
app.main.connectTo = function connectTo(ev, id) {
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10936) {
            var state_val_10937 = state_10936[1];
            if (state_val_10937 === 4) {
              var inst_10931 = state_10936[2];
              var inst_10932 = inst_10931.connect(id);
              var inst_10933 = cljs.core.partial.call(null, communications.onOpen, inst_10932);
              var inst_10934 = inst_10932.on("open", inst_10933);
              var state_10936__$1 = state_10936;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10936__$1, inst_10934);
            } else {
              if (state_val_10937 === 3) {
                var inst_10927 = state_10936[2];
                var inst_10928 = app.logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10927);
                var inst_10929 = pubsub.get.call(null);
                var state_10936__$1 = function() {
                  var statearr_10938 = state_10936;
                  statearr_10938[5] = inst_10928;
                  return statearr_10938;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10936__$1, 4, inst_10929);
              } else {
                if (state_val_10937 === 2) {
                  var inst_10923 = state_10936[2];
                  var inst_10924 = app.logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10923);
                  var inst_10925 = pubsub.get.call(null);
                  var state_10936__$1 = function() {
                    var statearr_10939 = state_10936;
                    statearr_10939[6] = inst_10924;
                    return statearr_10939;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10936__$1, 3, inst_10925);
                } else {
                  if (state_val_10937 === 1) {
                    var inst_10919 = cljs.core.first.call(null, id);
                    var inst_10920 = app.logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10919);
                    var inst_10921 = pubsub.get.call(null);
                    var state_10936__$1 = function() {
                      var statearr_10940 = state_10936;
                      statearr_10940[7] = inst_10920;
                      return statearr_10940;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10936__$1, 2, inst_10921);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10942 = [null, null, null, null, null, null, null, null];
              statearr_10942[0] = state_machine__5713__auto__;
              statearr_10942[1] = 1;
              return statearr_10942;
            };
            var state_machine__5713__auto____1 = function(state_10936) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10936);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10936) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10936);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10943 = f__5726__auto__.call(null);
        statearr_10943[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10943;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
$(document).on("connectTo", app.main.connectTo);
app.main.empty_string = "";
PouchDB.debug.enable("*");
app.main.setID = function setID(ev, id) {
  cljs.core.println.call(null, id);
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_10971) {
            var state_val_10972 = state_10971[1];
            if (state_val_10972 === 2) {
              var inst_10964 = state_10971[2];
              var inst_10965 = console.log(inst_10964);
              var inst_10966 = new Peer(id, peerjs.peerParams);
              var inst_10967 = app.main.peerjs = inst_10966;
              var inst_10968 = pubsub.init.call(null, app.main.peerjs);
              var inst_10969 = app.main.peerjs.on("connection", communications.onConnection);
              var state_10971__$1 = function() {
                var statearr_10973 = state_10971;
                statearr_10973[5] = inst_10967;
                statearr_10973[6] = inst_10965;
                statearr_10973[7] = inst_10968;
                return statearr_10973;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10971__$1, inst_10969);
            } else {
              if (state_val_10972 === 1) {
                var inst_10961 = app.database.p.call(null, "lid", id);
                var inst_10962 = app.database.g.call(null, "lid");
                var state_10971__$1 = function() {
                  var statearr_10974 = state_10971;
                  statearr_10974[8] = inst_10961;
                  return statearr_10974;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10971__$1, 2, inst_10962);
              } else {
                return null;
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_10976 = [null, null, null, null, null, null, null, null, null];
              statearr_10976[0] = state_machine__5713__auto__;
              statearr_10976[1] = 1;
              return statearr_10976;
            };
            var state_machine__5713__auto____1 = function(state_10971) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_10971);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_10971) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_10971);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_10977 = f__5726__auto__.call(null);
        statearr_10977[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_10977;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
$(document).on("setid", app.main.setID);
app.main.entryy = function entryy() {
  app.logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "Hello wor 32 d rdaldad!");
  app.logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "about to connect from heere");
  var c__5725__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5725__auto__) {
    return function() {
      var f__5726__auto__ = function() {
        var switch__5712__auto__ = function(c__5725__auto__) {
          return function(state_11036) {
            var state_val_11037 = state_11036[1];
            if (state_val_11037 === 6) {
              var inst_11029 = state_11036[2];
              var state_11036__$1 = state_11036;
              var statearr_11038_11048 = state_11036__$1;
              statearr_11038_11048[2] = inst_11029;
              statearr_11038_11048[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11037 === 5) {
                var inst_11031 = state_11036[2];
                var inst_11032 = pubsub.initpubsub.call(null);
                var inst_11033 = communications.setupComm.call(null);
                var inst_11034 = communications.startP2PCommLoop.call(null);
                var state_11036__$1 = function() {
                  var statearr_11039 = state_11036;
                  statearr_11039[5] = inst_11031;
                  statearr_11039[6] = inst_11032;
                  statearr_11039[7] = inst_11033;
                  return statearr_11039;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11036__$1, inst_11034);
              } else {
                if (state_val_11037 === 4) {
                  var inst_11027 = app.database.initDBase.call(null);
                  var state_11036__$1 = state_11036;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11036__$1, 6, inst_11027);
                } else {
                  if (state_val_11037 === 3) {
                    var inst_11019 = console.log(app.main.id);
                    var inst_11020 = $("#id");
                    var inst_11021 = inst_11020.val(app.main.id);
                    var inst_11022 = new Peer(app.main.id, peerjs.peerParams);
                    var inst_11023 = app.main.peerjs = inst_11022;
                    var inst_11024 = pubsub.init.call(null, app.main.peerjs);
                    var inst_11025 = app.main.peerjs.on("connection", communications.onConnection);
                    var state_11036__$1 = function() {
                      var statearr_11040 = state_11036;
                      statearr_11040[8] = inst_11019;
                      statearr_11040[9] = inst_11023;
                      statearr_11040[10] = inst_11021;
                      statearr_11040[11] = inst_11024;
                      return statearr_11040;
                    }();
                    var statearr_11041_11049 = state_11036__$1;
                    statearr_11041_11049[2] = inst_11025;
                    statearr_11041_11049[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11037 === 2) {
                      var inst_11015 = state_11036[2];
                      var inst_11016 = app.main.id = inst_11015;
                      var inst_11017 = app.logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", app.main.id);
                      var state_11036__$1 = function() {
                        var statearr_11042 = state_11036;
                        statearr_11042[12] = inst_11016;
                        statearr_11042[13] = inst_11017;
                        return statearr_11042;
                      }();
                      if (cljs.core.truth_(app.main.id)) {
                        var statearr_11043_11050 = state_11036__$1;
                        statearr_11043_11050[1] = 3;
                      } else {
                        var statearr_11044_11051 = state_11036__$1;
                        statearr_11044_11051[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11037 === 1) {
                        var inst_11013 = app.database.g.call(null, "lid");
                        var state_11036__$1 = state_11036;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11036__$1, 2, inst_11013);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5725__auto__);
        return function(switch__5712__auto__, c__5725__auto__) {
          return function() {
            var state_machine__5713__auto__ = null;
            var state_machine__5713__auto____0 = function() {
              var statearr_11046 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11046[0] = state_machine__5713__auto__;
              statearr_11046[1] = 1;
              return statearr_11046;
            };
            var state_machine__5713__auto____1 = function(state_11036) {
              while (true) {
                var result__5714__auto__ = switch__5712__auto__.call(null, state_11036);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5714__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5714__auto__;
                }
                break;
              }
            };
            state_machine__5713__auto__ = function(state_11036) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5713__auto____0.call(this);
                case 1:
                  return state_machine__5713__auto____1.call(this, state_11036);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5713__auto____0;
            state_machine__5713__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5713__auto____1;
            return state_machine__5713__auto__;
          }();
        }(switch__5712__auto__, c__5725__auto__);
      }();
      var state__5727__auto__ = function() {
        var statearr_11047 = f__5726__auto__.call(null);
        statearr_11047[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5725__auto__;
        return statearr_11047;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5727__auto__);
    };
  }(c__5725__auto__));
  return c__5725__auto__;
};
window.onload = app.main.entryy;
